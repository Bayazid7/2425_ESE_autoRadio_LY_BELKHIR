
AUTO_RADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c604  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800c794  0800c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  0000e0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c0  0800c9c0  0000d9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c8  0800c9c8  0000e0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c8  0800c9c8  0000d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9cc  0800c9cc  0000d9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800c9d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017dc  200000a0  0800ca70  0000e0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000187c  0800ca70  0000e87c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024323  00000000  00000000  0000e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005500  00000000  00000000  000323f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  000378f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001766  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf7c  00000000  00000000  0003ae86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000282e0  00000000  00000000  00067e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105a44  00000000  00000000  000900e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008614  00000000  00000000  00195b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0019e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c77c 	.word	0x0800c77c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800c77c 	.word	0x0800c77c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96a 	b.w	8000d38 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	460c      	mov	r4, r1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d14e      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a88:	4694      	mov	ip, r2
 8000a8a:	458c      	cmp	ip, r1
 8000a8c:	4686      	mov	lr, r0
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	d962      	bls.n	8000b5a <__udivmoddi4+0xde>
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f f68c 	uxth.w	r6, ip
 8000ab2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ab6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aba:	fb07 1114 	mls	r1, r7, r4, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb04 f106 	mul.w	r1, r4, r6
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ad2:	f080 8112 	bcs.w	8000cfa <__udivmoddi4+0x27e>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 810f 	bls.w	8000cfa <__udivmoddi4+0x27e>
 8000adc:	3c02      	subs	r4, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a59      	subs	r1, r3, r1
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aea:	fb07 1110 	mls	r1, r7, r0, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb00 f606 	mul.w	r6, r0, r6
 8000af6:	429e      	cmp	r6, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x94>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b02:	f080 80fc 	bcs.w	8000cfe <__udivmoddi4+0x282>
 8000b06:	429e      	cmp	r6, r3
 8000b08:	f240 80f9 	bls.w	8000cfe <__udivmoddi4+0x282>
 8000b0c:	4463      	add	r3, ip
 8000b0e:	3802      	subs	r0, #2
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	b11d      	cbz	r5, 8000b22 <__udivmoddi4+0xa6>
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d905      	bls.n	8000b36 <__udivmoddi4+0xba>
 8000b2a:	b10d      	cbz	r5, 8000b30 <__udivmoddi4+0xb4>
 8000b2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b30:	2100      	movs	r1, #0
 8000b32:	4608      	mov	r0, r1
 8000b34:	e7f5      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b36:	fab3 f183 	clz	r1, r3
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d146      	bne.n	8000bcc <__udivmoddi4+0x150>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xcc>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	f0c0 80f0 	bcc.w	8000d28 <__udivmoddi4+0x2ac>
 8000b48:	1a86      	subs	r6, r0, r2
 8000b4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d0e6      	beq.n	8000b22 <__udivmoddi4+0xa6>
 8000b54:	e9c5 6300 	strd	r6, r3, [r5]
 8000b58:	e7e3      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x204>
 8000b60:	eba1 040c 	sub.w	r4, r1, ip
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b76:	fb08 4416 	mls	r4, r8, r6, r4
 8000b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7e:	fb07 f006 	mul.w	r0, r7, r6
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x11c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x11a>
 8000b90:	4298      	cmp	r0, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b96:	4626      	mov	r6, r4
 8000b98:	1a1c      	subs	r4, r3, r0
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ba2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000baa:	fb00 f707 	mul.w	r7, r0, r7
 8000bae:	429f      	cmp	r7, r3
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x148>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bba:	d202      	bcs.n	8000bc2 <__udivmoddi4+0x146>
 8000bbc:	429f      	cmp	r7, r3
 8000bbe:	f200 80b0 	bhi.w	8000d22 <__udivmoddi4+0x2a6>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	1bdb      	subs	r3, r3, r7
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	e7a5      	b.n	8000b18 <__udivmoddi4+0x9c>
 8000bcc:	f1c1 0620 	rsb	r6, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000be0:	ea43 030c 	orr.w	r3, r3, ip
 8000be4:	40f4      	lsrs	r4, r6
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	0c38      	lsrs	r0, r7, #16
 8000bec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c00:	fb0e f90c 	mul.w	r9, lr, ip
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x1a6>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c12:	f080 8084 	bcs.w	8000d1e <__udivmoddi4+0x2a2>
 8000c16:	45a1      	cmp	r9, r4
 8000c18:	f240 8081 	bls.w	8000d1e <__udivmoddi4+0x2a2>
 8000c1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c20:	443c      	add	r4, r7
 8000c22:	eba4 0409 	sub.w	r4, r4, r9
 8000c26:	fa1f f983 	uxth.w	r9, r3
 8000c2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x1d2>
 8000c3e:	193c      	adds	r4, r7, r4
 8000c40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c44:	d267      	bcs.n	8000d16 <__udivmoddi4+0x29a>
 8000c46:	45a4      	cmp	ip, r4
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0x29a>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	443c      	add	r4, r7
 8000c4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c52:	fba0 9302 	umull	r9, r3, r0, r2
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	469c      	mov	ip, r3
 8000c60:	d351      	bcc.n	8000d06 <__udivmoddi4+0x28a>
 8000c62:	d04e      	beq.n	8000d02 <__udivmoddi4+0x286>
 8000c64:	b155      	cbz	r5, 8000c7c <__udivmoddi4+0x200>
 8000c66:	ebb8 030e 	subs.w	r3, r8, lr
 8000c6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c72:	40cb      	lsrs	r3, r1
 8000c74:	431e      	orrs	r6, r3
 8000c76:	40cc      	lsrs	r4, r1
 8000c78:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e750      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f103 	lsr.w	r1, r0, r3
 8000c88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c90:	4094      	lsls	r4, r2
 8000c92:	430c      	orrs	r4, r1
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca8:	0c23      	lsrs	r3, r4, #16
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f107 	mul.w	r1, r0, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x24c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cbe:	d22c      	bcs.n	8000d1a <__udivmoddi4+0x29e>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d92a      	bls.n	8000d1a <__udivmoddi4+0x29e>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb01 f307 	mul.w	r3, r1, r7
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x276>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce8:	d213      	bcs.n	8000d12 <__udivmoddi4+0x296>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d911      	bls.n	8000d12 <__udivmoddi4+0x296>
 8000cee:	3902      	subs	r1, #2
 8000cf0:	4464      	add	r4, ip
 8000cf2:	1ae4      	subs	r4, r4, r3
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	e739      	b.n	8000b6e <__udivmoddi4+0xf2>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	e6f0      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e706      	b.n	8000b10 <__udivmoddi4+0x94>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d2ae      	bcs.n	8000c64 <__udivmoddi4+0x1e8>
 8000d06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d0e:	3801      	subs	r0, #1
 8000d10:	e7a8      	b.n	8000c64 <__udivmoddi4+0x1e8>
 8000d12:	4631      	mov	r1, r6
 8000d14:	e7ed      	b.n	8000cf2 <__udivmoddi4+0x276>
 8000d16:	4603      	mov	r3, r0
 8000d18:	e799      	b.n	8000c4e <__udivmoddi4+0x1d2>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e7d4      	b.n	8000cc8 <__udivmoddi4+0x24c>
 8000d1e:	46d6      	mov	lr, sl
 8000d20:	e77f      	b.n	8000c22 <__udivmoddi4+0x1a6>
 8000d22:	4463      	add	r3, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	e74d      	b.n	8000bc4 <__udivmoddi4+0x148>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e70f      	b.n	8000b50 <__udivmoddi4+0xd4>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	e730      	b.n	8000b98 <__udivmoddi4+0x11c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <IOExpanderWrite>:
#include <stdio.h>
#include "IOExpander.h"
#include "spi.h"
#include "gpio.h"

uint8_t IOExpanderWrite(uint8_t reg, uint8_t data) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]

	uint8_t txBuffer[3];
	txBuffer[0] = (DEVICEADD & 0xFE);
 8000d4c:	2340      	movs	r3, #64	@ 0x40
 8000d4e:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = reg;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = data;
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	@ 0x80
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <IOExpanderWrite+0x60>)
 8000d5e:	f002 f89b 	bl	8002e98 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi3, txBuffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000d62:	f107 010c 	add.w	r1, r7, #12
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <IOExpanderWrite+0x64>)
 8000d6e:	f005 ff52 	bl	8006c16 <HAL_SPI_Transmit>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <IOExpanderWrite+0x4a>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <IOExpanderWrite+0x60>)
 8000d7e:	f002 f88b 	bl	8002e98 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e005      	b.n	8000d92 <IOExpanderWrite+0x56>
	}
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <IOExpanderWrite+0x60>)
 8000d8c:	f002 f884 	bl	8002e98 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	200008e4 	.word	0x200008e4

08000da4 <IOExpanderRead>:

static uint8_t IOExpanderRead(uint8_t reg, uint8_t *data) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
	uint8_t txBuffer[3];
	txBuffer[0] = (DEVICEADD | 0x01);
 8000db0:	2341      	movs	r3, #65	@ 0x41
 8000db2:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = reg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73bb      	strb	r3, [r7, #14]


	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	4817      	ldr	r0, [pc, #92]	@ (8000e20 <IOExpanderRead+0x7c>)
 8000dc2:	f002 f869 	bl	8002e98 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi3, txBuffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <IOExpanderRead+0x80>)
 8000dd2:	f005 ff20 	bl	8006c16 <HAL_SPI_Transmit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <IOExpanderRead+0x46>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <IOExpanderRead+0x7c>)
 8000de2:	f002 f859 	bl	8002e98 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e016      	b.n	8000e18 <IOExpanderRead+0x74>
	}
	if (HAL_SPI_Receive(&hspi3, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <IOExpanderRead+0x80>)
 8000df4:	f006 f885 	bl	8006f02 <HAL_SPI_Receive>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <IOExpanderRead+0x68>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <IOExpanderRead+0x7c>)
 8000e04:	f002 f848 	bl	8002e98 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e005      	b.n	8000e18 <IOExpanderRead+0x74>
	}
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2180      	movs	r1, #128	@ 0x80
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <IOExpanderRead+0x7c>)
 8000e12:	f002 f841 	bl	8002e98 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	48000400 	.word	0x48000400
 8000e24:	200008e4 	.word	0x200008e4

08000e28 <IOExpanderInit>:

uint8_t IOExpanderInit(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VU_NRST_GPIO_Port, VU_NRST_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e36:	f002 f82f 	bl	8002e98 <HAL_GPIO_WritePin>
	uint8_t config = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]

	if (IOExpanderWrite(IODIRA, config) != HAL_OK) {
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4619      	mov	r1, r3
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff ff7a 	bl	8000d3c <IOExpanderWrite>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <IOExpanderInit+0x30>
		printf("Erreur : Configuration IODIRA\n");
 8000e4e:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <IOExpanderInit+0x6c>)
 8000e50:	f00a fd32 	bl	800b8b8 <puts>
		return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e018      	b.n	8000e8a <IOExpanderInit+0x62>
	}

	if (IOExpanderWrite(IODIRB, config) != HAL_OK) {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff6d 	bl	8000d3c <IOExpanderWrite>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <IOExpanderInit+0x4a>
		printf("Erreur : Configuration IODIRB\n");
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <IOExpanderInit+0x70>)
 8000e6a:	f00a fd25 	bl	800b8b8 <puts>
		return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00b      	b.n	8000e8a <IOExpanderInit+0x62>
	}
	IOExpanderWrite(PortA, 0xff) ;
 8000e72:	21ff      	movs	r1, #255	@ 0xff
 8000e74:	2012      	movs	r0, #18
 8000e76:	f7ff ff61 	bl	8000d3c <IOExpanderWrite>
	IOExpanderWrite(PortB, 0xff);
 8000e7a:	21ff      	movs	r1, #255	@ 0xff
 8000e7c:	2013      	movs	r0, #19
 8000e7e:	f7ff ff5d 	bl	8000d3c <IOExpanderWrite>
	printf("Tous les GPIO configurés en mode sortie.\n");
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <IOExpanderInit+0x74>)
 8000e84:	f00a fd18 	bl	800b8b8 <puts>
	return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	0800c794 	.word	0x0800c794
 8000e98:	0800c7b4 	.word	0x0800c7b4
 8000e9c:	0800c7d4 	.word	0x0800c7d4

08000ea0 <IOExpanderGPIO_WritePin>:

uint8_t IOExpanderGPIO_WritePin(uint8_t GPIO_Port, uint8_t GPIO_Pin, uint8_t level) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	71bb      	strb	r3, [r7, #6]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	717b      	strb	r3, [r7, #5]
	uint8_t currentData;

	if (IOExpanderRead(GPIO_Port, &currentData) != HAL_OK) {
 8000eb2:	f107 020f 	add.w	r2, r7, #15
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff72 	bl	8000da4 <IOExpanderRead>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <IOExpanderGPIO_WritePin+0x2a>
		return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e022      	b.n	8000f10 <IOExpanderGPIO_WritePin+0x70>
	}

	if (level) {
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <IOExpanderGPIO_WritePin+0x48>
		currentData |= (1 << GPIO_Pin);
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e00c      	b.n	8000f02 <IOExpanderGPIO_WritePin+0x62>
	} else {
		currentData &= ~(1 << GPIO_Pin);
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2201      	movs	r2, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4013      	ands	r3, r2
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
	}

	return IOExpanderWrite(GPIO_Port, currentData);
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff17 	bl	8000d3c <IOExpanderWrite>
 8000f0e:	4603      	mov	r3, r0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <MX_DMA_Init+0x48>)
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <MX_DMA_Init+0x48>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <MX_DMA_Init+0x48>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2105      	movs	r1, #5
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f001 fb62 	bl	8002604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f40:	2010      	movs	r0, #16
 8000f42:	f001 fb7b 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2105      	movs	r1, #5
 8000f4a:	2011      	movs	r0, #17
 8000f4c:	f001 fb5a 	bl	8002604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f50:	2011      	movs	r0, #17
 8000f52:	f001 fb73 	bl	800263c <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <drv_uart1_receive>:
#include "cmsis_os.h"

extern SemaphoreHandle_t xSemaphoreShell ;

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	461a      	mov	r2, r3
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <drv_uart1_receive+0x30>)
 8000f78:	f007 f874 	bl	8008064 <HAL_UART_Receive_IT>
	xSemaphoreTake(xSemaphoreShell, portMAX_DELAY);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <drv_uart1_receive+0x34>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fe07 	bl	8009b98 <xQueueSemaphoreTake>
	return 0;	// Life's too short for error management
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000998 	.word	0x20000998
 8000f98:	200008e0 	.word	0x200008e0

08000f9c <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <drv_uart1_transmit+0x24>)
 8000fb2:	f006 ffcd 	bl	8007f50 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000998 	.word	0x20000998

08000fc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8000fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2280      	movs	r2, #128	@ 0x80
 8000fe0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200000c0 	.word	0x200000c0
 8000ff4:	20000160 	.word	0x20000160

08000ff8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_FREERTOS_Init+0x30>)
 8001000:	1d3c      	adds	r4, r7, #4
 8001002:	461d      	mov	r5, r3
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f008 fb56 	bl	80096c6 <osThreadCreate>
 800101a:	4603      	mov	r3, r0
 800101c:	4a03      	ldr	r2, [pc, #12]	@ (800102c <MX_FREERTOS_Init+0x34>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}
 8001028:	0800c80c 	.word	0x0800c80c
 800102c:	200000bc 	.word	0x200000bc

08001030 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f008 fb90 	bl	800975e <osDelay>
 800103e:	e7fb      	b.n	8001038 <StartDefaultTask+0x8>

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001056:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <MX_GPIO_Init+0xd0>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <MX_GPIO_Init+0xd0>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <MX_GPIO_Init+0xd0>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_GPIO_Init+0xd0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_GPIO_Init+0xd0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <MX_GPIO_Init+0xd0>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_GPIO_Init+0xd0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_NRST_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2121      	movs	r1, #33	@ 0x21
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f001 feeb 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <MX_GPIO_Init+0xd4>)
 80010c8:	f001 fee6 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VU_NRST_Pin|LD2_Pin;
 80010cc:	2321      	movs	r3, #33	@ 0x21
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e6:	f001 fd2d 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_GPIO_Init+0xd4>)
 8001102:	f001 fd1f 	bl	8002b44 <HAL_GPIO_Init>

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400

08001118 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_I2C2_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <MX_I2C2_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_I2C2_Init+0x74>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <MX_I2C2_Init+0x7c>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_I2C2_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_I2C2_Init+0x74>)
 8001130:	2201      	movs	r2, #1
 8001132:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_I2C2_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_I2C2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_I2C2_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_I2C2_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <MX_I2C2_Init+0x74>)
 8001154:	f001 feb8 	bl	8002ec8 <HAL_I2C_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800115e:	f000 fab9 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4809      	ldr	r0, [pc, #36]	@ (800118c <MX_I2C2_Init+0x74>)
 8001166:	f002 facd 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001170:	f000 fab0 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_I2C2_Init+0x74>)
 8001178:	f002 fb0f 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 faa7 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000360 	.word	0x20000360
 8001190:	40005800 	.word	0x40005800
 8001194:	10d19ce4 	.word	0x10d19ce4

08001198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ac      	sub	sp, #176	@ 0xb0
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2288      	movs	r2, #136	@ 0x88
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00a fc91 	bl	800bae0 <memset>
  if(i2cHandle->Instance==I2C2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <HAL_I2C_MspInit+0xb0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d13b      	bne.n	8001240 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f9c3 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011e0:	f000 fa78 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a18      	ldr	r2, [pc, #96]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	2312      	movs	r3, #18
 8001206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001216:	2304      	movs	r3, #4
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	@ (8001250 <HAL_I2C_MspInit+0xb8>)
 8001224:	f001 fc8e 	bl	8002b44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122c:	4a07      	ldr	r2, [pc, #28]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 800122e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001232:	6593      	str	r3, [r2, #88]	@ 0x58
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_I2C_MspInit+0xb4>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	37b0      	adds	r7, #176	@ 0xb0
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40005800 	.word	0x40005800
 800124c:	40021000 	.word	0x40021000
 8001250:	48000400 	.word	0x48000400

08001254 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800125a:	f001 f8db 	bl	8002414 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800125e:	f000 f871 	bl	8001344 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001262:	f000 f8c0 	bl	80013e6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001266:	f7ff feeb 	bl	8001040 <MX_GPIO_Init>
	MX_DMA_Init();
 800126a:	f7ff fe55 	bl	8000f18 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800126e:	f001 f813 	bl	8002298 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8001272:	f7ff ff51 	bl	8001118 <MX_I2C2_Init>
	MX_SAI2_Init();
 8001276:	f000 fa33 	bl	80016e0 <MX_SAI2_Init>
	MX_SPI3_Init();
 800127a:	f000 fdc3 	bl	8001e04 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	printf("============== AUTO RADIO ============\n") ;
 800127e:	4824      	ldr	r0, [pc, #144]	@ (8001310 <main+0xbc>)
 8001280:	f00a fb1a 	bl	800b8b8 <puts>
	h_shell.drv.receive = drv_uart1_receive;
 8001284:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <main+0xc0>)
 8001286:	4a24      	ldr	r2, [pc, #144]	@ (8001318 <main+0xc4>)
 8001288:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.transmit = drv_uart1_transmit;
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <main+0xc0>)
 800128e:	4a23      	ldr	r2, [pc, #140]	@ (800131c <main+0xc8>)
 8001290:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
	IOExpanderInit();
 8001294:	f7ff fdc8 	bl	8000e28 <IOExpanderInit>
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <main+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <main+0xcc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80012a6:	601a      	str	r2, [r3, #0]
	//for(int i = 0 ; i>=50 ; i++)
	//{
	//tCodec[i]=0xA0;
	//} ;
	sgtl5000_Init();
 80012a8:	f000 fb88 	bl	80019bc <sgtl5000_Init>
	/* TASK CREATION */
	xTaskCreate(vTaskShell,"TaskShell",SHELL_TASK_SIZE,NULL,2,NULL) ;
 80012ac:	2300      	movs	r3, #0
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2302      	movs	r3, #2
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ba:	491a      	ldr	r1, [pc, #104]	@ (8001324 <main+0xd0>)
 80012bc:	481a      	ldr	r0, [pc, #104]	@ (8001328 <main+0xd4>)
 80012be:	f008 fe5b 	bl	8009f78 <xTaskCreate>
	xTaskCreate(vTaskChenillard, "ChenillardTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	4917      	ldr	r1, [pc, #92]	@ (800132c <main+0xd8>)
 80012d0:	4817      	ldr	r0, [pc, #92]	@ (8001330 <main+0xdc>)
 80012d2:	f008 fe51 	bl	8009f78 <xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80012d6:	f7ff fe8f 	bl	8000ff8 <MX_FREERTOS_Init>
	Triangle(tCodec, 50,period_samples) ;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <main+0xe0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	2132      	movs	r1, #50	@ 0x32
 80012ec:	4812      	ldr	r0, [pc, #72]	@ (8001338 <main+0xe4>)
 80012ee:	f000 f94b 	bl	8001588 <Triangle>
	HAL_SAI_Receive_DMA(&hsai_BlockB2,rCodec,50) ;
 80012f2:	2232      	movs	r2, #50	@ 0x32
 80012f4:	4911      	ldr	r1, [pc, #68]	@ (800133c <main+0xe8>)
 80012f6:	4812      	ldr	r0, [pc, #72]	@ (8001340 <main+0xec>)
 80012f8:	f004 ff06 	bl	8006108 <HAL_SAI_Receive_DMA>
	HAL_SAI_Transmit_DMA(&hsai_BlockA2,tCodec,50);
 80012fc:	2232      	movs	r2, #50	@ 0x32
 80012fe:	490e      	ldr	r1, [pc, #56]	@ (8001338 <main+0xe4>)
 8001300:	4807      	ldr	r0, [pc, #28]	@ (8001320 <main+0xcc>)
 8001302:	f004 fe51 	bl	8005fa8 <HAL_SAI_Transmit_DMA>

	/* Start scheduler */
	osKernelStart();
 8001306:	f008 f9d7 	bl	80096b8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800130a:	bf00      	nop
 800130c:	e7fd      	b.n	800130a <main+0xb6>
 800130e:	bf00      	nop
 8001310:	0800c828 	.word	0x0800c828
 8001314:	200003b4 	.word	0x200003b4
 8001318:	08000f65 	.word	0x08000f65
 800131c:	08000f9d 	.word	0x08000f9d
 8001320:	20000744 	.word	0x20000744
 8001324:	0800c850 	.word	0x0800c850
 8001328:	080014a1 	.word	0x080014a1
 800132c:	0800c85c 	.word	0x0800c85c
 8001330:	080014d5 	.word	0x080014d5
 8001334:	20000032 	.word	0x20000032
 8001338:	20000000 	.word	0x20000000
 800133c:	20000710 	.word	0x20000710
 8001340:	200007c8 	.word	0x200007c8

08001344 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b096      	sub	sp, #88	@ 0x58
 8001348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2244      	movs	r2, #68	@ 0x44
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00a fbc4 	bl	800bae0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001366:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800136a:	f002 fa71 	bl	8003850 <HAL_PWREx_ControlVoltageScaling>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001374:	f000 f9ae 	bl	80016d4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001380:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	2310      	movs	r3, #16
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138a:	2302      	movs	r3, #2
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001392:	230a      	movs	r3, #10
 8001394:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001396:	2307      	movs	r3, #7
 8001398:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 faa8 	bl	80038fc <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80013b2:	f000 f98f 	bl	80016d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2303      	movs	r3, #3
 80013bc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	2104      	movs	r1, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fe70 	bl	80040b4 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80013da:	f000 f97b 	bl	80016d4 <Error_Handler>
	}
}
 80013de:	bf00      	nop
 80013e0:	3758      	adds	r7, #88	@ 0x58
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b0a2      	sub	sp, #136	@ 0x88
 80013ea:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2288      	movs	r2, #136	@ 0x88
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00a fb74 	bl	800bae0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80013fe:	2300      	movs	r3, #0
 8001400:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001402:	2302      	movs	r3, #2
 8001404:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 800140a:	230d      	movs	r3, #13
 800140c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 800140e:	2311      	movs	r3, #17
 8001410:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800141a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141e:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f89c 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 800142e:	f000 f951 	bl	80016d4 <Error_Handler>
	}
}
 8001432:	bf00      	nop
 8001434:	3788      	adds	r7, #136	@ 0x88
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int chr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 8001444:	1d39      	adds	r1, r7, #4
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	2201      	movs	r2, #1
 800144c:	4803      	ldr	r0, [pc, #12]	@ (800145c <__io_putchar+0x20>)
 800144e:	f006 fd7f 	bl	8007f50 <HAL_UART_Transmit>
	return chr;
 8001452:	687b      	ldr	r3, [r7, #4]

}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000998 	.word	0x20000998

08001460 <fonction>:

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <fonction+0x3c>)
 8001474:	2128      	movs	r1, #40	@ 0x28
 8001476:	4618      	mov	r0, r3
 8001478:	f00a fa26 	bl	800b8c8 <sniprintf>
 800147c:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	b289      	uxth	r1, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4798      	blx	r3

	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800c86c 	.word	0x0800c86c

080014a0 <vTaskShell>:

void vTaskShell(void * param)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 80014a8:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <vTaskShell+0x28>)
 80014aa:	f000 fb07 	bl	8001abc <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <vTaskShell+0x2c>)
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <vTaskShell+0x30>)
 80014b2:	2166      	movs	r1, #102	@ 0x66
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <vTaskShell+0x28>)
 80014b6:	f000 fb4d 	bl	8001b54 <shell_add>
	shell_run(&h_shell) ;
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <vTaskShell+0x28>)
 80014bc:	f000 fbf6 	bl	8001cac <shell_run>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200003b4 	.word	0x200003b4
 80014cc:	0800c88c 	.word	0x0800c88c
 80014d0:	08001461 	.word	0x08001461

080014d4 <vTaskChenillard>:

void vTaskChenillard(void *pvParameters) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	const uint32_t delayMs = 200;
 80014dc:	23c8      	movs	r3, #200	@ 0xc8
 80014de:	613b      	str	r3, [r7, #16]
	const uint8_t maxPins = 8;
 80014e0:	2308      	movs	r3, #8
 80014e2:	73fb      	strb	r3, [r7, #15]



	while (1) {
		IOExpanderWrite(0x14, 0xff);
 80014e4:	21ff      	movs	r1, #255	@ 0xff
 80014e6:	2014      	movs	r0, #20
 80014e8:	f7ff fc28 	bl	8000d3c <IOExpanderWrite>
		IOExpanderWrite(0x13, 0xff);
 80014ec:	21ff      	movs	r1, #255	@ 0xff
 80014ee:	2013      	movs	r0, #19
 80014f0:	f7ff fc24 	bl	8000d3c <IOExpanderWrite>
		for (uint8_t pin = 0; pin < maxPins; pin++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
 80014f8:	e01a      	b.n	8001530 <vTaskChenillard+0x5c>
			IOExpanderGPIO_WritePin(PortA, pin, 0);
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	2012      	movs	r0, #18
 8001502:	f7ff fccd 	bl	8000ea0 <IOExpanderGPIO_WritePin>
			vTaskDelay(pdMS_TO_TICKS(delayMs));
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <vTaskChenillard+0xb0>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	099b      	lsrs	r3, r3, #6
 8001518:	4618      	mov	r0, r3
 800151a:	f008 fe7d 	bl	800a218 <vTaskDelay>
			IOExpanderGPIO_WritePin(PortA, pin, 1);
 800151e:	7dfb      	ldrb	r3, [r7, #23]
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	2012      	movs	r0, #18
 8001526:	f7ff fcbb 	bl	8000ea0 <IOExpanderGPIO_WritePin>
		for (uint8_t pin = 0; pin < maxPins; pin++) {
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	3301      	adds	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3e0      	bcc.n	80014fa <vTaskChenillard+0x26>
		}

		for (int8_t pin = maxPins; pin >= 0; pin--) {
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	75bb      	strb	r3, [r7, #22]
 800153c:	e01d      	b.n	800157a <vTaskChenillard+0xa6>
			IOExpanderGPIO_WritePin(PortB, pin, 0);
 800153e:	7dbb      	ldrb	r3, [r7, #22]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	2013      	movs	r0, #19
 8001546:	f7ff fcab 	bl	8000ea0 <IOExpanderGPIO_WritePin>
			vTaskDelay(pdMS_TO_TICKS(delayMs));
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <vTaskChenillard+0xb0>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	099b      	lsrs	r3, r3, #6
 800155c:	4618      	mov	r0, r3
 800155e:	f008 fe5b 	bl	800a218 <vTaskDelay>
			IOExpanderGPIO_WritePin(PortB, pin, 1);
 8001562:	7dbb      	ldrb	r3, [r7, #22]
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	2013      	movs	r0, #19
 800156a:	f7ff fc99 	bl	8000ea0 <IOExpanderGPIO_WritePin>
		for (int8_t pin = maxPins; pin >= 0; pin--) {
 800156e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	75bb      	strb	r3, [r7, #22]
 800157a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dadd      	bge.n	800153e <vTaskChenillard+0x6a>
		IOExpanderWrite(0x14, 0xff);
 8001582:	e7af      	b.n	80014e4 <vTaskChenillard+0x10>
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <Triangle>:
	}
}


void Triangle(uint8_t *buffer, uint16_t sample_rate, float period_ms)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	460b      	mov	r3, r1
 8001592:	ed87 0a01 	vstr	s0, [r7, #4]
 8001596:	817b      	strh	r3, [r7, #10]
    uint16_t period_samples = (uint16_t)(sample_rate * (period_ms / 1000.0));
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffba 	bl	8000514 <__aeabi_i2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe ffc7 	bl	8000538 <__aeabi_f2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <Triangle+0x120>)
 80015b0:	f7ff f944 	bl	800083c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7ff f814 	bl	80005e8 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fa20 	bl	8000a0c <__aeabi_d2uiz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	82bb      	strh	r3, [r7, #20]
    uint16_t half_period = period_samples / 2;
 80015d0:	8abb      	ldrh	r3, [r7, #20]
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	827b      	strh	r3, [r7, #18]

    for (uint16_t i = 0; i < period_samples; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	82fb      	strh	r3, [r7, #22]
 80015da:	e056      	b.n	800168a <Triangle+0x102>
    {
        if (i < half_period)
 80015dc:	8afa      	ldrh	r2, [r7, #22]
 80015de:	8a7b      	ldrh	r3, [r7, #18]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d221      	bcs.n	8001628 <Triangle+0xa0>
        {
            buffer[i] = (uint8_t)(255.0 * ((float)i / half_period)); // Montée
 80015e4:	8afb      	ldrh	r3, [r7, #22]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ee:	8a7b      	ldrh	r3, [r7, #18]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015fc:	ee16 0a90 	vmov	r0, s13
 8001600:	f7fe ff9a 	bl	8000538 <__aeabi_f2d>
 8001604:	a326      	add	r3, pc, #152	@ (adr r3, 80016a0 <Triangle+0x118>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ffed 	bl	80005e8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	18d4      	adds	r4, r2, r3
 800161c:	f7ff f9f6 	bl	8000a0c <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	7023      	strb	r3, [r4, #0]
 8001626:	e02d      	b.n	8001684 <Triangle+0xfc>
        }
        else
        {
            buffer[i] = (uint8_t)(255.0 * (1.0 - ((float)(i - half_period) / half_period))); // Descente
 8001628:	8afa      	ldrh	r2, [r7, #22]
 800162a:	8a7b      	ldrh	r3, [r7, #18]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001644:	ee16 0a90 	vmov	r0, s13
 8001648:	f7fe ff76 	bl	8000538 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	4915      	ldr	r1, [pc, #84]	@ (80016ac <Triangle+0x124>)
 8001656:	f7fe fe0f 	bl	8000278 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a30f      	add	r3, pc, #60	@ (adr r3, 80016a0 <Triangle+0x118>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffbe 	bl	80005e8 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	8afb      	ldrh	r3, [r7, #22]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	18d4      	adds	r4, r2, r3
 800167a:	f7ff f9c7 	bl	8000a0c <__aeabi_d2uiz>
 800167e:	4603      	mov	r3, r0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < period_samples; i++)
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	3301      	adds	r3, #1
 8001688:	82fb      	strh	r3, [r7, #22]
 800168a:	8afa      	ldrh	r2, [r7, #22]
 800168c:	8abb      	ldrh	r3, [r7, #20]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3a4      	bcc.n	80015dc <Triangle+0x54>
        }
    }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	406fe000 	.word	0x406fe000
 80016a8:	408f4000 	.word	0x408f4000
 80016ac:	3ff00000 	.word	0x3ff00000

080016b0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80016c2:	f000 fec7 	bl	8002454 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40001000 	.word	0x40001000

080016d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80016e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <MX_SAI2_Init+0xb0>)
 80016e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <MX_SAI2_Init+0xb4>)
 80016e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <MX_SAI2_Init+0xb0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <MX_SAI2_Init+0xb0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <MX_SAI2_Init+0xb0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <MX_SAI2_Init+0xb0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001702:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <MX_SAI2_Init+0xb0>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_SAI2_Init+0xb0>)
 800170a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800170e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_SAI2_Init+0xb0>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <MX_SAI2_Init+0xb0>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <MX_SAI2_Init+0xb0>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_SAI2_Init+0xb0>)
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001728:	2302      	movs	r3, #2
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	4818      	ldr	r0, [pc, #96]	@ (8001790 <MX_SAI2_Init+0xb0>)
 8001730:	f004 fa30 	bl	8005b94 <HAL_SAI_InitProtocol>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 800173a:	f7ff ffcb 	bl	80016d4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001740:	4a16      	ldr	r2, [pc, #88]	@ (800179c <MX_SAI2_Init+0xbc>)
 8001742:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001746:	2203      	movs	r2, #3
 8001748:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <MX_SAI2_Init+0xb8>)
 800174c:	2201      	movs	r2, #1
 800174e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_SAI2_Init+0xb8>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <MX_SAI2_Init+0xb8>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <MX_SAI2_Init+0xb8>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001774:	2302      	movs	r3, #2
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_SAI2_Init+0xb8>)
 800177c:	f004 fa0a 	bl	8005b94 <HAL_SAI_InitProtocol>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001786:	f7ff ffa5 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000744 	.word	0x20000744
 8001794:	40015804 	.word	0x40015804
 8001798:	200007c8 	.word	0x200007c8
 800179c:	40015824 	.word	0x40015824

080017a0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a64      	ldr	r2, [pc, #400]	@ (8001940 <HAL_SAI_MspInit+0x1a0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d15e      	bne.n	8001870 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80017b2:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d113      	bne.n	80017e2 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80017ba:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	4a62      	ldr	r2, [pc, #392]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 80017c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017c6:	4b60      	ldr	r3, [pc, #384]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	204b      	movs	r0, #75	@ 0x4b
 80017d8:	f000 ff14 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80017dc:	204b      	movs	r0, #75	@ 0x4b
 80017de:	f000 ff2d 	bl	800263c <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 80017e2:	4b58      	ldr	r3, [pc, #352]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a56      	ldr	r2, [pc, #344]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 80017ea:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = I2S_LRCLK_Pin|I2S_SCLK_Pin|SYS_MCLK_Pin|I2S_DIN_Pin;
 80017ec:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80017fe:	230d      	movs	r3, #13
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4850      	ldr	r0, [pc, #320]	@ (800194c <HAL_SAI_MspInit+0x1ac>)
 800180a:	f001 f99b 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001810:	4a50      	ldr	r2, [pc, #320]	@ (8001954 <HAL_SAI_MspInit+0x1b4>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001814:	4b4e      	ldr	r3, [pc, #312]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001816:	2201      	movs	r2, #1
 8001818:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181a:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800181c:	2210      	movs	r2, #16
 800181e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b4b      	ldr	r3, [pc, #300]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182c:	4b48      	ldr	r3, [pc, #288]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800182e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001832:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001834:	4b46      	ldr	r3, [pc, #280]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800183a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800183c:	4b44      	ldr	r3, [pc, #272]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800183e:	2220      	movs	r2, #32
 8001840:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b43      	ldr	r3, [pc, #268]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001848:	4841      	ldr	r0, [pc, #260]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800184a:	f000 ff05 	bl	8002658 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001854:	f7ff ff3e 	bl	80016d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3d      	ldr	r2, [pc, #244]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800185c:	671a      	str	r2, [r3, #112]	@ 0x70
 800185e:	4a3c      	ldr	r2, [pc, #240]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3a      	ldr	r2, [pc, #232]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 8001868:	66da      	str	r2, [r3, #108]	@ 0x6c
 800186a:	4a39      	ldr	r2, [pc, #228]	@ (8001950 <HAL_SAI_MspInit+0x1b0>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a38      	ldr	r2, [pc, #224]	@ (8001958 <HAL_SAI_MspInit+0x1b8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d15e      	bne.n	8001938 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800187a:	4b32      	ldr	r3, [pc, #200]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d113      	bne.n	80018aa <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	4a30      	ldr	r2, [pc, #192]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800188c:	6613      	str	r3, [r2, #96]	@ 0x60
 800188e:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <HAL_SAI_MspInit+0x1a8>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	204b      	movs	r0, #75	@ 0x4b
 80018a0:	f000 feb0 	bl	8002604 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80018a4:	204b      	movs	r0, #75	@ 0x4b
 80018a6:	f000 fec9 	bl	800263c <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 80018aa:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <HAL_SAI_MspInit+0x1a4>)
 80018b2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = I2S_DOUT_Pin;
 80018b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80018c6:	230d      	movs	r3, #13
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2S_DOUT_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4822      	ldr	r0, [pc, #136]	@ (800195c <HAL_SAI_MspInit+0x1bc>)
 80018d2:	f001 f937 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018d8:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <HAL_SAI_MspInit+0x1c4>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018de:	2201      	movs	r2, #1
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 80018fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001902:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001906:	2220      	movs	r2, #32
 8001908:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001912:	f000 fea1 	bl	8002658 <HAL_DMA_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 800191c:	f7ff feda 	bl	80016d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001924:	671a      	str	r2, [r3, #112]	@ 0x70
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001930:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001932:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	@ 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40015804 	.word	0x40015804
 8001944:	200008dc 	.word	0x200008dc
 8001948:	40021000 	.word	0x40021000
 800194c:	48000400 	.word	0x48000400
 8001950:	2000084c 	.word	0x2000084c
 8001954:	4002006c 	.word	0x4002006c
 8001958:	40015824 	.word	0x40015824
 800195c:	48000800 	.word	0x48000800
 8001960:	20000894 	.word	0x20000894
 8001964:	40020080 	.word	0x40020080

08001968 <writeRegister>:
#include "sgtl5000.h"
#include "i2c.h"


static uint8_t writeRegister(uint16_t reg, uint16_t data)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af04      	add	r7, sp, #16
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[2];
    buffer[0] = (data >> 8) & 0xFF;
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Mem_Write(&hi2c2, SGTL_ADESSE, reg, I2C_MEMADD_SIZE_16BIT, buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2302      	movs	r3, #2
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	2114      	movs	r1, #20
 800199e:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <writeRegister+0x50>)
 80019a0:	f001 fb2e 	bl	8003000 <HAL_I2C_Mem_Write>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <writeRegister+0x46>
    {
        return 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <writeRegister+0x48>
    }
    return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000360 	.word	0x20000360

080019bc <sgtl5000_Init>:
	usData = usData | usSetValue;
	writeRegister(usRegister, usData);
}

void sgtl5000_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	    writeRegister(CHIP_ANA_POWER, 0x6AFF);
 80019c0:	f646 21ff 	movw	r1, #27391	@ 0x6aff
 80019c4:	2030      	movs	r0, #48	@ 0x30
 80019c6:	f7ff ffcf 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_LINREG_CTRL, 0x006C);
 80019ca:	216c      	movs	r1, #108	@ 0x6c
 80019cc:	2026      	movs	r0, #38	@ 0x26
 80019ce:	f7ff ffcb 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_REF_CTRL, 0x01FF);
 80019d2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80019d6:	2028      	movs	r0, #40	@ 0x28
 80019d8:	f7ff ffc6 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_LINE_OUT_CTRL, 0x031E);
 80019dc:	f240 311e 	movw	r1, #798	@ 0x31e
 80019e0:	202c      	movs	r0, #44	@ 0x2c
 80019e2:	f7ff ffc1 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_SHORT_CTRL, 0x1106);
 80019e6:	f241 1106 	movw	r1, #4358	@ 0x1106
 80019ea:	203c      	movs	r0, #60	@ 0x3c
 80019ec:	f7ff ffbc 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_ANA_CTRL, 0x0004);
 80019f0:	2104      	movs	r1, #4
 80019f2:	2024      	movs	r0, #36	@ 0x24
 80019f4:	f7ff ffb8 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_DIG_POWER, 0x0073);
 80019f8:	2173      	movs	r1, #115	@ 0x73
 80019fa:	2002      	movs	r0, #2
 80019fc:	f7ff ffb4 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_LINE_OUT_VOL, 0x1f1f);
 8001a00:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8001a04:	202e      	movs	r0, #46	@ 0x2e
 8001a06:	f7ff ffaf 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_CLK_CTRL, 0x0004);
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	2004      	movs	r0, #4
 8001a0e:	f7ff ffab 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_I2S_CTRL, 0x0130);
 8001a12:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff ffa6 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_ADCDAC_CTRL, 0x0000);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200e      	movs	r0, #14
 8001a20:	f7ff ffa2 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_DAC_VOL, 0x3C3C);
 8001a24:	f643 413c 	movw	r1, #15420	@ 0x3c3c
 8001a28:	2010      	movs	r0, #16
 8001a2a:	f7ff ff9d 	bl	8001968 <writeRegister>
	    writeRegister(CHIP_SSS_CTRL , 0x0151);
 8001a2e:	f240 1151 	movw	r1, #337	@ 0x151
 8001a32:	200a      	movs	r0, #10
 8001a34:	f7ff ff98 	bl	8001968 <writeRegister>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <sh_help>:
#include "cmsis_os.h"
#include "usart.h"

SemaphoreHandle_t xSemaphoreShell = NULL;

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e029      	b.n	8001aa2 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461c      	mov	r4, r3
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	330c      	adds	r3, #12
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <sh_help+0x7c>)
 8001a80:	2128      	movs	r1, #40	@ 0x28
 8001a82:	f009 ff21 	bl	800b8c8 <sniprintf>
 8001a86:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	b289      	uxth	r1, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbd0      	blt.n	8001a4e <sh_help+0x12>
	}

	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0800c8a4 	.word	0x0800c8a4

08001abc <shell_init>:

void shell_init(h_shell_t * h_shell)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	int size = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <shell_init+0x84>)
 8001ad6:	2128      	movs	r1, #40	@ 0x28
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f009 fef5 	bl	800b8c8 <sniprintf>
 8001ade:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	b289      	uxth	r1, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <shell_init+0x88>)
 8001afc:	2128      	movs	r1, #40	@ 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f009 fee2 	bl	800b8c8 <sniprintf>
 8001b04:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	b289      	uxth	r1, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4798      	blx	r3
	xSemaphoreShell = xSemaphoreCreateBinary();
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f007 ff50 	bl	80099c4 <xQueueGenericCreate>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <shell_init+0x8c>)
 8001b28:	6013      	str	r3, [r2, #0]
	shell_add(h_shell, 'h', sh_help, "Help");
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <shell_init+0x90>)
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <shell_init+0x94>)
 8001b2e:	2168      	movs	r1, #104	@ 0x68
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f80f 	bl	8001b54 <shell_add>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	0800c8b0 	.word	0x0800c8b0
 8001b44:	0800c8d8 	.word	0x0800c8d8
 8001b48:	200008e0 	.word	0x200008e0
 8001b4c:	0800c8fc 	.word	0x0800c8fc
 8001b50:	08001a3d 	.word	0x08001a3d

08001b54 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	460b      	mov	r3, r1
 8001b62:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b6a:	dc27      	bgt.n	8001bbc <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	7afa      	ldrb	r2, [r7, #11]
 8001b80:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3308      	adds	r3, #8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	330c      	adds	r3, #12
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
		return 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e001      	b.n	8001bc0 <shell_add+0x6c>
	}

	return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b090      	sub	sp, #64	@ 0x40
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001be2:	e041      	b.n	8001c68 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d131      	bne.n	8001c62 <shell_exec+0x96>
			argc = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c0a:	e013      	b.n	8001c34 <shell_exec+0x68>
				if(*p == ' ') {
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d10c      	bne.n	8001c2e <shell_exec+0x62>
					*p = '\0';
 8001c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001c20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c22:	3201      	adds	r2, #1
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3340      	adds	r3, #64	@ 0x40
 8001c28:	443b      	add	r3, r7
 8001c2a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	3301      	adds	r3, #1
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <shell_exec+0x76>
 8001c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	dde4      	ble.n	8001c0c <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3308      	adds	r3, #8
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	e01d      	b.n	8001c9e <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c64:	3301      	adds	r3, #1
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbb8      	blt.n	8001be4 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <shell_exec+0xdc>)
 8001c7e:	2128      	movs	r1, #40	@ 0x28
 8001c80:	f009 fe22 	bl	800b8c8 <sniprintf>
 8001c84:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c94:	b289      	uxth	r1, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4798      	blx	r3
	return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3740      	adds	r7, #64	@ 0x40
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	0800c904 	.word	0x0800c904

08001cac <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = " Autoradio > ";

int shell_run(h_shell_t * h_shell) 
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, sizeof(prompt));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001cc2:	210e      	movs	r1, #14
 8001cc4:	483a      	ldr	r0, [pc, #232]	@ (8001db0 <shell_run+0x104>)
 8001cc6:	4798      	blx	r3
		reading = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]

		while(reading) {
 8001ccc:	e064      	b.n	8001d98 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8001cd4:	f107 020b 	add.w	r2, r7, #11
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4798      	blx	r3
			int size;

			switch (c) {
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d036      	beq.n	8001d52 <shell_run+0xa6>
 8001ce4:	2b0d      	cmp	r3, #13
 8001ce6:	d141      	bne.n	8001d6c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001cee:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <shell_run+0x108>)
 8001cf0:	2128      	movs	r1, #40	@ 0x28
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 fde8 	bl	800b8c8 <sniprintf>
 8001cf8:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	b289      	uxth	r1, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	613a      	str	r2, [r7, #16]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001d2a:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <shell_run+0x10c>)
 8001d2c:	2128      	movs	r1, #40	@ 0x28
 8001d2e:	f009 fdcb 	bl	800b8c8 <sniprintf>
 8001d32:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	b289      	uxth	r1, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4798      	blx	r3
				reading = 0;        //exit read loop
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
				break;
 8001d50:	e022      	b.n	8001d98 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dd1e      	ble.n	8001d96 <shell_run+0xea>
					pos--;          //remove it in buffer
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001d64:	2103      	movs	r1, #3
 8001d66:	4815      	ldr	r0, [pc, #84]	@ (8001dbc <shell_run+0x110>)
 8001d68:	4798      	blx	r3
				}
				break;
 8001d6a:	e014      	b.n	8001d96 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b27      	cmp	r3, #39	@ 0x27
 8001d70:	dc12      	bgt.n	8001d98 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001d78:	f107 020b 	add.w	r2, r7, #11
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	613a      	str	r2, [r7, #16]
 8001d88:	7af9      	ldrb	r1, [r7, #11]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	460a      	mov	r2, r1
 8001d90:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001d94:	e000      	b.n	8001d98 <shell_run+0xec>
				break;
 8001d96:	bf00      	nop
		while(reading) {
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d197      	bne.n	8001cce <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff10 	bl	8001bcc <shell_exec>
		h_shell->drv.transmit(prompt, sizeof(prompt));
 8001dac:	e786      	b.n	8001cbc <shell_run+0x10>
 8001dae:	bf00      	nop
 8001db0:	0800c934 	.word	0x0800c934
 8001db4:	0800c91c 	.word	0x0800c91c
 8001db8:	0800c920 	.word	0x0800c920
 8001dbc:	0800c930 	.word	0x0800c930

08001dc0 <HAL_UART_RxCpltCallback>:
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)

{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xSemaphoreShell, &xHigherPriorityTaskWoken);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_UART_RxCpltCallback+0x3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f007 fe4e 	bl	8009a78 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_UART_RxCpltCallback+0x32>
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <HAL_UART_RxCpltCallback+0x40>)
 8001de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	f3bf 8f6f 	isb	sy
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200008e0 	.word	0x200008e0
 8001e00:	e000ed04 	.word	0xe000ed04

08001e04 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <MX_SPI3_Init+0x78>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e1e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e52:	2207      	movs	r2, #7
 8001e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e5e:	2208      	movs	r2, #8
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_SPI3_Init+0x74>)
 8001e64:	f004 fe34 	bl	8006ad0 <HAL_SPI_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e6e:	f7ff fc31 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200008e4 	.word	0x200008e4
 8001e7c:	40003c00 	.word	0x40003c00

08001e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <HAL_SPI_MspInit+0xb4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d144      	bne.n	8001f2c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	4a24      	ldr	r2, [pc, #144]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eae:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_SPI_MspInit+0xb8>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8001eea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001efc:	2306      	movs	r3, #6
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <HAL_SPI_MspInit+0xbc>)
 8001f08:	f000 fe1c 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <HAL_SPI_MspInit+0xc0>)
 8001f28:	f000 fe0c 	bl	8002b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40003c00 	.word	0x40003c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	48000400 	.word	0x48000400

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	f06f 0001 	mvn.w	r0, #1
 8001f82:	f000 fb3f 	bl	8002604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000

08001f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	@ 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa2:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fba:	f107 0210 	add.w	r2, r7, #16
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fa39 	bl	800443c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd4:	f002 fa06 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fda:	e004      	b.n	8001fe6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fdc:	f002 fa02 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe8:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <HAL_InitTick+0xe4>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	@ (800207c <HAL_InitTick+0xe8>)
 8001ff6:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_InitTick+0xec>)
 8001ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_InitTick+0xe8>)
 8001ffc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002000:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002002:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <HAL_InitTick+0xe8>)
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_InitTick+0xe8>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_InitTick+0xe8>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_InitTick+0xe8>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800201a:	4818      	ldr	r0, [pc, #96]	@ (800207c <HAL_InitTick+0xe8>)
 800201c:	f005 fc84 	bl	8007928 <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002026:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11b      	bne.n	8002066 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800202e:	4813      	ldr	r0, [pc, #76]	@ (800207c <HAL_InitTick+0xe8>)
 8002030:	f005 fcdc 	bl	80079ec <HAL_TIM_Base_Start_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800203a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800203e:	2b00      	cmp	r3, #0
 8002040:	d111      	bne.n	8002066 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002042:	2036      	movs	r0, #54	@ 0x36
 8002044:	f000 fafa 	bl	800263c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d808      	bhi.n	8002060 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800204e:	2200      	movs	r2, #0
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	2036      	movs	r0, #54	@ 0x36
 8002054:	f000 fad6 	bl	8002604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_InitTick+0xf0>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e002      	b.n	8002066 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002066:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800206a:	4618      	mov	r0, r3
 800206c:	3738      	adds	r7, #56	@ 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	431bde83 	.word	0x431bde83
 800207c:	20000948 	.word	0x20000948
 8002080:	40001000 	.word	0x40001000
 8002084:	20000038 	.word	0x20000038

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <DMA1_Channel6_IRQHandler+0x10>)
 80020c6:	f000 fc5e 	bl	8002986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000084c 	.word	0x2000084c

080020d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA1_Channel7_IRQHandler+0x10>)
 80020da:	f000 fc54 	bl	8002986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000894 	.word	0x20000894

080020e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <USART2_IRQHandler+0x10>)
 80020ee:	f006 f805 	bl	80080fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000998 	.word	0x20000998

080020fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <TIM6_DAC_IRQHandler+0x10>)
 8002102:	f005 fce3 	bl	8007acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000948 	.word	0x20000948

08002110 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <SAI2_IRQHandler+0x14>)
 8002116:	f004 f885 	bl	8006224 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800211a:	4803      	ldr	r0, [pc, #12]	@ (8002128 <SAI2_IRQHandler+0x18>)
 800211c:	f004 f882 	bl	8006224 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000744 	.word	0x20000744
 8002128:	200007c8 	.word	0x200007c8

0800212c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
  }

  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f95b 	bl	800143c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
  }
  return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c6:	605a      	str	r2, [r3, #4]
  return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_isatty>:

int _isatty(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f009 fcf6 	bl	800bc28 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	@ (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20018000 	.word	0x20018000
 8002268:	00000400 	.word	0x00000400
 800226c:	20000994 	.word	0x20000994
 8002270:	20001880 	.word	0x20001880

08002274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 800229e:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <MX_USART2_UART_Init+0x5c>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_USART2_UART_Init+0x58>)
 80022dc:	f005 fdea 	bl	8007eb4 <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022e6:	f7ff f9f5 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000998 	.word	0x20000998
 80022f4:	40004400 	.word	0x40004400

080022f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0ac      	sub	sp, #176	@ 0xb0
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2288      	movs	r2, #136	@ 0x88
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f009 fbe1 	bl	800bae0 <memset>
  if(uartHandle->Instance==USART2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <HAL_UART_MspInit+0xc0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d143      	bne.n	80023b0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002328:	2302      	movs	r3, #2
 800232a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800232c:	2300      	movs	r3, #0
 800232e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4618      	mov	r0, r3
 8002336:	f002 f913 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002340:	f7ff f9c8 	bl	80016d4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002344:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	4a1c      	ldr	r2, [pc, #112]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 800234a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800234e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002360:	4a16      	ldr	r2, [pc, #88]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HAL_UART_MspInit+0xc4>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002374:	230c      	movs	r3, #12
 8002376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238c:	2307      	movs	r3, #7
 800238e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239c:	f000 fbd2 	bl	8002b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2105      	movs	r1, #5
 80023a4:	2026      	movs	r0, #38	@ 0x26
 80023a6:	f000 f92d 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023aa:	2026      	movs	r0, #38	@ 0x26
 80023ac:	f000 f946 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b0:	bf00      	nop
 80023b2:	37b0      	adds	r7, #176	@ 0xb0
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40004400 	.word	0x40004400
 80023bc:	40021000 	.word	0x40021000

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c4:	f7ff ff56 	bl	8002274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	@ (800240c <LoopForever+0x16>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f009 fc21 	bl	800bc34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7fe ff2f 	bl	8001254 <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002404:	0800c9d0 	.word	0x0800c9d0
  ldr r2, =_sbss
 8002408:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800240c:	2000187c 	.word	0x2000187c

08002410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC1_2_IRQHandler>
	...

08002414 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_Init+0x3c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a0b      	ldr	r2, [pc, #44]	@ (8002450 <HAL_Init+0x3c>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002428:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242a:	2003      	movs	r0, #3
 800242c:	f000 f8df 	bl	80025ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fdaf 	bl	8001f94 <HAL_InitTick>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	e001      	b.n	8002446 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002442:	f7ff fd7f 	bl	8001f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002446:	79fb      	ldrb	r3, [r7, #7]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000003c 	.word	0x2000003c
 8002478:	20000a20 	.word	0x20000a20

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000a20 	.word	0x20000a20

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	@ (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff4c 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002616:	f7ff ff61 	bl	80024dc <__NVIC_GetPriorityGrouping>
 800261a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f7ff ffb1 	bl	8002588 <NVIC_EncodePriority>
 8002626:	4602      	mov	r2, r0
 8002628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff80 	bl	8002534 <__NVIC_SetPriority>
}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff54 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e098      	b.n	800279c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b4d      	ldr	r3, [pc, #308]	@ (80027a8 <HAL_DMA_Init+0x150>)
 8002672:	429a      	cmp	r2, r3
 8002674:	d80f      	bhi.n	8002696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	4b4b      	ldr	r3, [pc, #300]	@ (80027ac <HAL_DMA_Init+0x154>)
 800267e:	4413      	add	r3, r2
 8002680:	4a4b      	ldr	r2, [pc, #300]	@ (80027b0 <HAL_DMA_Init+0x158>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_DMA_Init+0x15c>)
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40
 8002694:	e00e      	b.n	80026b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <HAL_DMA_Init+0x160>)
 800269e:	4413      	add	r3, r2
 80026a0:	4a43      	ldr	r2, [pc, #268]	@ (80027b0 <HAL_DMA_Init+0x158>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	009a      	lsls	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a42      	ldr	r2, [pc, #264]	@ (80027bc <HAL_DMA_Init+0x164>)
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270e:	d039      	beq.n	8002784 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	4a27      	ldr	r2, [pc, #156]	@ (80027b4 <HAL_DMA_Init+0x15c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11a      	bne.n	8002750 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800271a:	4b29      	ldr	r3, [pc, #164]	@ (80027c0 <HAL_DMA_Init+0x168>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f003 031c 	and.w	r3, r3, #28
 8002726:	210f      	movs	r1, #15
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	4924      	ldr	r1, [pc, #144]	@ (80027c0 <HAL_DMA_Init+0x168>)
 8002730:	4013      	ands	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002734:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <HAL_DMA_Init+0x168>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002740:	f003 031c 	and.w	r3, r3, #28
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	491d      	ldr	r1, [pc, #116]	@ (80027c0 <HAL_DMA_Init+0x168>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
 800274e:	e019      	b.n	8002784 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002750:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_DMA_Init+0x16c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	f003 031c 	and.w	r3, r3, #28
 800275c:	210f      	movs	r1, #15
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4917      	ldr	r1, [pc, #92]	@ (80027c4 <HAL_DMA_Init+0x16c>)
 8002766:	4013      	ands	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_DMA_Init+0x16c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f003 031c 	and.w	r3, r3, #28
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	4911      	ldr	r1, [pc, #68]	@ (80027c4 <HAL_DMA_Init+0x16c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40020407 	.word	0x40020407
 80027ac:	bffdfff8 	.word	0xbffdfff8
 80027b0:	cccccccd 	.word	0xcccccccd
 80027b4:	40020000 	.word	0x40020000
 80027b8:	bffdfbf8 	.word	0xbffdfbf8
 80027bc:	40020400 	.word	0x40020400
 80027c0:	400200a8 	.word	0x400200a8
 80027c4:	400204a8 	.word	0x400204a8

080027c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Start_IT+0x20>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e04b      	b.n	8002880 <HAL_DMA_Start_IT+0xb8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d13a      	bne.n	8002872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f95f 	bl	8002ae4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 020e 	orr.w	r2, r2, #14
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 020a 	orr.w	r2, r2, #10
 800285e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e005      	b.n	800287e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 020e 	bic.w	r2, r2, #14
 80028c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 021c 	and.w	r2, r3, #28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d005      	beq.n	8002928 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2204      	movs	r2, #4
 8002920:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e029      	b.n	800297c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 020e 	bic.w	r2, r2, #14
 8002936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	f003 021c 	and.w	r2, r3, #28
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
    }
  }
  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f003 031c 	and.w	r3, r3, #28
 80029a6:	2204      	movs	r2, #4
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d026      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x7a>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0204 	bic.w	r2, r2, #4
 80029d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f003 021c 	and.w	r2, r3, #28
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2104      	movs	r1, #4
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d071      	beq.n	8002ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029fe:	e06c      	b.n	8002ada <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	f003 031c 	and.w	r3, r3, #28
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02e      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xec>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d029      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 020a 	bic.w	r2, r2, #10
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	f003 021c 	and.w	r2, r3, #28
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	2102      	movs	r1, #2
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d038      	beq.n	8002ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a70:	e033      	b.n	8002ada <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f003 031c 	and.w	r3, r3, #28
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d02a      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d025      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f003 021c 	and.w	r2, r3, #28
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
}
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f003 021c 	and.w	r2, r3, #28
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	e17f      	b.n	8002e54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8171 	beq.w	8002e4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d005      	beq.n	8002b84 <HAL_GPIO_Init+0x40>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d130      	bne.n	8002be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bba:	2201      	movs	r2, #1
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0201 	and.w	r2, r3, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d118      	bne.n	8002c24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80ac 	beq.w	8002e4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e74 <HAL_GPIO_Init+0x330>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <HAL_GPIO_Init+0x330>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d02:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <HAL_GPIO_Init+0x330>)
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <HAL_GPIO_Init+0x334>)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_Init+0x242>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e7c <HAL_GPIO_Init+0x338>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_Init+0x23e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4e      	ldr	r2, [pc, #312]	@ (8002e80 <HAL_GPIO_Init+0x33c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x23a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e84 <HAL_GPIO_Init+0x340>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x236>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4c      	ldr	r2, [pc, #304]	@ (8002e88 <HAL_GPIO_Init+0x344>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x232>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e8c <HAL_GPIO_Init+0x348>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x22e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4a      	ldr	r2, [pc, #296]	@ (8002e90 <HAL_GPIO_Init+0x34c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x22a>
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	e00c      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00a      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e008      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d76:	2304      	movs	r3, #4
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e004      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x244>
 8002d86:	2300      	movs	r3, #0
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	f002 0203 	and.w	r2, r2, #3
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	4093      	lsls	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d98:	4937      	ldr	r1, [pc, #220]	@ (8002e78 <HAL_GPIO_Init+0x334>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dca:	4a32      	ldr	r2, [pc, #200]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002df4:	4a27      	ldr	r2, [pc, #156]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <HAL_GPIO_Init+0x350>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f47f ae78 	bne.w	8002b54 <HAL_GPIO_Init+0x10>
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	48000400 	.word	0x48000400
 8002e80:	48000800 	.word	0x48000800
 8002e84:	48000c00 	.word	0x48000c00
 8002e88:	48001000 	.word	0x48001000
 8002e8c:	48001400 	.word	0x48001400
 8002e90:	48001800 	.word	0x48001800
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e08d      	b.n	8002ff6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f952 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d108      	bne.n	8002f6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	e007      	b.n	8002f7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b20      	cmp	r3, #32
 8003024:	f040 80f9 	bne.w	800321a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_I2C_Mem_Write+0x34>
 800302e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ed      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_I2C_Mem_Write+0x4e>
 800304a:	2302      	movs	r3, #2
 800304c:	e0e6      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003056:	f7ff fa11 	bl	800247c <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2319      	movs	r3, #25
 8003062:	2201      	movs	r2, #1
 8003064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f955 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d1      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	@ 0x21
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a0:	88f8      	ldrh	r0, [r7, #6]
 80030a2:	893a      	ldrh	r2, [r7, #8]
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4603      	mov	r3, r0
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8b9 	bl	8003228 <I2C_RequestMemoryWrite>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0a9      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2bff      	cmp	r3, #255	@ 0xff
 80030d0:	d90e      	bls.n	80030f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	22ff      	movs	r2, #255	@ 0xff
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	2300      	movs	r3, #0
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fad9 	bl	80036a0 <I2C_TransferConfig>
 80030ee:	e00f      	b.n	8003110 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	2300      	movs	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fac8 	bl	80036a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f958 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e07b      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d034      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x1c8>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d130      	bne.n	80031c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	2200      	movs	r2, #0
 800316e:	2180      	movs	r1, #128	@ 0x80
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8d1 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e04d      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2bff      	cmp	r3, #255	@ 0xff
 8003188:	d90e      	bls.n	80031a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	22ff      	movs	r2, #255	@ 0xff
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	b2da      	uxtb	r2, r3
 8003196:	8979      	ldrh	r1, [r7, #10]
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fa7d 	bl	80036a0 <I2C_TransferConfig>
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa6c 	bl	80036a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d19e      	bne.n	8003110 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f93e 	bl	8003458 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e01a      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2220      	movs	r2, #32
 80031ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_I2C_Mem_Write+0x224>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	fe00e800 	.word	0xfe00e800

08003228 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <I2C_RequestMemoryWrite+0xa4>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fa25 	bl	80036a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8b5 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e02c      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	629a      	str	r2, [r3, #40]	@ 0x28
 800327a:	e015      	b.n	80032a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f89b 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e012      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2180      	movs	r1, #128	@ 0x80
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f830 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	80002000 	.word	0x80002000

080032d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d007      	beq.n	800330c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	619a      	str	r2, [r3, #24]
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003328:	e03b      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8d6 	bl	80034e0 <I2C_IsErrorOccurred>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d02d      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7ff f899 	bl	800247c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d122      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	429a      	cmp	r2, r3
 8003378:	d113      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d0b4      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d6:	e033      	b.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f87f 	bl	80034e0 <I2C_IsErrorOccurred>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e031      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d025      	beq.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7ff f842 	bl	800247c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11a      	bne.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d013      	beq.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d1c4      	bne.n	80033d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003464:	e02f      	b.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f838 	bl	80034e0 <I2C_IsErrorOccurred>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e02d      	b.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fe ffff 	bl	800247c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11a      	bne.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d013      	beq.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d1c8      	bne.n	8003466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d068      	beq.n	80035de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003514:	e049      	b.n	80035aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d045      	beq.n	80035aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe ffad 	bl	800247c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_IsErrorOccurred+0x54>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d13a      	bne.n	80035aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003556:	d121      	bne.n	800359c <I2C_IsErrorOccurred+0xbc>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355e:	d01d      	beq.n	800359c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b20      	cmp	r3, #32
 8003564:	d01a      	beq.n	800359c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003576:	f7fe ff81 	bl	800247c <HAL_GetTick>
 800357a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357c:	e00e      	b.n	800359c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800357e:	f7fe ff7d 	bl	800247c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b19      	cmp	r3, #25
 800358a:	d907      	bls.n	800359c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800359a:	e006      	b.n	80035aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d1e9      	bne.n	800357e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d003      	beq.n	80035c0 <I2C_IsErrorOccurred+0xe0>
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0aa      	beq.n	8003516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2220      	movs	r2, #32
 80035ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800364c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01c      	beq.n	800368e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff fe3b 	bl	80032d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <I2C_IsErrorOccurred+0x1bc>)
 8003666:	400b      	ands	r3, r1
 8003668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800368e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003692:	4618      	mov	r0, r3
 8003694:	3728      	adds	r7, #40	@ 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	4613      	mov	r3, r2
 80036b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b8:	7a7b      	ldrb	r3, [r7, #9]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	0d5b      	lsrs	r3, r3, #21
 80036da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <I2C_TransferConfig+0x60>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	43db      	mvns	r3, r3
 80036e4:	ea02 0103 	and.w	r1, r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	03ff63ff 	.word	0x03ff63ff

08003704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d138      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003724:	2302      	movs	r3, #2
 8003726:	e032      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	@ 0x24
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d139      	bne.n	8003824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e033      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <HAL_PWREx_GetVoltageRange+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40007000 	.word	0x40007000

08003850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385e:	d130      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003860:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	d038      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003876:	4a1e      	ldr	r2, [pc, #120]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800387e:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2232      	movs	r2, #50	@ 0x32
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	4a1b      	ldr	r2, [pc, #108]	@ (80038f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	e002      	b.n	800389c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a8:	d102      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b0:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d110      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ce:	d007      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d8:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000
 80038f4:	20000034 	.word	0x20000034
 80038f8:	431bde83 	.word	0x431bde83

080038fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e3ca      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b97      	ldr	r3, [pc, #604]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4b94      	ldr	r3, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80e4 	beq.w	8003af8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x4a>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f040 808b 	bne.w	8003a54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 8087 	bne.w	8003a54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003946:	4b89      	ldr	r3, [pc, #548]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e3a2      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	4b82      	ldr	r3, [pc, #520]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_RCC_OscConfig+0x7c>
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003976:	e005      	b.n	8003984 <HAL_RCC_OscConfig+0x88>
 8003978:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003984:	4293      	cmp	r3, r2
 8003986:	d223      	bcs.n	80039d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fd87 	bl	80044a0 <RCC_SetFlashLatencyFromMSIRange>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e383      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a72      	ldr	r2, [pc, #456]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	496d      	ldr	r1, [pc, #436]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b6c      	ldr	r3, [pc, #432]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4968      	ldr	r1, [pc, #416]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e025      	b.n	8003a1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d0:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a65      	ldr	r2, [pc, #404]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b63      	ldr	r3, [pc, #396]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4960      	ldr	r1, [pc, #384]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	495b      	ldr	r1, [pc, #364]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fd47 	bl	80044a0 <RCC_SetFlashLatencyFromMSIRange>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e343      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a1c:	f000 fc4a 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b52      	ldr	r3, [pc, #328]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	4950      	ldr	r1, [pc, #320]	@ (8003b70 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	4a4e      	ldr	r2, [pc, #312]	@ (8003b74 <HAL_RCC_OscConfig+0x278>)
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe faa7 	bl	8001f94 <HAL_InitTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d052      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	e327      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d032      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a5c:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a42      	ldr	r2, [pc, #264]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fd08 	bl	800247c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a70:	f7fe fd04 	bl	800247c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e310      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a82:	4b3a      	ldr	r3, [pc, #232]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a36      	ldr	r2, [pc, #216]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4931      	ldr	r1, [pc, #196]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aac:	4b2f      	ldr	r3, [pc, #188]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	492c      	ldr	r1, [pc, #176]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	e01a      	b.n	8003af8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fcd5 	bl	800247c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad6:	f7fe fcd1 	bl	800247c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e2dd      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae8:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1da>
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d074      	beq.n	8003bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x21a>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d10e      	bne.n	8003b2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d064      	beq.n	8003bec <HAL_RCC_OscConfig+0x2f0>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d160      	bne.n	8003bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e2ba      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x24a>
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e026      	b.n	8003b94 <HAL_RCC_OscConfig+0x298>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4e:	d115      	bne.n	8003b7c <HAL_RCC_OscConfig+0x280>
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e014      	b.n	8003b94 <HAL_RCC_OscConfig+0x298>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	0800c944 	.word	0x0800c944
 8003b74:	20000034 	.word	0x20000034
 8003b78:	20000038 	.word	0x20000038
 8003b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a9f      	ldr	r2, [pc, #636]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b9d      	ldr	r3, [pc, #628]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a9c      	ldr	r2, [pc, #624]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fc6e 	bl	800247c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fc6a 	bl	800247c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	@ 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e276      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	4b92      	ldr	r3, [pc, #584]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2a8>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fc5a 	bl	800247c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fc56 	bl	800247c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e262      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2d0>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d060      	beq.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_OscConfig+0x310>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d116      	bne.n	8003c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_OscConfig+0x328>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e23f      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b76      	ldr	r3, [pc, #472]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4973      	ldr	r1, [pc, #460]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c38:	e040      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d023      	beq.n	8003c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c42:	4b6f      	ldr	r3, [pc, #444]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fc15 	bl	800247c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe fc11 	bl	800247c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e21d      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	4b65      	ldr	r3, [pc, #404]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b62      	ldr	r3, [pc, #392]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	495f      	ldr	r1, [pc, #380]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	e018      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fbf1 	bl	800247c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fbed 	bl	800247c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1f9      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	4b53      	ldr	r3, [pc, #332]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fbcc 	bl	800247c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fbc8 	bl	800247c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1d4      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfa:	4b41      	ldr	r3, [pc, #260]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x3ec>
 8003d08:	e01b      	b.n	8003d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d10:	4a3b      	ldr	r2, [pc, #236]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fbaf 	bl	800247c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d22:	f7fe fbab 	bl	800247c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1b7      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	4b32      	ldr	r3, [pc, #200]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a6 	beq.w	8003e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d54:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6c:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d118      	bne.n	8003dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d88:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d94:	f7fe fb72 	bl	800247c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fe fb6e 	bl	800247c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e17a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4d8>
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd2:	e029      	b.n	8003e28 <HAL_RCC_OscConfig+0x52c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_OscConfig+0x50c>
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a03      	ldr	r2, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	e014      	b.n	8003e28 <HAL_RCC_OscConfig+0x52c>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	4b9c      	ldr	r3, [pc, #624]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	4a9b      	ldr	r2, [pc, #620]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e18:	4b98      	ldr	r3, [pc, #608]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	4a97      	ldr	r2, [pc, #604]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d016      	beq.n	8003e5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fb24 	bl	800247c <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e38:	f7fe fb20 	bl	800247c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e12a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ed      	beq.n	8003e38 <HAL_RCC_OscConfig+0x53c>
 8003e5c:	e015      	b.n	8003e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fb0d 	bl	800247c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fb09 	bl	800247c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e113      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e7c:	4b7f      	ldr	r3, [pc, #508]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ed      	bne.n	8003e66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	4a79      	ldr	r2, [pc, #484]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80fe 	beq.w	80040a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	f040 80d0 	bne.w	8004050 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eb0:	4b72      	ldr	r3, [pc, #456]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d130      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d127      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ef0:	2a07      	cmp	r2, #7
 8003ef2:	bf14      	ite	ne
 8003ef4:	2201      	movne	r2, #1
 8003ef6:	2200      	moveq	r2, #0
 8003ef8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d113      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d06e      	beq.n	8004004 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d069      	beq.n	8004000 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f2c:	4b53      	ldr	r3, [pc, #332]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f38:	4b50      	ldr	r3, [pc, #320]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0ad      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f48:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f54:	f7fe fa92 	bl	800247c <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe fa8e 	bl	800247c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e09a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6e:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7a:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x784>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f94:	0212      	lsls	r2, r2, #8
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f9c:	0852      	lsrs	r2, r2, #1
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0552      	lsls	r2, r2, #21
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fa8:	0852      	lsrs	r2, r2, #1
 8003faa:	3a01      	subs	r2, #1
 8003fac:	0652      	lsls	r2, r2, #25
 8003fae:	4311      	orrs	r1, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fb4:	0912      	lsrs	r2, r2, #4
 8003fb6:	0452      	lsls	r2, r2, #17
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	4930      	ldr	r1, [pc, #192]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd8:	f7fe fa50 	bl	800247c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fe fa4c 	bl	800247c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e058      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffe:	e050      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04f      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d148      	bne.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004010:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800401c:	4b17      	ldr	r3, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a16      	ldr	r2, [pc, #88]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004028:	f7fe fa28 	bl	800247c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe fa24 	bl	800247c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e030      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x734>
 800404e:	e028      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d023      	beq.n	800409e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a08      	ldr	r2, [pc, #32]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 800405c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fe fa0b 	bl	800247c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	e00c      	b.n	8004084 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fa07 	bl	800247c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d905      	bls.n	8004084 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e013      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
 800407c:	40021000 	.word	0x40021000
 8004080:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ec      	bne.n	800406a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4905      	ldr	r1, [pc, #20]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004096:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCC_OscConfig+0x7b4>)
 8004098:	4013      	ands	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e001      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	feeefffc 	.word	0xfeeefffc

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0e7      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b75      	ldr	r3, [pc, #468]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b72      	ldr	r3, [pc, #456]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4970      	ldr	r1, [pc, #448]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b6e      	ldr	r3, [pc, #440]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cf      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b66      	ldr	r3, [pc, #408]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004110:	429a      	cmp	r2, r3
 8004112:	d908      	bls.n	8004126 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4960      	ldr	r1, [pc, #384]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04c      	beq.n	80041cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b5a      	ldr	r3, [pc, #360]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d121      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0a6      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b54      	ldr	r3, [pc, #336]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d115      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e09a      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416a:	4b4e      	ldr	r3, [pc, #312]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e08e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e086      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b46      	ldr	r3, [pc, #280]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4943      	ldr	r1, [pc, #268]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fe f96e 	bl	800247c <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe f96a 	bl	800247c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b3a      	ldr	r3, [pc, #232]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d208      	bcs.n	80041fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	492b      	ldr	r1, [pc, #172]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fa:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d210      	bcs.n	800422a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 0207 	bic.w	r2, r3, #7
 8004210:	4923      	ldr	r1, [pc, #140]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e036      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4918      	ldr	r1, [pc, #96]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004254:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4910      	ldr	r1, [pc, #64]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004268:	f000 f824 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	490b      	ldr	r1, [pc, #44]	@ (80042a8 <HAL_RCC_ClockConfig+0x1f4>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <HAL_RCC_ClockConfig+0x1f8>)
 8004286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1fc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd fe81 	bl	8001f94 <HAL_InitTick>
 8004292:	4603      	mov	r3, r0
 8004294:	72fb      	strb	r3, [r7, #11]

  return status;
 8004296:	7afb      	ldrb	r3, [r7, #11]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40021000 	.word	0x40021000
 80042a8:	0800c944 	.word	0x0800c944
 80042ac:	20000034 	.word	0x20000034
 80042b0:	20000038 	.word	0x20000038

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c2:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042cc:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d121      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d11e      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e8:	4b34      	ldr	r3, [pc, #208]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f4:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e005      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004304:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004310:	4a2b      	ldr	r2, [pc, #172]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10d      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004324:	e00a      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d102      	bne.n	8004332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800432c:	4b25      	ldr	r3, [pc, #148]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e004      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d101      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004338:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800433a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d134      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004342:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d003      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0xa6>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0xac>
 8004358:	e005      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800435a:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800435c:	617b      	str	r3, [r7, #20]
      break;
 800435e:	e005      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004362:	617b      	str	r3, [r7, #20]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	617b      	str	r3, [r7, #20]
      break;
 800436a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800436c:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800437a:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fb03 f202 	mul.w	r2, r3, r2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004392:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0e5b      	lsrs	r3, r3, #25
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043ac:	69bb      	ldr	r3, [r7, #24]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	@ 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800c95c 	.word	0x0800c95c
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200

080043cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000034 	.word	0x20000034

080043e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e8:	f7ff fff0 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x28>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800c954 	.word	0x0800c954

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004414:	f7ff ffda 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0adb      	lsrs	r3, r3, #11
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0800c954 	.word	0x0800c954

0800443c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	220f      	movs	r2, #15
 800444a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <HAL_RCC_GetClockConfig+0x5c>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0203 	and.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <HAL_RCC_GetClockConfig+0x5c>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <HAL_RCC_GetClockConfig+0x5c>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_GetClockConfig+0x5c>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	08db      	lsrs	r3, r3, #3
 8004476:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800447e:	4b07      	ldr	r3, [pc, #28]	@ (800449c <HAL_RCC_GetClockConfig+0x60>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0207 	and.w	r2, r3, #7
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	40022000 	.word	0x40022000

080044a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044b8:	f7ff f9bc 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80044bc:	6178      	str	r0, [r7, #20]
 80044be:	e014      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	4a24      	ldr	r2, [pc, #144]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80044cc:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044d8:	f7ff f9ac 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80044dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f0:	d10b      	bne.n	800450a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d919      	bls.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80044fc:	d902      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044fe:	2302      	movs	r3, #2
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e013      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004504:	2301      	movs	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e010      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b80      	cmp	r3, #128	@ 0x80
 800450e:	d902      	bls.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004510:	2303      	movs	r3, #3
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e00a      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b80      	cmp	r3, #128	@ 0x80
 800451a:	d102      	bne.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451c:	2302      	movs	r3, #2
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e004      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b70      	cmp	r3, #112	@ 0x70
 8004526:	d101      	bne.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004528:	2301      	movs	r3, #1
 800452a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 0207 	bic.w	r2, r3, #7
 8004534:	4909      	ldr	r1, [pc, #36]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	40022000 	.word	0x40022000

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004568:	2300      	movs	r3, #0
 800456a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2300      	movs	r3, #0
 800456e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d041      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004580:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004584:	d02a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004586:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800458a:	d824      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800458c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004592:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004596:	d81e      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800459c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a0:	d010      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045a2:	e018      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a4:	4b86      	ldr	r3, [pc, #536]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a85      	ldr	r2, [pc, #532]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b0:	e015      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3304      	adds	r3, #4
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f829 	bl	8005610 <RCCEx_PLLSAI1_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c2:	e00c      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3320      	adds	r3, #32
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f914 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	74fb      	strb	r3, [r7, #19]
      break;
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e4:	4b76      	ldr	r3, [pc, #472]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f2:	4973      	ldr	r1, [pc, #460]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d041      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004614:	d02a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004616:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800461a:	d824      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800461c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004626:	d81e      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800462c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004630:	d010      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004632:	e018      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004634:	4b62      	ldr	r3, [pc, #392]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a61      	ldr	r2, [pc, #388]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004640:	e015      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 ffe1 	bl	8005610 <RCCEx_PLLSAI1_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004652:	e00c      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3320      	adds	r3, #32
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f001 f8cc 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	74fb      	strb	r3, [r7, #19]
      break;
 800466a:	e000      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800466c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004674:	4b52      	ldr	r3, [pc, #328]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004682:	494f      	ldr	r1, [pc, #316]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800468a:	e001      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80a0 	beq.w	80047de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046a2:	4b47      	ldr	r3, [pc, #284]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046bc:	4a40      	ldr	r2, [pc, #256]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d4:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3a      	ldr	r2, [pc, #232]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e0:	f7fd fecc 	bl	800247c <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046e6:	e009      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd fec8 	bl	800247c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d902      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	74fb      	strb	r3, [r7, #19]
        break;
 80046fa:	e005      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046fc:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ef      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d15c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800470e:	4b2c      	ldr	r3, [pc, #176]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004718:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01f      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d019      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800472c:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004738:	4b21      	ldr	r3, [pc, #132]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004748:	4b1d      	ldr	r3, [pc, #116]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a1c      	ldr	r2, [pc, #112]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fd fe87 	bl	800247c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004770:	e00b      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fd fe83 	bl	800247c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d902      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	74fb      	strb	r3, [r7, #19]
            break;
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ec      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800479e:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ae:	4904      	ldr	r1, [pc, #16]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047b6:	e009      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047cc:	7c7b      	ldrb	r3, [r7, #17]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b9e      	ldr	r3, [pc, #632]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d6:	4a9d      	ldr	r2, [pc, #628]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ea:	4b98      	ldr	r3, [pc, #608]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f023 0203 	bic.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	4994      	ldr	r1, [pc, #592]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800480c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f023 020c 	bic.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	498c      	ldr	r1, [pc, #560]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482e:	4b87      	ldr	r3, [pc, #540]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004834:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	4983      	ldr	r1, [pc, #524]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004850:	4b7e      	ldr	r3, [pc, #504]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	497b      	ldr	r1, [pc, #492]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004872:	4b76      	ldr	r3, [pc, #472]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	4972      	ldr	r1, [pc, #456]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004894:	4b6d      	ldr	r3, [pc, #436]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a2:	496a      	ldr	r1, [pc, #424]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b6:	4b65      	ldr	r3, [pc, #404]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	4961      	ldr	r1, [pc, #388]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e6:	4959      	ldr	r1, [pc, #356]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048fa:	4b54      	ldr	r3, [pc, #336]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	4950      	ldr	r1, [pc, #320]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800491c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	4948      	ldr	r1, [pc, #288]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800493e:	4b43      	ldr	r3, [pc, #268]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	493f      	ldr	r1, [pc, #252]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d028      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004960:	4b3a      	ldr	r3, [pc, #232]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004966:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496e:	4937      	ldr	r1, [pc, #220]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004980:	4b32      	ldr	r3, [pc, #200]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a31      	ldr	r2, [pc, #196]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800498a:	60d3      	str	r3, [r2, #12]
 800498c:	e011      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004996:	d10c      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	2101      	movs	r1, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fe36 	bl	8005610 <RCCEx_PLLSAI1_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d028      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049be:	4b23      	ldr	r3, [pc, #140]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	491f      	ldr	r1, [pc, #124]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049dc:	d106      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049de:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e8:	60d3      	str	r3, [r2, #12]
 80049ea:	e011      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fe07 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02b      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2a:	4908      	ldr	r1, [pc, #32]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a02      	ldr	r2, [pc, #8]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a46:	60d3      	str	r3, [r2, #12]
 8004a48:	e014      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fdd5 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d02f      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a80:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a8e:	4928      	ldr	r1, [pc, #160]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a9e:	d10d      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fdb2 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d014      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	74bb      	strb	r3, [r7, #18]
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3320      	adds	r3, #32
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fe93 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aec:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004afa:	490d      	ldr	r1, [pc, #52]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b0e:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1e:	4904      	ldr	r1, [pc, #16]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b26:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000

08004b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b46:	d13e      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004b48:	4bb2      	ldr	r3, [pc, #712]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b52:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5a:	d028      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b62:	f200 8542 	bhi.w	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b74:	d00e      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004b76:	f000 bd38 	b.w	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b7a:	4ba6      	ldr	r3, [pc, #664]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	f040 8532 	bne.w	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8e:	61fb      	str	r3, [r7, #28]
      break;
 8004b90:	f000 bd2d 	b.w	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004b94:	4b9f      	ldr	r3, [pc, #636]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	f040 8527 	bne.w	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004ba4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ba8:	61fb      	str	r3, [r7, #28]
      break;
 8004baa:	f000 bd22 	b.w	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bae:	4b99      	ldr	r3, [pc, #612]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bba:	f040 851c 	bne.w	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004bbe:	4b96      	ldr	r3, [pc, #600]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004bc0:	61fb      	str	r3, [r7, #28]
      break;
 8004bc2:	f000 bd18 	b.w	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc6:	4b93      	ldr	r3, [pc, #588]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d840      	bhi.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d003      	beq.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d020      	beq.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004be8:	e039      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004bea:	4b8a      	ldr	r3, [pc, #552]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004bf6:	4b87      	ldr	r3, [pc, #540]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004c02:	4b84      	ldr	r3, [pc, #528]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004c0e:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	4a80      	ldr	r2, [pc, #512]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c22:	e01f      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61bb      	str	r3, [r7, #24]
      break;
 8004c28:	e01c      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c36:	d102      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004c38:	4b79      	ldr	r3, [pc, #484]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c3a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c3c:	e012      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
      break;
 8004c42:	e00f      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c44:	4b73      	ldr	r3, [pc, #460]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c50:	d102      	bne.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004c52:	4b74      	ldr	r3, [pc, #464]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]
      break;
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
      break;
 8004c62:	bf00      	nop
    }

    switch(PeriphClk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c6a:	f000 80dd 	beq.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c74:	f200 84c1 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c7e:	f000 80d3 	beq.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c88:	f200 84b7 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c92:	f000 835f 	beq.w	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c9c:	f200 84ad 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca6:	f000 847e 	beq.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb0:	f200 84a3 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cba:	f000 82cd 	beq.w	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc4:	f200 8499 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cce:	f000 80ab 	beq.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd8:	f200 848f 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce2:	f000 8090 	beq.w	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cec:	f200 8485 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf6:	d07f      	beq.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	f200 847c 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d08:	f000 8403 	beq.w	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d12:	f200 8472 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1c:	f000 83af 	beq.w	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d26:	f200 8468 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d30:	f000 8379 	beq.w	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d3a:	f200 845e 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b80      	cmp	r3, #128	@ 0x80
 8004d42:	f000 8344 	beq.w	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b80      	cmp	r3, #128	@ 0x80
 8004d4a:	f200 8456 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d84b      	bhi.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 844f 	beq.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	2b1f      	cmp	r3, #31
 8004d62:	f200 844a 	bhi.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004d66:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004f55 	.word	0x08004f55
 8004d70:	08004fc3 	.word	0x08004fc3
 8004d74:	080055fb 	.word	0x080055fb
 8004d78:	08005057 	.word	0x08005057
 8004d7c:	080055fb 	.word	0x080055fb
 8004d80:	080055fb 	.word	0x080055fb
 8004d84:	080055fb 	.word	0x080055fb
 8004d88:	080050dd 	.word	0x080050dd
 8004d8c:	080055fb 	.word	0x080055fb
 8004d90:	080055fb 	.word	0x080055fb
 8004d94:	080055fb 	.word	0x080055fb
 8004d98:	080055fb 	.word	0x080055fb
 8004d9c:	080055fb 	.word	0x080055fb
 8004da0:	080055fb 	.word	0x080055fb
 8004da4:	080055fb 	.word	0x080055fb
 8004da8:	08005155 	.word	0x08005155
 8004dac:	080055fb 	.word	0x080055fb
 8004db0:	080055fb 	.word	0x080055fb
 8004db4:	080055fb 	.word	0x080055fb
 8004db8:	080055fb 	.word	0x080055fb
 8004dbc:	080055fb 	.word	0x080055fb
 8004dc0:	080055fb 	.word	0x080055fb
 8004dc4:	080055fb 	.word	0x080055fb
 8004dc8:	080055fb 	.word	0x080055fb
 8004dcc:	080055fb 	.word	0x080055fb
 8004dd0:	080055fb 	.word	0x080055fb
 8004dd4:	080055fb 	.word	0x080055fb
 8004dd8:	080055fb 	.word	0x080055fb
 8004ddc:	080055fb 	.word	0x080055fb
 8004de0:	080055fb 	.word	0x080055fb
 8004de4:	080055fb 	.word	0x080055fb
 8004de8:	080051d7 	.word	0x080051d7
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	f000 82c1 	beq.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004df4:	f000 bc01 	b.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004dfe:	f000 fdd9 	bl	80059b4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004e02:	61f8      	str	r0, [r7, #28]
      break;
 8004e04:	e3fa      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004e06:	69b9      	ldr	r1, [r7, #24]
 8004e08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e0c:	f000 fdd2 	bl	80059b4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004e10:	61f8      	str	r0, [r7, #28]
      break;
 8004e12:	e3f3      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0003d090 	.word	0x0003d090
 8004e1c:	0800c95c 	.word	0x0800c95c
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004e28:	4ba9      	ldr	r3, [pc, #676]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e3a:	d00c      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e4a:	d04e      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e52:	d01d      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004e54:	e076      	b.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004e56:	4b9e      	ldr	r3, [pc, #632]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d172      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004e62:	4b9b      	ldr	r3, [pc, #620]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004e6e:	4b98      	ldr	r3, [pc, #608]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	e005      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004e7a:	4b95      	ldr	r3, [pc, #596]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	4a93      	ldr	r2, [pc, #588]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	61fb      	str	r3, [r7, #28]
          break;
 8004e8e:	e05b      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e90:	4b8f      	ldr	r3, [pc, #572]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e9c:	d156      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004e9e:	4b8c      	ldr	r3, [pc, #560]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eaa:	d14f      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004eac:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	0a1b      	lsrs	r3, r3, #8
 8004eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	fb03 f202 	mul.w	r2, r3, r2
 8004ec0:	4b83      	ldr	r3, [pc, #524]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	3301      	adds	r3, #1
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	0d5b      	lsrs	r3, r3, #21
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	3301      	adds	r3, #1
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
          break;
 8004ee8:	e030      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef6:	d12b      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ef8:	4b75      	ldr	r3, [pc, #468]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f04:	d124      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f06:	4b72      	ldr	r3, [pc, #456]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f10:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	fb03 f202 	mul.w	r2, r3, r2
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	3301      	adds	r3, #1
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004f2c:	4b68      	ldr	r3, [pc, #416]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	0d5b      	lsrs	r3, r3, #21
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	61fb      	str	r3, [r7, #28]
          break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004f44:	bf00      	nop
 8004f46:	e359      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f48:	bf00      	nop
 8004f4a:	e357      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f4c:	bf00      	nop
 8004f4e:	e355      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f50:	bf00      	nop
        break;
 8004f52:	e353      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f54:	4b5e      	ldr	r3, [pc, #376]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d827      	bhi.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f85 	.word	0x08004f85
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004fa1 	.word	0x08004fa1
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f7c:	f7ff fa48 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8004f80:	61f8      	str	r0, [r7, #28]
          break;
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f84:	f7ff f996 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004f88:	61f8      	str	r0, [r7, #28]
          break;
 8004f8a:	e019      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f98:	d10f      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004f9c:	61fb      	str	r3, [r7, #28]
          break;
 8004f9e:	e00c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d107      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
          break;
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004fb6:	bf00      	nop
 8004fb8:	e320      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fba:	bf00      	nop
 8004fbc:	e31e      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fbe:	bf00      	nop
        break;
 8004fc0:	e31c      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004fc2:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d83a      	bhi.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	0800504b 	.word	0x0800504b
 8004fe4:	0800504b 	.word	0x0800504b
 8004fe8:	0800504b 	.word	0x0800504b
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	0800504b 	.word	0x0800504b
 8004ff4:	0800504b 	.word	0x0800504b
 8004ff8:	0800504b 	.word	0x0800504b
 8004ffc:	08005021 	.word	0x08005021
 8005000:	0800504b 	.word	0x0800504b
 8005004:	0800504b 	.word	0x0800504b
 8005008:	0800504b 	.word	0x0800504b
 800500c:	08005035 	.word	0x08005035
          frequency = HAL_RCC_GetPCLK1Freq();
 8005010:	f7ff f9e8 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005014:	61f8      	str	r0, [r7, #28]
          break;
 8005016:	e01d      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005018:	f7ff f94c 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800501c:	61f8      	str	r0, [r7, #28]
          break;
 800501e:	e019      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502c:	d10f      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800502e:	4b2a      	ldr	r3, [pc, #168]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005030:	61fb      	str	r3, [r7, #28]
          break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005034:	4b26      	ldr	r3, [pc, #152]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8005042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005046:	61fb      	str	r3, [r7, #28]
          break;
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800504a:	bf00      	nop
 800504c:	e2d6      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800504e:	bf00      	nop
 8005050:	e2d4      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005052:	bf00      	nop
        break;
 8005054:	e2d2      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005056:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d021      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b30      	cmp	r3, #48	@ 0x30
 800506c:	d829      	bhi.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b20      	cmp	r3, #32
 8005072:	d011      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b20      	cmp	r3, #32
 8005078:	d823      	bhi.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b10      	cmp	r3, #16
 8005084:	d004      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005086:	e01c      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005088:	f7ff f9ac 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 800508c:	61f8      	str	r0, [r7, #28]
          break;
 800508e:	e01d      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005090:	f7ff f910 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8005094:	61f8      	str	r0, [r7, #28]
          break;
 8005096:	e019      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005098:	4b0d      	ldr	r3, [pc, #52]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80050a6:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80050a8:	61fb      	str	r3, [r7, #28]
          break;
 80050aa:	e00c      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050ac:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d107      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80050ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050be:	61fb      	str	r3, [r7, #28]
          break;
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80050c2:	bf00      	nop
 80050c4:	e29a      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050c6:	bf00      	nop
 80050c8:	e298      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050ca:	bf00      	nop
        break;
 80050cc:	e296      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	0800c95c 	.word	0x0800c95c
 80050d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80050dc:	4b9b      	ldr	r3, [pc, #620]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80050ec:	d021      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80050f2:	d829      	bhi.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d011      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b80      	cmp	r3, #128	@ 0x80
 80050fe:	d823      	bhi.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d004      	beq.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800510c:	e01c      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800510e:	f7ff f969 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005112:	61f8      	str	r0, [r7, #28]
          break;
 8005114:	e01d      	b.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005116:	f7ff f8cd 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800511a:	61f8      	str	r0, [r7, #28]
          break;
 800511c:	e019      	b.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800511e:	4b8b      	ldr	r3, [pc, #556]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512a:	d10f      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 800512c:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800512e:	61fb      	str	r3, [r7, #28]
          break;
 8005130:	e00c      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005132:	4b86      	ldr	r3, [pc, #536]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d107      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005144:	61fb      	str	r3, [r7, #28]
          break;
 8005146:	e003      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005148:	bf00      	nop
 800514a:	e257      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800514c:	bf00      	nop
 800514e:	e255      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005150:	bf00      	nop
        break;
 8005152:	e253      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005154:	4b7d      	ldr	r3, [pc, #500]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005166:	d025      	beq.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516e:	d82c      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005176:	d013      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517e:	d824      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518c:	d004      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800518e:	e01c      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005190:	f7ff f928 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005194:	61f8      	str	r0, [r7, #28]
          break;
 8005196:	e01d      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005198:	f7ff f88c 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800519c:	61f8      	str	r0, [r7, #28]
          break;
 800519e:	e019      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051a0:	4b6a      	ldr	r3, [pc, #424]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ac:	d10f      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80051ae:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80051b0:	61fb      	str	r3, [r7, #28]
          break;
 80051b2:	e00c      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051b4:	4b65      	ldr	r3, [pc, #404]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d107      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051c6:	61fb      	str	r3, [r7, #28]
          break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80051ca:	bf00      	nop
 80051cc:	e216      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051ce:	bf00      	nop
 80051d0:	e214      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051d2:	bf00      	nop
        break;
 80051d4:	e212      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80051d6:	4b5d      	ldr	r3, [pc, #372]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051e8:	d025      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051f0:	d82c      	bhi.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f8:	d013      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005200:	d824      	bhi.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005210:	e01c      	b.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005212:	f7ff f8e7 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005216:	61f8      	str	r0, [r7, #28]
          break;
 8005218:	e01d      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800521a:	f7ff f84b 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800521e:	61f8      	str	r0, [r7, #28]
          break;
 8005220:	e019      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005222:	4b4a      	ldr	r3, [pc, #296]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d10f      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005230:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005232:	61fb      	str	r3, [r7, #28]
          break;
 8005234:	e00c      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005236:	4b45      	ldr	r3, [pc, #276]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d107      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005248:	61fb      	str	r3, [r7, #28]
          break;
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800524c:	bf00      	nop
 800524e:	e1d5      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005250:	bf00      	nop
 8005252:	e1d3      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005254:	bf00      	nop
        break;
 8005256:	e1d1      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005258:	4b3c      	ldr	r3, [pc, #240]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800526a:	d00c      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005272:	d864      	bhi.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800527a:	d008      	beq.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005282:	d030      	beq.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005284:	e05b      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005286:	f7ff f815 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800528a:	61f8      	str	r0, [r7, #28]
          break;
 800528c:	e05c      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800528e:	4b2f      	ldr	r3, [pc, #188]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800529a:	d152      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04c      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80052a8:	4b28      	ldr	r3, [pc, #160]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	fb03 f202 	mul.w	r2, r3, r2
 80052bc:	4b23      	ldr	r3, [pc, #140]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	3301      	adds	r3, #1
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80052ce:	4b1f      	ldr	r3, [pc, #124]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	0e5b      	lsrs	r3, r3, #25
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	3301      	adds	r3, #1
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	61fb      	str	r3, [r7, #28]
          break;
 80052e4:	e02d      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f2:	d128      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80052f4:	4b15      	ldr	r3, [pc, #84]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d022      	beq.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005300:	4b12      	ldr	r3, [pc, #72]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800530a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	fb03 f202 	mul.w	r2, r3, r2
 8005314:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	3301      	adds	r3, #1
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005326:	4b09      	ldr	r3, [pc, #36]	@ (800534c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	0e5b      	lsrs	r3, r3, #25
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	3301      	adds	r3, #1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	61fb      	str	r3, [r7, #28]
          break;
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800533e:	bf00      	nop
 8005340:	e15c      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005342:	bf00      	nop
 8005344:	e15a      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005346:	bf00      	nop
        break;
 8005348:	e158      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005354:	4b9d      	ldr	r3, [pc, #628]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800535e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005366:	f7ff f853 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 800536a:	61f8      	str	r0, [r7, #28]
        break;
 800536c:	e146      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe ffa1 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e142      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005376:	4b95      	ldr	r3, [pc, #596]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d013      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005390:	d819      	bhi.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539e:	d004      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80053a0:	e011      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053a2:	f7ff f81f 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 80053a6:	61f8      	str	r0, [r7, #28]
          break;
 80053a8:	e010      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fe ff83 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 80053ae:	61f8      	str	r0, [r7, #28]
          break;
 80053b0:	e00c      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053b2:	4b86      	ldr	r3, [pc, #536]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053be:	d104      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80053c0:	4b83      	ldr	r3, [pc, #524]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80053c2:	61fb      	str	r3, [r7, #28]
          break;
 80053c4:	e001      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80053c6:	bf00      	nop
 80053c8:	e118      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053ca:	bf00      	nop
        break;
 80053cc:	e116      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053ce:	4b7f      	ldr	r3, [pc, #508]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e0:	d013      	beq.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e8:	d819      	bhi.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f6:	d004      	beq.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80053f8:	e011      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053fa:	f7fe fff3 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 80053fe:	61f8      	str	r0, [r7, #28]
          break;
 8005400:	e010      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005402:	f7fe ff57 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8005406:	61f8      	str	r0, [r7, #28]
          break;
 8005408:	e00c      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800540a:	4b70      	ldr	r3, [pc, #448]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005416:	d104      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005418:	4b6d      	ldr	r3, [pc, #436]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800541a:	61fb      	str	r3, [r7, #28]
          break;
 800541c:	e001      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800541e:	bf00      	nop
 8005420:	e0ec      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005422:	bf00      	nop
        break;
 8005424:	e0ea      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005426:	4b69      	ldr	r3, [pc, #420]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005438:	d013      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005440:	d819      	bhi.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544e:	d004      	beq.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005450:	e011      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005452:	f7fe ffc7 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005456:	61f8      	str	r0, [r7, #28]
          break;
 8005458:	e010      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800545a:	f7fe ff2b 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800545e:	61f8      	str	r0, [r7, #28]
          break;
 8005460:	e00c      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005462:	4b5a      	ldr	r3, [pc, #360]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546e:	d104      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005470:	4b57      	ldr	r3, [pc, #348]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005472:	61fb      	str	r3, [r7, #28]
          break;
 8005474:	e001      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005476:	bf00      	nop
 8005478:	e0c0      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800547a:	bf00      	nop
        break;
 800547c:	e0be      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800547e:	4b53      	ldr	r3, [pc, #332]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005490:	d02c      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005498:	d833      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054a0:	d01a      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054a8:	d82b      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054b6:	d004      	beq.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80054b8:	e023      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe ff93 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 80054be:	61f8      	str	r0, [r7, #28]
          break;
 80054c0:	e026      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80054c2:	4b42      	ldr	r3, [pc, #264]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d11a      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80054d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054d4:	61fb      	str	r3, [r7, #28]
          break;
 80054d6:	e016      	b.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054d8:	4b3c      	ldr	r3, [pc, #240]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e4:	d111      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80054e6:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80054e8:	61fb      	str	r3, [r7, #28]
          break;
 80054ea:	e00e      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054ec:	4b37      	ldr	r3, [pc, #220]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054fe:	61fb      	str	r3, [r7, #28]
          break;
 8005500:	e005      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005502:	bf00      	nop
 8005504:	e07a      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005506:	bf00      	nop
 8005508:	e078      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800550a:	bf00      	nop
 800550c:	e076      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800550e:	bf00      	nop
        break;
 8005510:	e074      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005512:	4b2e      	ldr	r3, [pc, #184]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005518:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005524:	d02c      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800552c:	d833      	bhi.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005534:	d01a      	beq.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553c:	d82b      	bhi.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800554a:	d004      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800554c:	e023      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800554e:	f7fe ff49 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005552:	61f8      	str	r0, [r7, #28]
          break;
 8005554:	e026      	b.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005556:	4b1d      	ldr	r3, [pc, #116]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d11a      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005564:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005568:	61fb      	str	r3, [r7, #28]
          break;
 800556a:	e016      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800556c:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005578:	d111      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800557a:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800557c:	61fb      	str	r3, [r7, #28]
          break;
 800557e:	e00e      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005580:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d109      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
          break;
 8005594:	e005      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005596:	bf00      	nop
 8005598:	e030      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800559a:	bf00      	nop
 800559c:	e02e      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800559e:	bf00      	nop
 80055a0:	e02c      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055a2:	bf00      	nop
        break;
 80055a4:	e02a      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80055a6:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	d009      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80055c0:	e012      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055c2:	f7fe ff0f 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 80055c6:	61f8      	str	r0, [r7, #28]
          break;
 80055c8:	e00e      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80055e4:	61fb      	str	r3, [r7, #28]
          break;
 80055e6:	bf00      	nop
        break;
 80055e8:	e008      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80055ea:	bf00      	nop
 80055ec:	e006      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80055ee:	bf00      	nop
 80055f0:	e004      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80055fa:	bf00      	nop
    }
  }

  return(frequency);
 80055fc:	69fb      	ldr	r3, [r7, #28]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	00f42400 	.word	0x00f42400

08005610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561e:	4b75      	ldr	r3, [pc, #468]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800562a:	4b72      	ldr	r3, [pc, #456]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
       ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005642:	4b6c      	ldr	r3, [pc, #432]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
       ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d047      	beq.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d018      	beq.n	8005696 <RCCEx_PLLSAI1_Config+0x86>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x62>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d009      	beq.n	8005684 <RCCEx_PLLSAI1_Config+0x74>
 8005670:	e020      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b60      	ldr	r3, [pc, #384]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e01a      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005684:	4b5b      	ldr	r3, [pc, #364]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e013      	b.n	80056be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005696:	4b57      	ldr	r3, [pc, #348]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056a2:	4b54      	ldr	r3, [pc, #336]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e004      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ca:	4b4a      	ldr	r3, [pc, #296]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	430b      	orrs	r3, r1
 80056e0:	4944      	ldr	r1, [pc, #272]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d17d      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056ec:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a40      	ldr	r2, [pc, #256]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fc fec0 	bl	800247c <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005700:	f7fc febc 	bl	800247c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005714:	4b37      	ldr	r3, [pc, #220]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d160      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d111      	bne.n	8005750 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800572c:	4b31      	ldr	r3, [pc, #196]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	0912      	lsrs	r2, r2, #4
 8005744:	0452      	lsls	r2, r2, #17
 8005746:	430a      	orrs	r2, r1
 8005748:	492a      	ldr	r1, [pc, #168]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
 800574e:	e027      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d112      	bne.n	800577c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800575e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	0211      	lsls	r1, r2, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6912      	ldr	r2, [r2, #16]
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	0552      	lsls	r2, r2, #21
 8005772:	430a      	orrs	r2, r1
 8005774:	491f      	ldr	r1, [pc, #124]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
 800577a:	e011      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800577c:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005784:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	0211      	lsls	r1, r2, #8
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6952      	ldr	r2, [r2, #20]
 8005792:	0852      	lsrs	r2, r2, #1
 8005794:	3a01      	subs	r2, #1
 8005796:	0652      	lsls	r2, r2, #25
 8005798:	430a      	orrs	r2, r1
 800579a:	4916      	ldr	r1, [pc, #88]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a13      	ldr	r2, [pc, #76]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fe66 	bl	800247c <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b4:	f7fc fe62 	bl	800247c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
          break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	4904      	ldr	r1, [pc, #16]	@ (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005806:	4b6a      	ldr	r3, [pc, #424]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005812:	4b67      	ldr	r3, [pc, #412]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d10d      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
       ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800582a:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
       ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d047      	beq.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
 8005842:	e044      	b.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d018      	beq.n	800587e <RCCEx_PLLSAI2_Config+0x86>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d825      	bhi.n	800589c <RCCEx_PLLSAI2_Config+0xa4>
 8005850:	2b01      	cmp	r3, #1
 8005852:	d002      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x62>
 8005854:	2b02      	cmp	r3, #2
 8005856:	d009      	beq.n	800586c <RCCEx_PLLSAI2_Config+0x74>
 8005858:	e020      	b.n	800589c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800585a:	4b55      	ldr	r3, [pc, #340]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11d      	bne.n	80058a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586a:	e01a      	b.n	80058a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800586c:	4b50      	ldr	r3, [pc, #320]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d116      	bne.n	80058a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587c:	e013      	b.n	80058a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800587e:	4b4c      	ldr	r3, [pc, #304]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800588a:	4b49      	ldr	r3, [pc, #292]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800589a:	e006      	b.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e004      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10d      	bne.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058b2:	4b3f      	ldr	r3, [pc, #252]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	430b      	orrs	r3, r1
 80058c8:	4939      	ldr	r1, [pc, #228]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d167      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058d4:	4b36      	ldr	r3, [pc, #216]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fc fdcc 	bl	800247c <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058e6:	e009      	b.n	80058fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058e8:	f7fc fdc8 	bl	800247c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
        break;
 80058fa:	e005      	b.n	8005908 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058fc:	4b2c      	ldr	r3, [pc, #176]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ef      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d14a      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d111      	bne.n	8005938 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005914:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800591c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6892      	ldr	r2, [r2, #8]
 8005924:	0211      	lsls	r1, r2, #8
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68d2      	ldr	r2, [r2, #12]
 800592a:	0912      	lsrs	r2, r2, #4
 800592c:	0452      	lsls	r2, r2, #17
 800592e:	430a      	orrs	r2, r1
 8005930:	491f      	ldr	r1, [pc, #124]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	614b      	str	r3, [r1, #20]
 8005936:	e011      	b.n	800595c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005938:	4b1d      	ldr	r3, [pc, #116]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005940:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	0211      	lsls	r1, r2, #8
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6912      	ldr	r2, [r2, #16]
 800594e:	0852      	lsrs	r2, r2, #1
 8005950:	3a01      	subs	r2, #1
 8005952:	0652      	lsls	r2, r2, #25
 8005954:	430a      	orrs	r2, r1
 8005956:	4916      	ldr	r1, [pc, #88]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005958:	4313      	orrs	r3, r2
 800595a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800595c:	4b14      	ldr	r3, [pc, #80]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a13      	ldr	r2, [pc, #76]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fc fd88 	bl	800247c <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005970:	f7fc fd84 	bl	800247c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
          break;
 8005982:	e005      	b.n	8005990 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005984:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ef      	beq.n	8005970 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4904      	ldr	r1, [pc, #16]	@ (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000

080059b4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b089      	sub	sp, #36	@ 0x24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d0:	d10c      	bne.n	80059ec <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80059d2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80059dc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80059e4:	d112      	bne.n	8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80059e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e00f      	b.n	8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	d10b      	bne.n	8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059f4:	4b65      	ldr	r3, [pc, #404]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80059fe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a06:	d101      	bne.n	8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005a08:	4b61      	ldr	r3, [pc, #388]	@ (8005b90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005a0a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 80b4 	bne.w	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a1e:	d003      	beq.n	8005a28 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a26:	d135      	bne.n	8005a94 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005a28:	4b58      	ldr	r3, [pc, #352]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a34:	f040 80a1 	bne.w	8005b7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005a38:	4b54      	ldr	r3, [pc, #336]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 809a 	beq.w	8005b7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a46:	4b51      	ldr	r3, [pc, #324]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	3301      	adds	r3, #1
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a6c:	4b47      	ldr	r3, [pc, #284]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005a78:	2311      	movs	r3, #17
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e001      	b.n	8005a82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005a7e:	2307      	movs	r3, #7
 8005a80:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	fb03 f202 	mul.w	r2, r3, r2
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005a92:	e072      	b.n	8005b7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d133      	bne.n	8005b02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa6:	d169      	bne.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005aa8:	4b38      	ldr	r3, [pc, #224]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d063      	beq.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ab4:	4b35      	ldr	r3, [pc, #212]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	3301      	adds	r3, #1
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ac8:	4b30      	ldr	r3, [pc, #192]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005ada:	4b2c      	ldr	r3, [pc, #176]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005ae6:	2311      	movs	r3, #17
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e001      	b.n	8005af0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005aec:	2307      	movs	r3, #7
 8005aee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	fb03 f202 	mul.w	r2, r3, r2
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e03c      	b.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b08:	d003      	beq.n	8005b12 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b10:	d134      	bne.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005b12:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1e:	d12d      	bne.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005b20:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d027      	beq.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b2c:	4b17      	ldr	r3, [pc, #92]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	3301      	adds	r3, #1
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005b40:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005b5e:	2311      	movs	r3, #17
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e001      	b.n	8005b68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005b64:	2307      	movs	r3, #7
 8005b66:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	fb03 f202 	mul.w	r2, r3, r2
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e000      	b.n	8005b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b7a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	@ 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	001fff68 	.word	0x001fff68

08005b94 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d904      	bls.n	8005bb2 <HAL_SAI_InitProtocol+0x1e>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3b03      	subs	r3, #3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d812      	bhi.n	8005bd6 <HAL_SAI_InitProtocol+0x42>
 8005bb0:	e008      	b.n	8005bc4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fd09 	bl	80065d0 <SAI_InitI2S>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	e00b      	b.n	8005bdc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fdb2 	bl	8006734 <SAI_InitPCM>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd4:	e002      	b.n	8005bdc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bda:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f808 	bl	8005bf8 <HAL_SAI_Init>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e155      	b.n	8005eb6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb fdbe 	bl	80017a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fe3f 	bl	80068a8 <SAI_Disable>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e140      	b.n	8005eb6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d00c      	beq.n	8005c5e <HAL_SAI_Init+0x66>
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d80d      	bhi.n	8005c64 <HAL_SAI_Init+0x6c>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <HAL_SAI_Init+0x5a>
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d003      	beq.n	8005c58 <HAL_SAI_Init+0x60>
 8005c50:	e008      	b.n	8005c64 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      break;
 8005c56:	e008      	b.n	8005c6a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005c58:	2310      	movs	r3, #16
 8005c5a:	61fb      	str	r3, [r7, #28]
      break;
 8005c5c:	e005      	b.n	8005c6a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005c5e:	2320      	movs	r3, #32
 8005c60:	61fb      	str	r3, [r7, #28]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]
      break;
 8005c68:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d81d      	bhi.n	8005cae <HAL_SAI_Init+0xb6>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <HAL_SAI_Init+0x80>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005c8f 	.word	0x08005c8f
 8005c80:	08005c97 	.word	0x08005c97
 8005c84:	08005c9f 	.word	0x08005c9f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
      break;
 8005c8c:	e012      	b.n	8005cb4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c92:	617b      	str	r3, [r7, #20]
      break;
 8005c94:	e00e      	b.n	8005cb4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c9a:	617b      	str	r3, [r7, #20]
      break;
 8005c9c:	e00a      	b.n	8005cb4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ca2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	61fb      	str	r3, [r7, #28]
      break;
 8005cac:	e002      	b.n	8005cb4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
      break;
 8005cb2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a81      	ldr	r2, [pc, #516]	@ (8005ec0 <HAL_SAI_Init+0x2c8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_SAI_Init+0xd0>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a80      	ldr	r2, [pc, #512]	@ (8005ec4 <HAL_SAI_Init+0x2cc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d103      	bne.n	8005cd0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005cc8:	4a7f      	ldr	r2, [pc, #508]	@ (8005ec8 <HAL_SAI_Init+0x2d0>)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e002      	b.n	8005cd6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005cd0:	4a7e      	ldr	r2, [pc, #504]	@ (8005ecc <HAL_SAI_Init+0x2d4>)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d041      	beq.n	8005d62 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a77      	ldr	r2, [pc, #476]	@ (8005ec0 <HAL_SAI_Init+0x2c8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_SAI_Init+0xfa>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <HAL_SAI_Init+0x2cc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d105      	bne.n	8005cfe <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005cf2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005cf6:	f7fe ff1d 	bl	8004b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cfa:	6138      	str	r0, [r7, #16]
 8005cfc:	e004      	b.n	8005d08 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005cfe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005d02:	f7fe ff17 	bl	8004b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d06:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	025b      	lsls	r3, r3, #9
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed0 <HAL_SAI_Init+0x2d8>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	08da      	lsrs	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	4b67      	ldr	r3, [pc, #412]	@ (8005ed0 <HAL_SAI_Init+0x2d8>)
 8005d32:	fba3 2301 	umull	r2, r3, r3, r1
 8005d36:	08da      	lsrs	r2, r3, #3
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	1aca      	subs	r2, r1, r3
 8005d42:	2a08      	cmp	r2, #8
 8005d44:	d904      	bls.n	8005d50 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d104      	bne.n	8005d62 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	085a      	lsrs	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_SAI_Init+0x17a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d109      	bne.n	8005d86 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_SAI_Init+0x186>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e001      	b.n	8005d82 <HAL_SAI_Init+0x18a>
 8005d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e008      	b.n	8005d98 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_SAI_Init+0x19c>
 8005d8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d92:	e000      	b.n	8005d96 <HAL_SAI_Init+0x19e>
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6819      	ldr	r1, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ed4 <HAL_SAI_Init+0x2dc>)
 8005da4:	400b      	ands	r3, r1
 8005da6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005dbc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005dd0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ddc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	051b      	lsls	r3, r3, #20
 8005de4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005dfc:	f023 030f 	bic.w	r3, r3, #15
 8005e00:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed8 <HAL_SAI_Init+0x2e0>)
 8005e2c:	400b      	ands	r3, r1
 8005e2e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005e46:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005e4c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	3b01      	subs	r3, #1
 8005e54:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005e56:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005e6e:	400b      	ands	r3, r1
 8005e70:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68d9      	ldr	r1, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e86:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005e88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40015404 	.word	0x40015404
 8005ec4:	40015424 	.word	0x40015424
 8005ec8:	40015400 	.word	0x40015400
 8005ecc:	40015800 	.word	0x40015800
 8005ed0:	cccccccd 	.word	0xcccccccd
 8005ed4:	ff05c010 	.word	0xff05c010
 8005ed8:	fff88000 	.word	0xfff88000

08005edc <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_SAI_Abort+0x1a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e053      	b.n	8005f9e <HAL_SAI_Abort+0xc2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fcd2 	bl	80068a8 <SAI_Disable>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f1c:	d125      	bne.n	8005f6a <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f2c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b12      	cmp	r3, #18
 8005f38:	d108      	bne.n	8005f4c <HAL_SAI_Abort+0x70>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc fc9e 	bl	8002888 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b22      	cmp	r3, #34	@ 0x22
 8005f56:	d108      	bne.n	8005f6a <HAL_SAI_Abort+0x8e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fc fc8f 	bl	8002888 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0208 	orr.w	r2, r2, #8
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005fb6:	f7fc fa61 	bl	800247c <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SAI_Transmit_DMA+0x20>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e093      	b.n	80060f4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f040 808c 	bne.w	80060f2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_SAI_Transmit_DMA+0x40>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e085      	b.n	80060f4 <HAL_SAI_Transmit_DMA+0x14c>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2212      	movs	r2, #18
 8006012:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601a:	4a38      	ldr	r2, [pc, #224]	@ (80060fc <HAL_SAI_Transmit_DMA+0x154>)
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006022:	4a37      	ldr	r2, [pc, #220]	@ (8006100 <HAL_SAI_Transmit_DMA+0x158>)
 8006024:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800602a:	4a36      	ldr	r2, [pc, #216]	@ (8006104 <HAL_SAI_Transmit_DMA+0x15c>)
 800602c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006032:	2200      	movs	r2, #0
 8006034:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800603e:	4619      	mov	r1, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	331c      	adds	r3, #28
 8006046:	461a      	mov	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800604e:	f7fc fbbb 	bl	80027c8 <HAL_DMA_Start_IT>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e047      	b.n	80060f4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fbe6 	bl	8006838 <SAI_InterruptFlag>
 800606c:	4601      	mov	r1, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800608a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800608c:	e015      	b.n	80060ba <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800608e:	f7fc f9f5 	bl	800247c <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800609c:	d90d      	bls.n	80060ba <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e01c      	b.n	80060f4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0e2      	beq.n	800608e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d107      	bne.n	80060e6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80060e4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	0800697b 	.word	0x0800697b
 8006100:	0800691d 	.word	0x0800691d
 8006104:	08006a11 	.word	0x08006a11

08006108 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SAI_Receive_DMA+0x1a>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e074      	b.n	8006210 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d16d      	bne.n	800620e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_SAI_Receive_DMA+0x38>
 800613c:	2302      	movs	r3, #2
 800613e:	e067      	b.n	8006210 <HAL_SAI_Receive_DMA+0x108>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2222      	movs	r2, #34	@ 0x22
 800616a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	4a29      	ldr	r2, [pc, #164]	@ (8006218 <HAL_SAI_Receive_DMA+0x110>)
 8006174:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617a:	4a28      	ldr	r2, [pc, #160]	@ (800621c <HAL_SAI_Receive_DMA+0x114>)
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006182:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <HAL_SAI_Receive_DMA+0x118>)
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618a:	2200      	movs	r2, #0
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	331c      	adds	r3, #28
 8006198:	4619      	mov	r1, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619e:	461a      	mov	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80061a6:	f7fc fb0f 	bl	80027c8 <HAL_DMA_Start_IT>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e029      	b.n	8006210 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061bc:	2100      	movs	r1, #0
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fb3a 	bl	8006838 <SAI_InterruptFlag>
 80061c4:	4601      	mov	r1, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80061e2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d107      	bne.n	8006202 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006200:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e000      	b.n	8006210 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800620e:	2302      	movs	r3, #2
  }
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	080069f5 	.word	0x080069f5
 800621c:	08006997 	.word	0x08006997
 8006220:	08006a11 	.word	0x08006a11

08006224 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8192 	beq.w	800655e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_SAI_IRQHandler+0x4c>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	e176      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01e      	beq.n	80062b8 <HAL_SAI_IRQHandler+0x94>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d019      	beq.n	80062b8 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b22      	cmp	r3, #34	@ 0x22
 8006296:	d101      	bne.n	800629c <HAL_SAI_IRQHandler+0x78>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_SAI_IRQHandler+0x7a>
 800629c:	2302      	movs	r3, #2
 800629e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f983 	bl	80065bc <HAL_SAI_ErrorCallback>
 80062b6:	e152      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d011      	beq.n	80062e6 <HAL_SAI_IRQHandler+0xc2>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2202      	movs	r2, #2
 80062d2:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8140 	beq.w	800655e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e2:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80062e4:	e13b      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d055      	beq.n	800639c <HAL_SAI_IRQHandler+0x178>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d050      	beq.n	800639c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2220      	movs	r2, #32
 8006300:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d038      	beq.n	800638e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d016      	beq.n	8006352 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006328:	4a8f      	ldr	r2, [pc, #572]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 800632a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006330:	4618      	mov	r0, r3
 8006332:	f7fc fae7 	bl	8002904 <HAL_DMA_Abort_IT>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006342:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f935 	bl	80065bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80fc 	beq.w	8006554 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006360:	4a81      	ldr	r2, [pc, #516]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 8006362:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006368:	4618      	mov	r0, r3
 800636a:	f7fc facb 	bl	8002904 <HAL_DMA_Abort_IT>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80ef 	beq.w	8006554 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800637c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f918 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800638c:	e0e2      	b.n	8006554 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fda4 	bl	8005edc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f911 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800639a:	e0db      	b.n	8006554 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d055      	beq.n	8006452 <HAL_SAI_IRQHandler+0x22e>
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d050      	beq.n	8006452 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2240      	movs	r2, #64	@ 0x40
 80063b6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063be:	f043 0208 	orr.w	r2, r3, #8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d038      	beq.n	8006444 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063de:	4a62      	ldr	r2, [pc, #392]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 80063e0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fc fa8c 	bl	8002904 <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8da 	bl	80065bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a3 	beq.w	8006558 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006416:	4a54      	ldr	r2, [pc, #336]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc fa70 	bl	8002904 <HAL_DMA_Abort_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8096 	beq.w	8006558 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006432:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8bd 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006442:	e089      	b.n	8006558 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fd49 	bl	8005edc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8b6 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006450:	e082      	b.n	8006558 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d061      	beq.n	8006520 <HAL_SAI_IRQHandler+0x2fc>
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d05c      	beq.n	8006520 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2204      	movs	r2, #4
 800646c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006474:	f043 0220 	orr.w	r2, r3, #32
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d036      	beq.n	80064f6 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d016      	beq.n	80064be <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006494:	4a34      	ldr	r2, [pc, #208]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800649c:	4618      	mov	r0, r3
 800649e:	f7fc fa31 	bl	8002904 <HAL_DMA_Abort_IT>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f87f 	bl	80065bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d04a      	beq.n	800655c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ca:	4a27      	ldr	r2, [pc, #156]	@ (8006568 <HAL_SAI_IRQHandler+0x344>)
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fa16 	bl	8002904 <HAL_DMA_Abort_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03e      	beq.n	800655c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f864 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80064f4:	e032      	b.n	800655c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f04f 32ff 	mov.w	r2, #4294967295
 8006506:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f84f 	bl	80065bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800651e:	e01d      	b.n	800655c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <HAL_SAI_IRQHandler+0x33a>
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	d014      	beq.n	800655e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2210      	movs	r2, #16
 800653a:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006542:	f043 0210 	orr.w	r2, r3, #16
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f835 	bl	80065bc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8006552:	e004      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006554:	bf00      	nop
 8006556:	e002      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800655c:	bf00      	nop
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	08006a63 	.word	0x08006a63

0800656c <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <SAI_InitI2S+0x2e>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d103      	bne.n	8006606 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006604:	e002      	b.n	800660c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006612:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800661a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e077      	b.n	8006726 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006648:	651a      	str	r2, [r3, #80]	@ 0x50
 800664a:	e006      	b.n	800665a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006652:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d84f      	bhi.n	8006700 <SAI_InitI2S+0x130>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <SAI_InitI2S+0x98>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006679 	.word	0x08006679
 800666c:	0800669b 	.word	0x0800669b
 8006670:	080066bd 	.word	0x080066bd
 8006674:	080066df 	.word	0x080066df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2280      	movs	r2, #128	@ 0x80
 800667c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	011a      	lsls	r2, r3, #4
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006698:	e035      	b.n	8006706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2280      	movs	r2, #128	@ 0x80
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	019a      	lsls	r2, r3, #6
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2280      	movs	r2, #128	@ 0x80
 80066b8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066ba:	e024      	b.n	8006706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22c0      	movs	r2, #192	@ 0xc0
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	019a      	lsls	r2, r3, #6
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2280      	movs	r2, #128	@ 0x80
 80066da:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066dc:	e013      	b.n	8006706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22e0      	movs	r2, #224	@ 0xe0
 80066e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	019a      	lsls	r2, r3, #6
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2280      	movs	r2, #128	@ 0x80
 80066fc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066fe:	e002      	b.n	8006706 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75fb      	strb	r3, [r7, #23]
      break;
 8006704:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d10b      	bne.n	8006724 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d102      	bne.n	8006718 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2210      	movs	r2, #16
 8006716:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d102      	bne.n	8006724 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2208      	movs	r2, #8
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8006724:	7dfb      	ldrb	r3, [r7, #23]
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop

08006734 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <SAI_InitPCM+0x2e>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d103      	bne.n	800676a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006768:	e002      	b.n	8006770 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800677c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006784:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006798:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b04      	cmp	r3, #4
 800679e:	d103      	bne.n	80067a8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80067a6:	e002      	b.n	80067ae <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	220d      	movs	r2, #13
 80067ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d837      	bhi.n	8006824 <SAI_InitPCM+0xf0>
 80067b4:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <SAI_InitPCM+0x88>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067e3 	.word	0x080067e3
 80067c4:	080067f9 	.word	0x080067f9
 80067c8:	0800680f 	.word	0x0800680f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2280      	movs	r2, #128	@ 0x80
 80067d0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	011a      	lsls	r2, r3, #4
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2240      	movs	r2, #64	@ 0x40
 80067de:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80067e0:	e023      	b.n	800682a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2280      	movs	r2, #128	@ 0x80
 80067e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2280      	movs	r2, #128	@ 0x80
 80067f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80067f6:	e018      	b.n	800682a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	22c0      	movs	r2, #192	@ 0xc0
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2280      	movs	r2, #128	@ 0x80
 800680a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800680c:	e00d      	b.n	800682a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	22e0      	movs	r2, #224	@ 0xe0
 8006812:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2280      	movs	r2, #128	@ 0x80
 8006820:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006822:	e002      	b.n	800682a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	bf00      	nop
  }

  return status;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006844:	2301      	movs	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d103      	bne.n	8006856 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f043 0308 	orr.w	r3, r3, #8
 8006854:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	2b08      	cmp	r3, #8
 800685c:	d10b      	bne.n	8006876 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006862:	2b03      	cmp	r3, #3
 8006864:	d003      	beq.n	800686e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d103      	bne.n	8006876 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f043 0310 	orr.w	r3, r3, #16
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d003      	beq.n	8006886 <SAI_InterruptFlag+0x4e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d104      	bne.n	8006890 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e003      	b.n	8006898 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006898:	68fb      	ldr	r3, [r7, #12]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80068b0:	4b18      	ldr	r3, [pc, #96]	@ (8006914 <SAI_Disable+0x6c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a18      	ldr	r2, [pc, #96]	@ (8006918 <SAI_Disable+0x70>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0b1b      	lsrs	r3, r3, #12
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80068d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	72fb      	strb	r3, [r7, #11]
      break;
 80068ee:	e009      	b.n	8006904 <SAI_Disable+0x5c>
    }
    count--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e7      	bne.n	80068d4 <SAI_Disable+0x2c>

  return status;
 8006904:	7afb      	ldrb	r3, [r7, #11]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000034 	.word	0x20000034
 8006918:	95cbec1b 	.word	0x95cbec1b

0800691c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	2b20      	cmp	r3, #32
 8006930:	d01c      	beq.n	800696c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006948:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800694a:	2100      	movs	r1, #0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff ff73 	bl	8006838 <SAI_InterruptFlag>
 8006952:	4603      	mov	r3, r0
 8006954:	43d9      	mvns	r1, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	400a      	ands	r2, r1
 8006962:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff fdfd 	bl	800656c <HAL_SAI_TxCpltCallback>
#endif
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fdf9 	bl	8006580 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a2:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d01c      	beq.n	80069e6 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80069ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80069c4:	2100      	movs	r1, #0
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ff36 	bl	8006838 <SAI_InterruptFlag>
 80069cc:	4603      	mov	r3, r0
 80069ce:	43d9      	mvns	r1, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	400a      	ands	r2, r1
 80069dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fdd4 	bl	8006594 <HAL_SAI_RxCpltCallback>
#endif
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fdd0 	bl	80065a8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff ff32 	bl	80068a8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff fdb1 	bl	80065bc <HAL_SAI_ErrorCallback>
#endif
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2200      	movs	r2, #0
 8006a86:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d00a      	beq.n	8006ab2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff ff03 	bl	80068a8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0208 	orr.w	r2, r2, #8
 8006ab0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fd7a 	bl	80065bc <HAL_SAI_ErrorCallback>
#endif
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e095      	b.n	8006c0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d108      	bne.n	8006afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006af2:	d009      	beq.n	8006b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	61da      	str	r2, [r3, #28]
 8006afa:	e005      	b.n	8006b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb f9ac 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b48:	d902      	bls.n	8006b50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	e002      	b.n	8006b56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b5e:	d007      	beq.n	8006b70 <HAL_SPI_Init+0xa0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b68:	d002      	beq.n	8006b70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb2:	ea42 0103 	orr.w	r1, r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f003 0204 	and.w	r2, r3, #4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006bec:	ea42 0103 	orr.w	r1, r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b088      	sub	sp, #32
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c26:	f7fb fc29 	bl	800247c <HAL_GetTick>
 8006c2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d001      	beq.n	8006c40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e15c      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0x36>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e154      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_SPI_Transmit+0x48>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e14d      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb0:	d10f      	bne.n	8006cd2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	d007      	beq.n	8006cf0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cf8:	d952      	bls.n	8006da0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Transmit+0xf2>
 8006d02:	8b7b      	ldrh	r3, [r7, #26]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d145      	bne.n	8006d94 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	1c9a      	adds	r2, r3, #2
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d2c:	e032      	b.n	8006d94 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d112      	bne.n	8006d62 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	881a      	ldrh	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d60:	e018      	b.n	8006d94 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d62:	f7fb fb8b 	bl	800247c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d803      	bhi.n	8006d7a <HAL_SPI_Transmit+0x164>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d102      	bne.n	8006d80 <HAL_SPI_Transmit+0x16a>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0b2      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1c7      	bne.n	8006d2e <HAL_SPI_Transmit+0x118>
 8006d9e:	e083      	b.n	8006ea8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Transmit+0x198>
 8006da8:	8b7b      	ldrh	r3, [r7, #26]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d177      	bne.n	8006e9e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d912      	bls.n	8006dde <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b02      	subs	r3, #2
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ddc:	e05f      	b.n	8006e9e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e04:	e04b      	b.n	8006e9e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d12b      	bne.n	8006e6c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d912      	bls.n	8006e44 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2e:	1c9a      	adds	r2, r3, #2
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b02      	subs	r3, #2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e42:	e02c      	b.n	8006e9e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e6a:	e018      	b.n	8006e9e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e6c:	f7fb fb06 	bl	800247c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d803      	bhi.n	8006e84 <HAL_SPI_Transmit+0x26e>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Transmit+0x274>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e02d      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1ae      	bne.n	8006e06 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fcf5 	bl	800789c <SPI_EndRxTxTransaction>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af02      	add	r7, sp, #8
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d001      	beq.n	8006f22 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e123      	b.n	800716a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f2a:	d112      	bne.n	8006f52 <HAL_SPI_Receive+0x50>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10e      	bne.n	8006f52 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2204      	movs	r2, #4
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f912 	bl	8007172 <HAL_SPI_TransmitReceive>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	e10b      	b.n	800716a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f52:	f7fb fa93 	bl	800247c <HAL_GetTick>
 8006f56:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_SPI_Receive+0x62>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e100      	b.n	800716a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_SPI_Receive+0x74>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e0f9      	b.n	800716a <HAL_SPI_Receive+0x268>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2204      	movs	r2, #4
 8006f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fc8:	d908      	bls.n	8006fdc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	e007      	b.n	8006fec <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff4:	d10f      	bne.n	8007016 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007020:	2b40      	cmp	r3, #64	@ 0x40
 8007022:	d007      	beq.n	8007034 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800703c:	d875      	bhi.n	800712a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800703e:	e037      	b.n	80070b0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d117      	bne.n	800707e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f103 020c 	add.w	r2, r3, #12
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800707c:	e018      	b.n	80070b0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707e:	f7fb f9fd 	bl	800247c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d803      	bhi.n	8007096 <HAL_SPI_Receive+0x194>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d102      	bne.n	800709c <HAL_SPI_Receive+0x19a>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e05c      	b.n	800716a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1c1      	bne.n	8007040 <HAL_SPI_Receive+0x13e>
 80070bc:	e03b      	b.n	8007136 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d115      	bne.n	80070f8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	b292      	uxth	r2, r2
 80070d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80070f6:	e018      	b.n	800712a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f8:	f7fb f9c0 	bl	800247c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d803      	bhi.n	8007110 <HAL_SPI_Receive+0x20e>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d102      	bne.n	8007116 <HAL_SPI_Receive+0x214>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e01f      	b.n	800716a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1c3      	bne.n	80070be <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fb56 	bl	80077ec <SPI_EndRxTransaction>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8007168:	2300      	movs	r3, #0
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08a      	sub	sp, #40	@ 0x28
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007180:	2301      	movs	r3, #1
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007184:	f7fb f97a 	bl	800247c <HAL_GetTick>
 8007188:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007190:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007198:	887b      	ldrh	r3, [r7, #2]
 800719a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071a0:	7ffb      	ldrb	r3, [r7, #31]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00c      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x4e>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ac:	d106      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x4a>
 80071b6:	7ffb      	ldrb	r3, [r7, #31]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d001      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80071bc:	2302      	movs	r3, #2
 80071be:	e1f3      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x60>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x60>
 80071cc:	887b      	ldrh	r3, [r7, #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e1e8      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x72>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e1e1      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d003      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2205      	movs	r2, #5
 80071fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	887a      	ldrh	r2, [r7, #2]
 8007226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	887a      	ldrh	r2, [r7, #2]
 800722c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007242:	d802      	bhi.n	800724a <HAL_SPI_TransmitReceive+0xd8>
 8007244:	8abb      	ldrh	r3, [r7, #20]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d908      	bls.n	800725c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	e007      	b.n	800726c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800726a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007276:	2b40      	cmp	r3, #64	@ 0x40
 8007278:	d007      	beq.n	800728a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007292:	f240 8083 	bls.w	800739c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_TransmitReceive+0x132>
 800729e:	8afb      	ldrh	r3, [r7, #22]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d16f      	bne.n	8007384 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c8:	e05c      	b.n	8007384 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d11b      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x19e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x19e>
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d113      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	881a      	ldrh	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11c      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1e6>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	b292      	uxth	r2, r2
 8007336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	1c9a      	adds	r2, r3, #2
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007358:	f7fb f890 	bl	800247c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007364:	429a      	cmp	r2, r3
 8007366:	d80d      	bhi.n	8007384 <HAL_SPI_TransmitReceive+0x212>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d009      	beq.n	8007384 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e111      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d19d      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x158>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d197      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x158>
 800739a:	e0e5      	b.n	8007568 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_SPI_TransmitReceive+0x23a>
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	f040 80d1 	bne.w	800754e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d912      	bls.n	80073dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	1c9a      	adds	r2, r3, #2
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b02      	subs	r3, #2
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073da:	e0b8      	b.n	800754e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007402:	e0a4      	b.n	800754e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b02      	cmp	r3, #2
 8007410:	d134      	bne.n	800747c <HAL_SPI_TransmitReceive+0x30a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d02f      	beq.n	800747c <HAL_SPI_TransmitReceive+0x30a>
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	2b01      	cmp	r3, #1
 8007420:	d12c      	bne.n	800747c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b01      	cmp	r3, #1
 800742a:	d912      	bls.n	8007452 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	1c9a      	adds	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b02      	subs	r3, #2
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007450:	e012      	b.n	8007478 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	7812      	ldrb	r2, [r2, #0]
 800745e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b01      	cmp	r3, #1
 8007488:	d148      	bne.n	800751c <HAL_SPI_TransmitReceive+0x3aa>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d042      	beq.n	800751c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d923      	bls.n	80074ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ac:	b292      	uxth	r2, r2
 80074ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	1c9a      	adds	r2, r3, #2
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b02      	subs	r3, #2
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d81f      	bhi.n	8007518 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	e016      	b.n	8007518 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f103 020c 	add.w	r2, r3, #12
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007518:	2301      	movs	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800751c:	f7fa ffae 	bl	800247c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007528:	429a      	cmp	r2, r3
 800752a:	d803      	bhi.n	8007534 <HAL_SPI_TransmitReceive+0x3c2>
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <HAL_SPI_TransmitReceive+0x3c8>
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e02c      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	f47f af55 	bne.w	8007404 <HAL_SPI_TransmitReceive+0x292>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	f47f af4e 	bne.w	8007404 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 f995 	bl	800789c <SPI_EndRxTxTransaction>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2220      	movs	r2, #32
 800757c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e00e      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e000      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80075a6:	2300      	movs	r3, #0
  }
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3728      	adds	r7, #40	@ 0x28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075c0:	f7fa ff5c 	bl	800247c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	4413      	add	r3, r2
 80075ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075d0:	f7fa ff54 	bl	800247c <HAL_GetTick>
 80075d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075d6:	4b39      	ldr	r3, [pc, #228]	@ (80076bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	015b      	lsls	r3, r3, #5
 80075dc:	0d1b      	lsrs	r3, r3, #20
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075e6:	e054      	b.n	8007692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d050      	beq.n	8007692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075f0:	f7fa ff44 	bl	800247c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d902      	bls.n	8007606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d13d      	bne.n	8007682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800761e:	d111      	bne.n	8007644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007628:	d004      	beq.n	8007634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007632:	d107      	bne.n	8007644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800764c:	d10f      	bne.n	800766e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800766c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e017      	b.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3b01      	subs	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	429a      	cmp	r2, r3
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d19b      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000034 	.word	0x20000034

080076c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	@ 0x28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076d2:	f7fa fed3 	bl	800247c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	4413      	add	r3, r2
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80076e2:	f7fa fecb 	bl	800247c <HAL_GetTick>
 80076e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076f0:	4b3d      	ldr	r3, [pc, #244]	@ (80077e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	00da      	lsls	r2, r3, #3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	0d1b      	lsrs	r3, r3, #20
 8007700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007708:	e060      	b.n	80077cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007710:	d107      	bne.n	8007722 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007720:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d050      	beq.n	80077cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800772a:	f7fa fea7 	bl	800247c <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007736:	429a      	cmp	r2, r3
 8007738:	d902      	bls.n	8007740 <SPI_WaitFifoStateUntilTimeout+0x80>
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d13d      	bne.n	80077bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800774e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007758:	d111      	bne.n	800777e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007762:	d004      	beq.n	800776e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776c:	d107      	bne.n	800777e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800777c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007786:	d10f      	bne.n	80077a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e010      	b.n	80077de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4013      	ands	r3, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d196      	bne.n	800770a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3728      	adds	r7, #40	@ 0x28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000034 	.word	0x20000034

080077ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007800:	d111      	bne.n	8007826 <SPI_EndRxTransaction+0x3a>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800780a:	d004      	beq.n	8007816 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007814:	d107      	bne.n	8007826 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	@ 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff febd 	bl	80075b0 <SPI_WaitFlagStateUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007840:	f043 0220 	orr.w	r2, r3, #32
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e023      	b.n	8007894 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007854:	d11d      	bne.n	8007892 <SPI_EndRxTransaction+0xa6>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785e:	d004      	beq.n	800786a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007868:	d113      	bne.n	8007892 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff ff22 	bl	80076c0 <SPI_WaitFifoStateUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007886:	f043 0220 	orr.w	r2, r3, #32
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e000      	b.n	8007894 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff ff03 	bl	80076c0 <SPI_WaitFifoStateUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c4:	f043 0220 	orr.w	r2, r3, #32
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e027      	b.n	8007920 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	@ 0x80
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fe68 	bl	80075b0 <SPI_WaitFlagStateUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e014      	b.n	8007920 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff fedc 	bl	80076c0 <SPI_WaitFifoStateUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007912:	f043 0220 	orr.w	r2, r3, #32
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e000      	b.n	8007920 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e049      	b.n	80079ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f841 	bl	80079d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f000 f9e0 	bl	8007d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d001      	beq.n	8007a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e04f      	b.n	8007aa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a23      	ldr	r2, [pc, #140]	@ (8007ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d01d      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2e:	d018      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d013      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <HAL_TIM_Base_Start_IT+0xd0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <HAL_TIM_Base_Start_IT+0x76>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d115      	bne.n	8007a8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	4b17      	ldr	r3, [pc, #92]	@ (8007ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b06      	cmp	r3, #6
 8007a72:	d015      	beq.n	8007aa0 <HAL_TIM_Base_Start_IT+0xb4>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7a:	d011      	beq.n	8007aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8c:	e008      	b.n	8007aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e000      	b.n	8007aa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	00010007 	.word	0x00010007

08007acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d020      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0202 	mvn.w	r2, #2
 8007b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f8e9 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007b1c:	e005      	b.n	8007b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8db 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f8ec 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0204 	mvn.w	r2, #4
 8007b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8c3 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007b68:	e005      	b.n	8007b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f8b5 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8c6 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d020      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01b      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0208 	mvn.w	r2, #8
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f89d 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f88f 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8a0 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d020      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0210 	mvn.w	r2, #16
 8007be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2208      	movs	r2, #8
 8007bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f877 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007c00:	e005      	b.n	8007c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f869 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f87a 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0201 	mvn.w	r2, #1
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7f9 fd3c 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f913 	bl	8007e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f90b 	bl	8007ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00c      	beq.n	8007cae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f834 	bl	8007d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00c      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f06f 0220 	mvn.w	r2, #32
 8007cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f8d3 	bl	8007e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a46      	ldr	r2, [pc, #280]	@ (8007e58 <TIM_Base_SetConfig+0x12c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d4a:	d00f      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a43      	ldr	r2, [pc, #268]	@ (8007e5c <TIM_Base_SetConfig+0x130>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a42      	ldr	r2, [pc, #264]	@ (8007e60 <TIM_Base_SetConfig+0x134>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a41      	ldr	r2, [pc, #260]	@ (8007e64 <TIM_Base_SetConfig+0x138>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a40      	ldr	r2, [pc, #256]	@ (8007e68 <TIM_Base_SetConfig+0x13c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d108      	bne.n	8007d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <TIM_Base_SetConfig+0x12c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d01f      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8c:	d01b      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a32      	ldr	r2, [pc, #200]	@ (8007e5c <TIM_Base_SetConfig+0x130>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d017      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a31      	ldr	r2, [pc, #196]	@ (8007e60 <TIM_Base_SetConfig+0x134>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a30      	ldr	r2, [pc, #192]	@ (8007e64 <TIM_Base_SetConfig+0x138>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00f      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e68 <TIM_Base_SetConfig+0x13c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2e      	ldr	r2, [pc, #184]	@ (8007e6c <TIM_Base_SetConfig+0x140>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e70 <TIM_Base_SetConfig+0x144>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_Base_SetConfig+0x9a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e74 <TIM_Base_SetConfig+0x148>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d108      	bne.n	8007dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a16      	ldr	r2, [pc, #88]	@ (8007e58 <TIM_Base_SetConfig+0x12c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00f      	beq.n	8007e24 <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a18      	ldr	r2, [pc, #96]	@ (8007e68 <TIM_Base_SetConfig+0x13c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <TIM_Base_SetConfig+0xf8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a17      	ldr	r2, [pc, #92]	@ (8007e6c <TIM_Base_SetConfig+0x140>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_Base_SetConfig+0xf8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a16      	ldr	r2, [pc, #88]	@ (8007e70 <TIM_Base_SetConfig+0x144>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_Base_SetConfig+0xf8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a15      	ldr	r2, [pc, #84]	@ (8007e74 <TIM_Base_SetConfig+0x148>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d103      	bne.n	8007e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d105      	bne.n	8007e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f023 0201 	bic.w	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	611a      	str	r2, [r3, #16]
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40013400 	.word	0x40013400
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800

08007e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e040      	b.n	8007f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fa fa0e 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2224      	movs	r2, #36	@ 0x24
 8007ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fedc 	bl	8008cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc21 	bl	8008748 <UART_SetConfig>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e01b      	b.n	8007f48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 ff5b 	bl	8008dfc <UART_CheckIdleState>
 8007f46:	4603      	mov	r3, r0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d177      	bne.n	8008058 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_UART_Transmit+0x24>
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e070      	b.n	800805a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2221      	movs	r2, #33	@ 0x21
 8007f84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f86:	f7fa fa79 	bl	800247c <HAL_GetTick>
 8007f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	88fa      	ldrh	r2, [r7, #6]
 8007f90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	88fa      	ldrh	r2, [r7, #6]
 8007f98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa4:	d108      	bne.n	8007fb8 <HAL_UART_Transmit+0x68>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	e003      	b.n	8007fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fc0:	e02f      	b.n	8008022 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2180      	movs	r1, #128	@ 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 ffbd 	bl	8008f4c <UART_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e03b      	b.n	800805a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e007      	b.n	8008010 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3301      	adds	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1c9      	bne.n	8007fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	2140      	movs	r1, #64	@ 0x40
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 ff87 	bl	8008f4c <UART_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e005      	b.n	800805a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e000      	b.n	800805a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	@ 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008078:	2b20      	cmp	r3, #32
 800807a:	d137      	bne.n	80080ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_UART_Receive_IT+0x24>
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e030      	b.n	80080ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a18      	ldr	r2, [pc, #96]	@ (80080f8 <HAL_UART_Receive_IT+0x94>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d01f      	beq.n	80080dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d018      	beq.n	80080dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	613b      	str	r3, [r7, #16]
   return(result);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	623b      	str	r3, [r7, #32]
 80080ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e6      	bne.n	80080aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	461a      	mov	r2, r3
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 ffa0 	bl	8009028 <UART_Start_Receive_IT>
 80080e8:	4603      	mov	r3, r0
 80080ea:	e000      	b.n	80080ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080ec:	2302      	movs	r3, #2
  }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	@ 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40008000 	.word	0x40008000

080080fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b0ba      	sub	sp, #232	@ 0xe8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008126:	f640 030f 	movw	r3, #2063	@ 0x80f
 800812a:	4013      	ands	r3, r2
 800812c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d115      	bne.n	8008164 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 82ca 	beq.w	80086ee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
      }
      return;
 8008162:	e2c4      	b.n	80086ee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8117 	beq.w	800839c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800816e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800817a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800817e:	4b85      	ldr	r3, [pc, #532]	@ (8008394 <HAL_UART_IRQHandler+0x298>)
 8008180:	4013      	ands	r3, r2
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 810a 	beq.w	800839c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d011      	beq.n	80081b8 <HAL_UART_IRQHandler+0xbc>
 8008194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ae:	f043 0201 	orr.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d011      	beq.n	80081e8 <HAL_UART_IRQHandler+0xec>
 80081c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2202      	movs	r2, #2
 80081d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081de:	f043 0204 	orr.w	r2, r3, #4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d011      	beq.n	8008218 <HAL_UART_IRQHandler+0x11c>
 80081f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2204      	movs	r2, #4
 8008206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800820e:	f043 0202 	orr.w	r2, r3, #2
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d017      	beq.n	8008254 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008234:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2208      	movs	r2, #8
 8008242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800824a:	f043 0208 	orr.w	r2, r3, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800825c:	2b00      	cmp	r3, #0
 800825e:	d012      	beq.n	8008286 <HAL_UART_IRQHandler+0x18a>
 8008260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008264:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00c      	beq.n	8008286 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8230 	beq.w	80086f2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00d      	beq.n	80082ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800829e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ce:	2b40      	cmp	r3, #64	@ 0x40
 80082d0:	d005      	beq.n	80082de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d04f      	beq.n	800837e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 ff68 	bl	80091b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b40      	cmp	r3, #64	@ 0x40
 80082f0:	d141      	bne.n	8008376 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800830c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800831e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800832a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1d9      	bne.n	80082f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008342:	2b00      	cmp	r3, #0
 8008344:	d013      	beq.n	800836e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800834a:	4a13      	ldr	r2, [pc, #76]	@ (8008398 <HAL_UART_IRQHandler+0x29c>)
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008352:	4618      	mov	r0, r3
 8008354:	f7fa fad6 	bl	8002904 <HAL_DMA_Abort_IT>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d017      	beq.n	800838e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00f      	b.n	800838e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9d4 	bl	800871c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e00b      	b.n	800838e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9d0 	bl	800871c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e007      	b.n	800838e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9cc 	bl	800871c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800838c:	e1b1      	b.n	80086f2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838e:	bf00      	nop
    return;
 8008390:	e1af      	b.n	80086f2 <HAL_UART_IRQHandler+0x5f6>
 8008392:	bf00      	nop
 8008394:	04000120 	.word	0x04000120
 8008398:	0800927d 	.word	0x0800927d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	f040 816a 	bne.w	800867a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 8163 	beq.w	800867a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 815c 	beq.w	800867a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2210      	movs	r2, #16
 80083c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	f040 80d4 	bne.w	8008582 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80ad 	beq.w	800854a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083fa:	429a      	cmp	r2, r3
 80083fc:	f080 80a5 	bcs.w	800854a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008406:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 8086 	bne.w	8008528 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800844a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1da      	bne.n	800841c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800848a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800848e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800849c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e1      	bne.n	8008466 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e3      	bne.n	80084a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800850a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800850c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e4      	bne.n	80084e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008522:	4618      	mov	r0, r3
 8008524:	f7fa f9b0 	bl	8002888 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800853a:	b29b      	uxth	r3, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	b29b      	uxth	r3, r3
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8f4 	bl	8008730 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008548:	e0d5      	b.n	80086f6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008554:	429a      	cmp	r2, r3
 8008556:	f040 80ce 	bne.w	80086f6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b20      	cmp	r3, #32
 8008568:	f040 80c5 	bne.w	80086f6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8d8 	bl	8008730 <HAL_UARTEx_RxEventCallback>
      return;
 8008580:	e0b9      	b.n	80086f6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800858e:	b29b      	uxth	r3, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 80ab 	beq.w	80086fa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80085a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80a6 	beq.w	80086fa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e4      	bne.n	80085ae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	623b      	str	r3, [r7, #32]
   return(result);
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	f023 0301 	bic.w	r3, r3, #1
 80085fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008608:	633a      	str	r2, [r7, #48]	@ 0x30
 800860a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800860e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e3      	bne.n	80085e4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	60fb      	str	r3, [r7, #12]
   return(result);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f023 0310 	bic.w	r3, r3, #16
 8008644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	69b9      	ldr	r1, [r7, #24]
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	617b      	str	r3, [r7, #20]
   return(result);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e4      	bne.n	8008630 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2202      	movs	r2, #2
 800866a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800866c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f85c 	bl	8008730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008678:	e03f      	b.n	80086fa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800867a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <HAL_UART_IRQHandler+0x5a8>
 8008686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800868a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d008      	beq.n	80086a4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800869a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 ffe9 	bl	8009674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a2:	e02d      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01c      	beq.n	80086fe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
    }
    return;
 80086cc:	e017      	b.n	80086fe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d012      	beq.n	8008700 <HAL_UART_IRQHandler+0x604>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fdde 	bl	80092a8 <UART_EndTransmit_IT>
    return;
 80086ec:	e008      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
      return;
 80086ee:	bf00      	nop
 80086f0:	e006      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
    return;
 80086f2:	bf00      	nop
 80086f4:	e004      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
      return;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
      return;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <HAL_UART_IRQHandler+0x604>
    return;
 80086fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008700:	37e8      	adds	r7, #232	@ 0xe8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800874c:	b08a      	sub	sp, #40	@ 0x28
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	431a      	orrs	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	431a      	orrs	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	4313      	orrs	r3, r2
 800876e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4ba4      	ldr	r3, [pc, #656]	@ (8008a08 <UART_SetConfig+0x2c0>)
 8008778:	4013      	ands	r3, r2
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	6812      	ldr	r2, [r2, #0]
 800877e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008780:	430b      	orrs	r3, r1
 8008782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a99      	ldr	r2, [pc, #612]	@ (8008a0c <UART_SetConfig+0x2c4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b0:	4313      	orrs	r3, r2
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087c4:	430a      	orrs	r2, r1
 80087c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a90      	ldr	r2, [pc, #576]	@ (8008a10 <UART_SetConfig+0x2c8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d126      	bne.n	8008820 <UART_SetConfig+0xd8>
 80087d2:	4b90      	ldr	r3, [pc, #576]	@ (8008a14 <UART_SetConfig+0x2cc>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d81b      	bhi.n	8008818 <UART_SetConfig+0xd0>
 80087e0:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <UART_SetConfig+0xa0>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	08008809 	.word	0x08008809
 80087f0:	08008801 	.word	0x08008801
 80087f4:	08008811 	.word	0x08008811
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fe:	e116      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008806:	e112      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880e:	e10e      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008816:	e10a      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800881e:	e106      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a7c      	ldr	r2, [pc, #496]	@ (8008a18 <UART_SetConfig+0x2d0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d138      	bne.n	800889c <UART_SetConfig+0x154>
 800882a:	4b7a      	ldr	r3, [pc, #488]	@ (8008a14 <UART_SetConfig+0x2cc>)
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008830:	f003 030c 	and.w	r3, r3, #12
 8008834:	2b0c      	cmp	r3, #12
 8008836:	d82d      	bhi.n	8008894 <UART_SetConfig+0x14c>
 8008838:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <UART_SetConfig+0xf8>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008875 	.word	0x08008875
 8008844:	08008895 	.word	0x08008895
 8008848:	08008895 	.word	0x08008895
 800884c:	08008895 	.word	0x08008895
 8008850:	08008885 	.word	0x08008885
 8008854:	08008895 	.word	0x08008895
 8008858:	08008895 	.word	0x08008895
 800885c:	08008895 	.word	0x08008895
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008895 	.word	0x08008895
 8008868:	08008895 	.word	0x08008895
 800886c:	08008895 	.word	0x08008895
 8008870:	0800888d 	.word	0x0800888d
 8008874:	2300      	movs	r3, #0
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800887a:	e0d8      	b.n	8008a2e <UART_SetConfig+0x2e6>
 800887c:	2302      	movs	r3, #2
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008882:	e0d4      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008884:	2304      	movs	r3, #4
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800888a:	e0d0      	b.n	8008a2e <UART_SetConfig+0x2e6>
 800888c:	2308      	movs	r3, #8
 800888e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008892:	e0cc      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008894:	2310      	movs	r3, #16
 8008896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800889a:	e0c8      	b.n	8008a2e <UART_SetConfig+0x2e6>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a5e      	ldr	r2, [pc, #376]	@ (8008a1c <UART_SetConfig+0x2d4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d125      	bne.n	80088f2 <UART_SetConfig+0x1aa>
 80088a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008a14 <UART_SetConfig+0x2cc>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088b0:	2b30      	cmp	r3, #48	@ 0x30
 80088b2:	d016      	beq.n	80088e2 <UART_SetConfig+0x19a>
 80088b4:	2b30      	cmp	r3, #48	@ 0x30
 80088b6:	d818      	bhi.n	80088ea <UART_SetConfig+0x1a2>
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d00a      	beq.n	80088d2 <UART_SetConfig+0x18a>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d814      	bhi.n	80088ea <UART_SetConfig+0x1a2>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <UART_SetConfig+0x182>
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d008      	beq.n	80088da <UART_SetConfig+0x192>
 80088c8:	e00f      	b.n	80088ea <UART_SetConfig+0x1a2>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d0:	e0ad      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80088d2:	2302      	movs	r3, #2
 80088d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d8:	e0a9      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80088da:	2304      	movs	r3, #4
 80088dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e0:	e0a5      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80088e2:	2308      	movs	r3, #8
 80088e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e8:	e0a1      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80088ea:	2310      	movs	r3, #16
 80088ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088f0:	e09d      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008a20 <UART_SetConfig+0x2d8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d125      	bne.n	8008948 <UART_SetConfig+0x200>
 80088fc:	4b45      	ldr	r3, [pc, #276]	@ (8008a14 <UART_SetConfig+0x2cc>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008902:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008906:	2bc0      	cmp	r3, #192	@ 0xc0
 8008908:	d016      	beq.n	8008938 <UART_SetConfig+0x1f0>
 800890a:	2bc0      	cmp	r3, #192	@ 0xc0
 800890c:	d818      	bhi.n	8008940 <UART_SetConfig+0x1f8>
 800890e:	2b80      	cmp	r3, #128	@ 0x80
 8008910:	d00a      	beq.n	8008928 <UART_SetConfig+0x1e0>
 8008912:	2b80      	cmp	r3, #128	@ 0x80
 8008914:	d814      	bhi.n	8008940 <UART_SetConfig+0x1f8>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <UART_SetConfig+0x1d8>
 800891a:	2b40      	cmp	r3, #64	@ 0x40
 800891c:	d008      	beq.n	8008930 <UART_SetConfig+0x1e8>
 800891e:	e00f      	b.n	8008940 <UART_SetConfig+0x1f8>
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008926:	e082      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008928:	2302      	movs	r3, #2
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800892e:	e07e      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008930:	2304      	movs	r3, #4
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008936:	e07a      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008938:	2308      	movs	r3, #8
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800893e:	e076      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008940:	2310      	movs	r3, #16
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008946:	e072      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a35      	ldr	r2, [pc, #212]	@ (8008a24 <UART_SetConfig+0x2dc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d12a      	bne.n	80089a8 <UART_SetConfig+0x260>
 8008952:	4b30      	ldr	r3, [pc, #192]	@ (8008a14 <UART_SetConfig+0x2cc>)
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800895c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008960:	d01a      	beq.n	8008998 <UART_SetConfig+0x250>
 8008962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008966:	d81b      	bhi.n	80089a0 <UART_SetConfig+0x258>
 8008968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800896c:	d00c      	beq.n	8008988 <UART_SetConfig+0x240>
 800896e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008972:	d815      	bhi.n	80089a0 <UART_SetConfig+0x258>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <UART_SetConfig+0x238>
 8008978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897c:	d008      	beq.n	8008990 <UART_SetConfig+0x248>
 800897e:	e00f      	b.n	80089a0 <UART_SetConfig+0x258>
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008986:	e052      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008988:	2302      	movs	r3, #2
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800898e:	e04e      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008996:	e04a      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800899e:	e046      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a6:	e042      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a17      	ldr	r2, [pc, #92]	@ (8008a0c <UART_SetConfig+0x2c4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d13a      	bne.n	8008a28 <UART_SetConfig+0x2e0>
 80089b2:	4b18      	ldr	r3, [pc, #96]	@ (8008a14 <UART_SetConfig+0x2cc>)
 80089b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80089bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089c0:	d01a      	beq.n	80089f8 <UART_SetConfig+0x2b0>
 80089c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089c6:	d81b      	bhi.n	8008a00 <UART_SetConfig+0x2b8>
 80089c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089cc:	d00c      	beq.n	80089e8 <UART_SetConfig+0x2a0>
 80089ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d2:	d815      	bhi.n	8008a00 <UART_SetConfig+0x2b8>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <UART_SetConfig+0x298>
 80089d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089dc:	d008      	beq.n	80089f0 <UART_SetConfig+0x2a8>
 80089de:	e00f      	b.n	8008a00 <UART_SetConfig+0x2b8>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089e6:	e022      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80089e8:	2302      	movs	r3, #2
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ee:	e01e      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80089f0:	2304      	movs	r3, #4
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089f6:	e01a      	b.n	8008a2e <UART_SetConfig+0x2e6>
 80089f8:	2308      	movs	r3, #8
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089fe:	e016      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008a00:	2310      	movs	r3, #16
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a06:	e012      	b.n	8008a2e <UART_SetConfig+0x2e6>
 8008a08:	efff69f3 	.word	0xefff69f3
 8008a0c:	40008000 	.word	0x40008000
 8008a10:	40013800 	.word	0x40013800
 8008a14:	40021000 	.word	0x40021000
 8008a18:	40004400 	.word	0x40004400
 8008a1c:	40004800 	.word	0x40004800
 8008a20:	40004c00 	.word	0x40004c00
 8008a24:	40005000 	.word	0x40005000
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a9f      	ldr	r2, [pc, #636]	@ (8008cb0 <UART_SetConfig+0x568>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d17a      	bne.n	8008b2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d824      	bhi.n	8008a8a <UART_SetConfig+0x342>
 8008a40:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <UART_SetConfig+0x300>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a8b 	.word	0x08008a8b
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a8b 	.word	0x08008a8b
 8008a58:	08008a7b 	.word	0x08008a7b
 8008a5c:	08008a8b 	.word	0x08008a8b
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a8b 	.word	0x08008a8b
 8008a68:	08008a83 	.word	0x08008a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fb fcba 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61f8      	str	r0, [r7, #28]
        break;
 8008a72:	e010      	b.n	8008a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a74:	4b8f      	ldr	r3, [pc, #572]	@ (8008cb4 <UART_SetConfig+0x56c>)
 8008a76:	61fb      	str	r3, [r7, #28]
        break;
 8008a78:	e00d      	b.n	8008a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a7a:	f7fb fc1b 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8008a7e:	61f8      	str	r0, [r7, #28]
        break;
 8008a80:	e009      	b.n	8008a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a86:	61fb      	str	r3, [r7, #28]
        break;
 8008a88:	e005      	b.n	8008a96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80fb 	beq.w	8008c94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	4413      	add	r3, r2
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d305      	bcc.n	8008aba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d903      	bls.n	8008ac2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ac0:	e0e8      	b.n	8008c94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	4615      	mov	r5, r2
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	022b      	lsls	r3, r5, #8
 8008ad4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ad8:	0222      	lsls	r2, r4, #8
 8008ada:	68f9      	ldr	r1, [r7, #12]
 8008adc:	6849      	ldr	r1, [r1, #4]
 8008ade:	0849      	lsrs	r1, r1, #1
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4688      	mov	r8, r1
 8008ae4:	4681      	mov	r9, r0
 8008ae6:	eb12 0a08 	adds.w	sl, r2, r8
 8008aea:	eb43 0b09 	adc.w	fp, r3, r9
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f7 ffa4 	bl	8000a4c <__aeabi_uldivmod>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4613      	mov	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b12:	d308      	bcc.n	8008b26 <UART_SetConfig+0x3de>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b1a:	d204      	bcs.n	8008b26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	e0b6      	b.n	8008c94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b2c:	e0b2      	b.n	8008c94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b36:	d15e      	bne.n	8008bf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008b38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d828      	bhi.n	8008b92 <UART_SetConfig+0x44a>
 8008b40:	a201      	add	r2, pc, #4	@ (adr r2, 8008b48 <UART_SetConfig+0x400>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	08008b93 	.word	0x08008b93
 8008b58:	08008b83 	.word	0x08008b83
 8008b5c:	08008b93 	.word	0x08008b93
 8008b60:	08008b93 	.word	0x08008b93
 8008b64:	08008b93 	.word	0x08008b93
 8008b68:	08008b8b 	.word	0x08008b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b6c:	f7fb fc3a 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8008b70:	61f8      	str	r0, [r7, #28]
        break;
 8008b72:	e014      	b.n	8008b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b74:	f7fb fc4c 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8008b78:	61f8      	str	r0, [r7, #28]
        break;
 8008b7a:	e010      	b.n	8008b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008cb4 <UART_SetConfig+0x56c>)
 8008b7e:	61fb      	str	r3, [r7, #28]
        break;
 8008b80:	e00d      	b.n	8008b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b82:	f7fb fb97 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8008b86:	61f8      	str	r0, [r7, #28]
        break;
 8008b88:	e009      	b.n	8008b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b8e:	61fb      	str	r3, [r7, #28]
        break;
 8008b90:	e005      	b.n	8008b9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d077      	beq.n	8008c94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	005a      	lsls	r2, r3, #1
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	441a      	add	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b0f      	cmp	r3, #15
 8008bbe:	d916      	bls.n	8008bee <UART_SetConfig+0x4a6>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc6:	d212      	bcs.n	8008bee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f023 030f 	bic.w	r3, r3, #15
 8008bd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	8afb      	ldrh	r3, [r7, #22]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	8afa      	ldrh	r2, [r7, #22]
 8008bea:	60da      	str	r2, [r3, #12]
 8008bec:	e052      	b.n	8008c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bf4:	e04e      	b.n	8008c94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d827      	bhi.n	8008c4e <UART_SetConfig+0x506>
 8008bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <UART_SetConfig+0x4bc>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	08008c4f 	.word	0x08008c4f
 8008c14:	08008c3f 	.word	0x08008c3f
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c4f 	.word	0x08008c4f
 8008c20:	08008c4f 	.word	0x08008c4f
 8008c24:	08008c47 	.word	0x08008c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c28:	f7fb fbdc 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8008c2c:	61f8      	str	r0, [r7, #28]
        break;
 8008c2e:	e014      	b.n	8008c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c30:	f7fb fbee 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8008c34:	61f8      	str	r0, [r7, #28]
        break;
 8008c36:	e010      	b.n	8008c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c38:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb4 <UART_SetConfig+0x56c>)
 8008c3a:	61fb      	str	r3, [r7, #28]
        break;
 8008c3c:	e00d      	b.n	8008c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3e:	f7fb fb39 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8008c42:	61f8      	str	r0, [r7, #28]
        break;
 8008c44:	e009      	b.n	8008c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c4a:	61fb      	str	r3, [r7, #28]
        break;
 8008c4c:	e005      	b.n	8008c5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008c58:	bf00      	nop
    }

    if (pclk != 0U)
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d019      	beq.n	8008c94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	085a      	lsrs	r2, r3, #1
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d909      	bls.n	8008c8e <UART_SetConfig+0x546>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c80:	d205      	bcs.n	8008c8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60da      	str	r2, [r3, #12]
 8008c8c:	e002      	b.n	8008c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008ca0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3728      	adds	r7, #40	@ 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cae:	bf00      	nop
 8008cb0:	40008000 	.word	0x40008000
 8008cb4:	00f42400 	.word	0x00f42400

08008cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00a      	beq.n	8008d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00a      	beq.n	8008d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01a      	beq.n	8008dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008db6:	d10a      	bne.n	8008dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  }
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b098      	sub	sp, #96	@ 0x60
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e0c:	f7f9 fb36 	bl	800247c <HAL_GetTick>
 8008e10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d12e      	bne.n	8008e7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f88c 	bl	8008f4c <UART_WaitOnFlagUntilTimeout>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d021      	beq.n	8008e7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e062      	b.n	8008f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	d149      	bne.n	8008f20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e94:	2200      	movs	r2, #0
 8008e96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f856 	bl	8008f4c <UART_WaitOnFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d03c      	beq.n	8008f20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ef8:	61fa      	str	r2, [r7, #28]
 8008efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69b9      	ldr	r1, [r7, #24]
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	617b      	str	r3, [r7, #20]
   return(result);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e5      	bne.n	8008ed8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e011      	b.n	8008f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3758      	adds	r7, #88	@ 0x58
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f5c:	e04f      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d04b      	beq.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f66:	f7f9 fa89 	bl	800247c <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d302      	bcc.n	8008f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e04e      	b.n	800901e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d037      	beq.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b80      	cmp	r3, #128	@ 0x80
 8008f92:	d034      	beq.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d031      	beq.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d110      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2208      	movs	r2, #8
 8008fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f8ff 	bl	80091b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2208      	movs	r2, #8
 8008fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e029      	b.n	800901e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fd8:	d111      	bne.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f8e5 	bl	80091b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e00f      	b.n	800901e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4013      	ands	r3, r2
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	bf0c      	ite	eq
 800900e:	2301      	moveq	r3, #1
 8009010:	2300      	movne	r3, #0
 8009012:	b2db      	uxtb	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	429a      	cmp	r2, r3
 800901a:	d0a0      	beq.n	8008f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009028:	b480      	push	{r7}
 800902a:	b097      	sub	sp, #92	@ 0x5c
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	88fa      	ldrh	r2, [r7, #6]
 8009040:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	88fa      	ldrh	r2, [r7, #6]
 8009048:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d10e      	bne.n	800907a <UART_Start_Receive_IT+0x52>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <UART_Start_Receive_IT+0x48>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800906a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800906e:	e02d      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	22ff      	movs	r2, #255	@ 0xff
 8009074:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009078:	e028      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10d      	bne.n	800909e <UART_Start_Receive_IT+0x76>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <UART_Start_Receive_IT+0x6c>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	22ff      	movs	r2, #255	@ 0xff
 800908e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009092:	e01b      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	227f      	movs	r2, #127	@ 0x7f
 8009098:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800909c:	e016      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090a6:	d10d      	bne.n	80090c4 <UART_Start_Receive_IT+0x9c>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <UART_Start_Receive_IT+0x92>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	227f      	movs	r2, #127	@ 0x7f
 80090b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80090b8:	e008      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	223f      	movs	r2, #63	@ 0x3f
 80090be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80090c2:	e003      	b.n	80090cc <UART_Start_Receive_IT+0xa4>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2222      	movs	r2, #34	@ 0x22
 80090d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3308      	adds	r3, #8
 80090fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80090fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800910a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e5      	bne.n	80090dc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009118:	d107      	bne.n	800912a <UART_Start_Receive_IT+0x102>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d103      	bne.n	800912a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4a21      	ldr	r2, [pc, #132]	@ (80091ac <UART_Start_Receive_IT+0x184>)
 8009126:	669a      	str	r2, [r3, #104]	@ 0x68
 8009128:	e002      	b.n	8009130 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4a20      	ldr	r2, [pc, #128]	@ (80091b0 <UART_Start_Receive_IT+0x188>)
 800912e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d019      	beq.n	800916c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800914c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
 8009158:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800915c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e6      	bne.n	8009138 <UART_Start_Receive_IT+0x110>
 800916a:	e018      	b.n	800919e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	613b      	str	r3, [r7, #16]
   return(result);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f043 0320 	orr.w	r3, r3, #32
 8009180:	653b      	str	r3, [r7, #80]	@ 0x50
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918a:	623b      	str	r3, [r7, #32]
 800918c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	69f9      	ldr	r1, [r7, #28]
 8009190:	6a3a      	ldr	r2, [r7, #32]
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	61bb      	str	r3, [r7, #24]
   return(result);
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	375c      	adds	r7, #92	@ 0x5c
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	080094b9 	.word	0x080094b9
 80091b0:	080092fd 	.word	0x080092fd

080091b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b095      	sub	sp, #84	@ 0x54
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091da:	643b      	str	r3, [r7, #64]	@ 0x40
 80091dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800920e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009226:	2b01      	cmp	r3, #1
 8009228:	d118      	bne.n	800925c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	60bb      	str	r3, [r7, #8]
   return(result);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f023 0310 	bic.w	r3, r3, #16
 800923e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009248:	61bb      	str	r3, [r7, #24]
 800924a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6979      	ldr	r1, [r7, #20]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	613b      	str	r3, [r7, #16]
   return(result);
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e6      	bne.n	800922a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009270:	bf00      	nop
 8009272:	3754      	adds	r7, #84	@ 0x54
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7ff fa3e 	bl	800871c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	613b      	str	r3, [r7, #16]
   return(result);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e6      	bne.n	80092b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fa0a 	bl	8008708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092f4:	bf00      	nop
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b09c      	sub	sp, #112	@ 0x70
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800930a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009314:	2b22      	cmp	r3, #34	@ 0x22
 8009316:	f040 80be 	bne.w	8009496 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009320:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009324:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800932e:	b2da      	uxtb	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009334:	400a      	ands	r2, r1
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 80a3 	bne.w	80094aa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009384:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e6      	bne.n	8009364 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80093b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e5      	bne.n	8009396 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a34      	ldr	r2, [pc, #208]	@ (80094b4 <UART_RxISR_8BIT+0x1b8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d01f      	beq.n	8009428 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d018      	beq.n	8009428 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	623b      	str	r3, [r7, #32]
   return(result);
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800940a:	663b      	str	r3, [r7, #96]	@ 0x60
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009414:	633b      	str	r3, [r7, #48]	@ 0x30
 8009416:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800941a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800942c:	2b01      	cmp	r3, #1
 800942e:	d12e      	bne.n	800948e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	60fb      	str	r3, [r7, #12]
   return(result);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0310 	bic.w	r3, r3, #16
 800944a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	617b      	str	r3, [r7, #20]
   return(result);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b10      	cmp	r3, #16
 8009474:	d103      	bne.n	800947e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2210      	movs	r2, #16
 800947c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff f952 	bl	8008730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800948c:	e00d      	b.n	80094aa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7f8 fc96 	bl	8001dc0 <HAL_UART_RxCpltCallback>
}
 8009494:	e009      	b.n	80094aa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	8b1b      	ldrh	r3, [r3, #24]
 800949c:	b29a      	uxth	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0208 	orr.w	r2, r2, #8
 80094a6:	b292      	uxth	r2, r2
 80094a8:	831a      	strh	r2, [r3, #24]
}
 80094aa:	bf00      	nop
 80094ac:	3770      	adds	r7, #112	@ 0x70
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40008000 	.word	0x40008000

080094b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b09c      	sub	sp, #112	@ 0x70
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d0:	2b22      	cmp	r3, #34	@ 0x22
 80094d2:	f040 80be 	bne.w	8009652 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80094dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80094e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80094ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094ee:	4013      	ands	r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	1c9a      	adds	r2, r3, #2
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	f040 80a3 	bne.w	8009666 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800952e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009534:	667b      	str	r3, [r7, #100]	@ 0x64
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800953e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009540:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009544:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800954c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	f023 0301 	bic.w	r3, r3, #1
 8009568:	663b      	str	r3, [r7, #96]	@ 0x60
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009572:	643a      	str	r2, [r7, #64]	@ 0x40
 8009574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009578:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e5      	bne.n	8009552 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a34      	ldr	r2, [pc, #208]	@ (8009670 <UART_RxISR_16BIT+0x1b8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01f      	beq.n	80095e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d018      	beq.n	80095e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d12e      	bne.n	800964a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f023 0310 	bic.w	r3, r3, #16
 8009606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009610:	61bb      	str	r3, [r7, #24]
 8009612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6979      	ldr	r1, [r7, #20]
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	613b      	str	r3, [r7, #16]
   return(result);
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e6      	bne.n	80095f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f003 0310 	and.w	r3, r3, #16
 800962e:	2b10      	cmp	r3, #16
 8009630:	d103      	bne.n	800963a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2210      	movs	r2, #16
 8009638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff f874 	bl	8008730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009648:	e00d      	b.n	8009666 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7f8 fbb8 	bl	8001dc0 <HAL_UART_RxCpltCallback>
}
 8009650:	e009      	b.n	8009666 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	8b1b      	ldrh	r3, [r3, #24]
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0208 	orr.w	r2, r2, #8
 8009662:	b292      	uxth	r2, r2
 8009664:	831a      	strh	r2, [r3, #24]
}
 8009666:	bf00      	nop
 8009668:	3770      	adds	r7, #112	@ 0x70
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40008000 	.word	0x40008000

08009674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800969a:	2b84      	cmp	r3, #132	@ 0x84
 800969c:	d005      	beq.n	80096aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800969e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	3303      	adds	r3, #3
 80096a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80096bc:	f000 fde2 	bl	800a284 <vTaskStartScheduler>
  
  return osOK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80096c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c8:	b089      	sub	sp, #36	@ 0x24
 80096ca:	af04      	add	r7, sp, #16
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d020      	beq.n	800971a <osThreadCreate+0x54>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01c      	beq.n	800971a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685c      	ldr	r4, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691e      	ldr	r6, [r3, #16]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff ffc8 	bl	8009688 <makeFreeRtosPriority>
 80096f8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009702:	9202      	str	r2, [sp, #8]
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	9100      	str	r1, [sp, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4632      	mov	r2, r6
 800970c:	4629      	mov	r1, r5
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fbd2 	bl	8009eb8 <xTaskCreateStatic>
 8009714:	4603      	mov	r3, r0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e01c      	b.n	8009754 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685c      	ldr	r4, [r3, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009726:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ffaa 	bl	8009688 <makeFreeRtosPriority>
 8009734:	4602      	mov	r2, r0
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	9200      	str	r2, [sp, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	4632      	mov	r2, r6
 8009742:	4629      	mov	r1, r5
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fc17 	bl	8009f78 <xTaskCreate>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d001      	beq.n	8009754 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	e000      	b.n	8009756 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009754:	68fb      	ldr	r3, [r7, #12]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800975e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <osDelay+0x16>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	e000      	b.n	8009776 <osDelay+0x18>
 8009774:	2301      	movs	r3, #1
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fd4e 	bl	800a218 <vTaskDelay>
  
  return osOK;
 800977c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f103 0208 	add.w	r2, r3, #8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f103 0208 	add.w	r2, r3, #8
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f103 0208 	add.w	r2, r3, #8
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	601a      	str	r2, [r3, #0]
}
 800981c:	bf00      	nop
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d103      	bne.n	8009848 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	e00c      	b.n	8009862 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3308      	adds	r3, #8
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	e002      	b.n	8009856 <vListInsert+0x2e>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	429a      	cmp	r2, r3
 8009860:	d2f6      	bcs.n	8009850 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	601a      	str	r2, [r3, #0]
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6892      	ldr	r2, [r2, #8]
 80098b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6852      	ldr	r2, [r2, #4]
 80098ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d103      	bne.n	80098ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	1e5a      	subs	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
	...

080098f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10b      	bne.n	800991c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	e7fd      	b.n	8009918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800991c:	f001 fba4 	bl	800b068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800992c:	fb01 f303 	mul.w	r3, r1, r3
 8009930:	441a      	add	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994c:	3b01      	subs	r3, #1
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	441a      	add	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	22ff      	movs	r2, #255	@ 0xff
 8009960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	22ff      	movs	r2, #255	@ 0xff
 8009968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d114      	bne.n	800999c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01a      	beq.n	80099b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3310      	adds	r3, #16
 800997e:	4618      	mov	r0, r3
 8009980:	f000 feda 	bl	800a738 <xTaskRemoveFromEventList>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d012      	beq.n	80099b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <xQueueGenericReset+0xd0>)
 800998c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	e009      	b.n	80099b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3310      	adds	r3, #16
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fef0 	bl	8009786 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3324      	adds	r3, #36	@ 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff feeb 	bl	8009786 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099b0:	f001 fb8c 	bl	800b0cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099b4:	2301      	movs	r3, #1
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	@ 0x28
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10b      	bne.n	80099f0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	613b      	str	r3, [r7, #16]
}
 80099ea:	bf00      	nop
 80099ec:	bf00      	nop
 80099ee:	e7fd      	b.n	80099ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	fb02 f303 	mul.w	r3, r2, r3
 80099f8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	3348      	adds	r3, #72	@ 0x48
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 fc54 	bl	800b2ac <pvPortMalloc>
 8009a04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d011      	beq.n	8009a30 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3348      	adds	r3, #72	@ 0x48
 8009a14:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a1e:	79fa      	ldrb	r2, [r7, #7]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 f805 	bl	8009a3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a30:	69bb      	ldr	r3, [r7, #24]
	}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d103      	bne.n	8009a56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e002      	b.n	8009a5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a68:	2101      	movs	r1, #1
 8009a6a:	69b8      	ldr	r0, [r7, #24]
 8009a6c:	f7ff ff40 	bl	80098f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08e      	sub	sp, #56	@ 0x38
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10b      	bne.n	8009aa4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	623b      	str	r3, [r7, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	e7fd      	b.n	8009aa0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <xQueueGiveFromISR+0x5c>
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <xQueueGiveFromISR+0x60>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <xQueueGiveFromISR+0x62>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10b      	bne.n	8009af6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	61bb      	str	r3, [r7, #24]
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af6:	f001 fb97 	bl	800b228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009afa:	f3ef 8211 	mrs	r2, BASEPRI
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	617a      	str	r2, [r7, #20]
 8009b10:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d22b      	bcs.n	8009b7e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d112      	bne.n	8009b68 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	3324      	adds	r3, #36	@ 0x24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fdf2 	bl	800a738 <xTaskRemoveFromEventList>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00e      	beq.n	8009b78 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	b25a      	sxtb	r2, r3
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7c:	e001      	b.n	8009b82 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3738      	adds	r7, #56	@ 0x38
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	@ 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	623b      	str	r3, [r7, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	e7fd      	b.n	8009bc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00b      	beq.n	8009bec <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	61fb      	str	r3, [r7, #28]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bec:	f000 ff6a 	bl	800aac4 <xTaskGetSchedulerState>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <xQueueSemaphoreTake+0x64>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueSemaphoreTake+0x68>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueSemaphoreTake+0x6a>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	61bb      	str	r3, [r7, #24]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c1e:	f001 fa23 	bl	800b068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d024      	beq.n	8009c78 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	1e5a      	subs	r2, r3, #1
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d104      	bne.n	8009c48 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c3e:	f001 f865 	bl	800ad0c <pvTaskIncrementMutexHeldCount>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00f      	beq.n	8009c70 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	3310      	adds	r3, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd6f 	bl	800a738 <xTaskRemoveFromEventList>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d007      	beq.n	8009c70 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c60:	4b54      	ldr	r3, [pc, #336]	@ (8009db4 <xQueueSemaphoreTake+0x21c>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c70:	f001 fa2c 	bl	800b0cc <vPortExitCritical>
				return pdPASS;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e098      	b.n	8009daa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d112      	bne.n	8009ca4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	617b      	str	r3, [r7, #20]
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	e7fd      	b.n	8009c98 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c9c:	f001 fa16 	bl	800b0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e082      	b.n	8009daa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fda6 	bl	800a800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cb8:	f001 fa08 	bl	800b0cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cbc:	f000 fb4c 	bl	800a358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cc0:	f001 f9d2 	bl	800b068 <vPortEnterCritical>
 8009cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cca:	b25b      	sxtb	r3, r3
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d103      	bne.n	8009cda <xQueueSemaphoreTake+0x142>
 8009cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ce0:	b25b      	sxtb	r3, r3
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	d103      	bne.n	8009cf0 <xQueueSemaphoreTake+0x158>
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cf0:	f001 f9ec 	bl	800b0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cf4:	463a      	mov	r2, r7
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fd95 	bl	800a82c <xTaskCheckForTimeOut>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d132      	bne.n	8009d6e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d0a:	f000 f8bf 	bl	8009e8c <prvIsQueueEmpty>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d026      	beq.n	8009d62 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009d1c:	f001 f9a4 	bl	800b068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 feeb 	bl	800ab00 <xTaskPriorityInherit>
 8009d2a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009d2c:	f001 f9ce 	bl	800b0cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d32:	3324      	adds	r3, #36	@ 0x24
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fcd7 	bl	800a6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d40:	f000 f852 	bl	8009de8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d44:	f000 fb16 	bl	800a374 <xTaskResumeAll>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f47f af67 	bne.w	8009c1e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009d50:	4b18      	ldr	r3, [pc, #96]	@ (8009db4 <xQueueSemaphoreTake+0x21c>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	e75d      	b.n	8009c1e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d64:	f000 f840 	bl	8009de8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d68:	f000 fb04 	bl	800a374 <xTaskResumeAll>
 8009d6c:	e757      	b.n	8009c1e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d70:	f000 f83a 	bl	8009de8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d74:	f000 fafe 	bl	800a374 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d7a:	f000 f887 	bl	8009e8c <prvIsQueueEmpty>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f43f af4c 	beq.w	8009c1e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00d      	beq.n	8009da8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009d8c:	f001 f96c 	bl	800b068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d92:	f000 f811 	bl	8009db8 <prvGetDisinheritPriorityAfterTimeout>
 8009d96:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 ff24 	bl	800abec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009da4:	f001 f992 	bl	800b0cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009da8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3738      	adds	r7, #56	@ 0x38
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1c3 0307 	rsb	r3, r3, #7
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e001      	b.n	8009dda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009dda:	68fb      	ldr	r3, [r7, #12]
	}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df0:	f001 f93a 	bl	800b068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dfc:	e011      	b.n	8009e22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d012      	beq.n	8009e2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3324      	adds	r3, #36	@ 0x24
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fc94 	bl	800a738 <xTaskRemoveFromEventList>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e16:	f000 fd6d 	bl	800a8f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	dce9      	bgt.n	8009dfe <prvUnlockQueue+0x16>
 8009e2a:	e000      	b.n	8009e2e <prvUnlockQueue+0x46>
					break;
 8009e2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	22ff      	movs	r2, #255	@ 0xff
 8009e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e36:	f001 f949 	bl	800b0cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e3a:	f001 f915 	bl	800b068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e46:	e011      	b.n	8009e6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d012      	beq.n	8009e76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3310      	adds	r3, #16
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fc6f 	bl	800a738 <xTaskRemoveFromEventList>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e60:	f000 fd48 	bl	800a8f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dce9      	bgt.n	8009e48 <prvUnlockQueue+0x60>
 8009e74:	e000      	b.n	8009e78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	22ff      	movs	r2, #255	@ 0xff
 8009e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e80:	f001 f924 	bl	800b0cc <vPortExitCritical>
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e94:	f001 f8e8 	bl	800b068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e001      	b.n	8009eaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eaa:	f001 f90f 	bl	800b0cc <vPortExitCritical>

	return xReturn;
 8009eae:	68fb      	ldr	r3, [r7, #12]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08e      	sub	sp, #56	@ 0x38
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	623b      	str	r3, [r7, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	e7fd      	b.n	8009ee0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61fb      	str	r3, [r7, #28]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f02:	23a0      	movs	r3, #160	@ 0xa0
 8009f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2ba0      	cmp	r3, #160	@ 0xa0
 8009f0a:	d00b      	beq.n	8009f24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	61bb      	str	r3, [r7, #24]
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	e7fd      	b.n	8009f20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01e      	beq.n	8009f6a <xTaskCreateStatic+0xb2>
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d01b      	beq.n	8009f6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f44:	2300      	movs	r3, #0
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4a:	9302      	str	r3, [sp, #8]
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f851 	bl	800a004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f64:	f000 f8ee 	bl	800a144 <prvAddNewTaskToReadyList>
 8009f68:	e001      	b.n	8009f6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f6e:	697b      	ldr	r3, [r7, #20]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	@ 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08c      	sub	sp, #48	@ 0x30
 8009f7c:	af04      	add	r7, sp, #16
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	4613      	mov	r3, r2
 8009f86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f88:	88fb      	ldrh	r3, [r7, #6]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 f98d 	bl	800b2ac <pvPortMalloc>
 8009f92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00e      	beq.n	8009fb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f9a:	20a0      	movs	r0, #160	@ 0xa0
 8009f9c:	f001 f986 	bl	800b2ac <pvPortMalloc>
 8009fa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fae:	e005      	b.n	8009fbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fb0:	6978      	ldr	r0, [r7, #20]
 8009fb2:	f001 fa49 	bl	800b448 <vPortFree>
 8009fb6:	e001      	b.n	8009fbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d017      	beq.n	8009ff2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fca:	88fa      	ldrh	r2, [r7, #6]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	68b9      	ldr	r1, [r7, #8]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 f80f 	bl	800a004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fe6:	69f8      	ldr	r0, [r7, #28]
 8009fe8:	f000 f8ac 	bl	800a144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fec:	2301      	movs	r3, #1
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	e002      	b.n	8009ff8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a01c:	3b01      	subs	r3, #1
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f023 0307 	bic.w	r3, r3, #7
 800a02a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	617b      	str	r3, [r7, #20]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d01f      	beq.n	800a094 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a054:	2300      	movs	r3, #0
 800a056:	61fb      	str	r3, [r7, #28]
 800a058:	e012      	b.n	800a080 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	4413      	add	r3, r2
 800a060:	7819      	ldrb	r1, [r3, #0]
 800a062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4413      	add	r3, r2
 800a068:	3334      	adds	r3, #52	@ 0x34
 800a06a:	460a      	mov	r2, r1
 800a06c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4413      	add	r3, r2
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d006      	beq.n	800a088 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	3301      	adds	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	2b0f      	cmp	r3, #15
 800a084:	d9e9      	bls.n	800a05a <prvInitialiseNewTask+0x56>
 800a086:	e000      	b.n	800a08a <prvInitialiseNewTask+0x86>
			{
				break;
 800a088:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a092:	e003      	b.n	800a09c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d901      	bls.n	800a0a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0a2:	2306      	movs	r3, #6
 800a0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fb82 	bl	80097c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff fb7d 	bl	80097c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	f1c3 0207 	rsb	r2, r3, #7
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	334c      	adds	r3, #76	@ 0x4c
 800a0f6:	224c      	movs	r2, #76	@ 0x4c
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 fcf0 	bl	800bae0 <memset>
 800a100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a102:	4a0d      	ldr	r2, [pc, #52]	@ (800a138 <prvInitialiseNewTask+0x134>)
 800a104:	651a      	str	r2, [r3, #80]	@ 0x50
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	4a0c      	ldr	r2, [pc, #48]	@ (800a13c <prvInitialiseNewTask+0x138>)
 800a10a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	4a0c      	ldr	r2, [pc, #48]	@ (800a140 <prvInitialiseNewTask+0x13c>)
 800a110:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	68f9      	ldr	r1, [r7, #12]
 800a116:	69b8      	ldr	r0, [r7, #24]
 800a118:	f000 fe72 	bl	800ae00 <pxPortInitialiseStack>
 800a11c:	4602      	mov	r2, r0
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a12e:	bf00      	nop
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20001730 	.word	0x20001730
 800a13c:	20001798 	.word	0x20001798
 800a140:	20001800 	.word	0x20001800

0800a144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a14c:	f000 ff8c 	bl	800b068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a150:	4b2a      	ldr	r3, [pc, #168]	@ (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3301      	adds	r3, #1
 800a156:	4a29      	ldr	r2, [pc, #164]	@ (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a15a:	4b29      	ldr	r3, [pc, #164]	@ (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a162:	4a27      	ldr	r2, [pc, #156]	@ (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a168:	4b24      	ldr	r3, [pc, #144]	@ (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d110      	bne.n	800a192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a170:	f000 fbe4 	bl	800a93c <prvInitialiseTaskLists>
 800a174:	e00d      	b.n	800a192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a176:	4b23      	ldr	r3, [pc, #140]	@ (800a204 <prvAddNewTaskToReadyList+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a17e:	4b20      	ldr	r3, [pc, #128]	@ (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d802      	bhi.n	800a192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a18c:	4a1c      	ldr	r2, [pc, #112]	@ (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a192:	4b1d      	ldr	r3, [pc, #116]	@ (800a208 <prvAddNewTaskToReadyList+0xc4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	4a1b      	ldr	r2, [pc, #108]	@ (800a208 <prvAddNewTaskToReadyList+0xc4>)
 800a19a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	409a      	lsls	r2, r3
 800a1a4:	4b19      	ldr	r3, [pc, #100]	@ (800a20c <prvAddNewTaskToReadyList+0xc8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	4a18      	ldr	r2, [pc, #96]	@ (800a20c <prvAddNewTaskToReadyList+0xc8>)
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4a15      	ldr	r2, [pc, #84]	@ (800a210 <prvAddNewTaskToReadyList+0xcc>)
 800a1bc:	441a      	add	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7ff fb0b 	bl	80097e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1ca:	f000 ff7f 	bl	800b0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a204 <prvAddNewTaskToReadyList+0xc0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00e      	beq.n	800a1f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d207      	bcs.n	800a1f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <prvAddNewTaskToReadyList+0xd0>)
 800a1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000b24 	.word	0x20000b24
 800a200:	20000a24 	.word	0x20000a24
 800a204:	20000b30 	.word	0x20000b30
 800a208:	20000b40 	.word	0x20000b40
 800a20c:	20000b2c 	.word	0x20000b2c
 800a210:	20000a28 	.word	0x20000a28
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d018      	beq.n	800a25c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a22a:	4b14      	ldr	r3, [pc, #80]	@ (800a27c <vTaskDelay+0x64>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <vTaskDelay+0x32>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60bb      	str	r3, [r7, #8]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a24a:	f000 f885 	bl	800a358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fd6f 	bl	800ad34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a256:	f000 f88d 	bl	800a374 <xTaskResumeAll>
 800a25a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <vTaskDelay+0x68>)
 800a264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000b4c 	.word	0x20000b4c
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08a      	sub	sp, #40	@ 0x28
 800a288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a292:	463a      	mov	r2, r7
 800a294:	1d39      	adds	r1, r7, #4
 800a296:	f107 0308 	add.w	r3, r7, #8
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f6 fe92 	bl	8000fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	9202      	str	r2, [sp, #8]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	4921      	ldr	r1, [pc, #132]	@ (800a338 <vTaskStartScheduler+0xb4>)
 800a2b4:	4821      	ldr	r0, [pc, #132]	@ (800a33c <vTaskStartScheduler+0xb8>)
 800a2b6:	f7ff fdff 	bl	8009eb8 <xTaskCreateStatic>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	4a20      	ldr	r2, [pc, #128]	@ (800a340 <vTaskStartScheduler+0xbc>)
 800a2be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2c0:	4b1f      	ldr	r3, [pc, #124]	@ (800a340 <vTaskStartScheduler+0xbc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e001      	b.n	800a2d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d11b      	bne.n	800a310 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	613b      	str	r3, [r7, #16]
}
 800a2ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2ec:	4b15      	ldr	r3, [pc, #84]	@ (800a344 <vTaskStartScheduler+0xc0>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	334c      	adds	r3, #76	@ 0x4c
 800a2f2:	4a15      	ldr	r2, [pc, #84]	@ (800a348 <vTaskStartScheduler+0xc4>)
 800a2f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2f6:	4b15      	ldr	r3, [pc, #84]	@ (800a34c <vTaskStartScheduler+0xc8>)
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2fe:	4b14      	ldr	r3, [pc, #80]	@ (800a350 <vTaskStartScheduler+0xcc>)
 800a300:	2201      	movs	r2, #1
 800a302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a304:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <vTaskStartScheduler+0xd0>)
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a30a:	f000 fe09 	bl	800af20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a30e:	e00f      	b.n	800a330 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d10b      	bne.n	800a330 <vTaskStartScheduler+0xac>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <vTaskStartScheduler+0xa8>
}
 800a330:	bf00      	nop
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	0800c928 	.word	0x0800c928
 800a33c:	0800a90d 	.word	0x0800a90d
 800a340:	20000b48 	.word	0x20000b48
 800a344:	20000a24 	.word	0x20000a24
 800a348:	20000050 	.word	0x20000050
 800a34c:	20000b44 	.word	0x20000b44
 800a350:	20000b30 	.word	0x20000b30
 800a354:	20000b28 	.word	0x20000b28

0800a358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a35c:	4b04      	ldr	r3, [pc, #16]	@ (800a370 <vTaskSuspendAll+0x18>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a03      	ldr	r2, [pc, #12]	@ (800a370 <vTaskSuspendAll+0x18>)
 800a364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a366:	bf00      	nop
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	20000b4c 	.word	0x20000b4c

0800a374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a37e:	2300      	movs	r3, #0
 800a380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a382:	4b42      	ldr	r3, [pc, #264]	@ (800a48c <xTaskResumeAll+0x118>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	603b      	str	r3, [r7, #0]
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3a2:	f000 fe61 	bl	800b068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3a6:	4b39      	ldr	r3, [pc, #228]	@ (800a48c <xTaskResumeAll+0x118>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	4a37      	ldr	r2, [pc, #220]	@ (800a48c <xTaskResumeAll+0x118>)
 800a3ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b0:	4b36      	ldr	r3, [pc, #216]	@ (800a48c <xTaskResumeAll+0x118>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d161      	bne.n	800a47c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3b8:	4b35      	ldr	r3, [pc, #212]	@ (800a490 <xTaskResumeAll+0x11c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d05d      	beq.n	800a47c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3c0:	e02e      	b.n	800a420 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c2:	4b34      	ldr	r3, [pc, #208]	@ (800a494 <xTaskResumeAll+0x120>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3318      	adds	r3, #24
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fa63 	bl	800989a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff fa5e 	bl	800989a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	4b2c      	ldr	r3, [pc, #176]	@ (800a498 <xTaskResumeAll+0x124>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	4a2a      	ldr	r2, [pc, #168]	@ (800a498 <xTaskResumeAll+0x124>)
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4a27      	ldr	r2, [pc, #156]	@ (800a49c <xTaskResumeAll+0x128>)
 800a3fe:	441a      	add	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7ff f9ea 	bl	80097e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a410:	4b23      	ldr	r3, [pc, #140]	@ (800a4a0 <xTaskResumeAll+0x12c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a416:	429a      	cmp	r2, r3
 800a418:	d302      	bcc.n	800a420 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a41a:	4b22      	ldr	r3, [pc, #136]	@ (800a4a4 <xTaskResumeAll+0x130>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a420:	4b1c      	ldr	r3, [pc, #112]	@ (800a494 <xTaskResumeAll+0x120>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1cc      	bne.n	800a3c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a42e:	f000 fb29 	bl	800aa84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a432:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a8 <xTaskResumeAll+0x134>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d010      	beq.n	800a460 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a43e:	f000 f837 	bl	800a4b0 <xTaskIncrementTick>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a448:	4b16      	ldr	r3, [pc, #88]	@ (800a4a4 <xTaskResumeAll+0x130>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3b01      	subs	r3, #1
 800a452:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f1      	bne.n	800a43e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a45a:	4b13      	ldr	r3, [pc, #76]	@ (800a4a8 <xTaskResumeAll+0x134>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a460:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <xTaskResumeAll+0x130>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a468:	2301      	movs	r3, #1
 800a46a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a46c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ac <xTaskResumeAll+0x138>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a47c:	f000 fe26 	bl	800b0cc <vPortExitCritical>

	return xAlreadyYielded;
 800a480:	68bb      	ldr	r3, [r7, #8]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000b4c 	.word	0x20000b4c
 800a490:	20000b24 	.word	0x20000b24
 800a494:	20000ae4 	.word	0x20000ae4
 800a498:	20000b2c 	.word	0x20000b2c
 800a49c:	20000a28 	.word	0x20000a28
 800a4a0:	20000a24 	.word	0x20000a24
 800a4a4:	20000b38 	.word	0x20000b38
 800a4a8:	20000b34 	.word	0x20000b34
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a5f8 <xTaskIncrementTick+0x148>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f040 808f 	bne.w	800a5e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4c4:	4b4d      	ldr	r3, [pc, #308]	@ (800a5fc <xTaskIncrementTick+0x14c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4cc:	4a4b      	ldr	r2, [pc, #300]	@ (800a5fc <xTaskIncrementTick+0x14c>)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d121      	bne.n	800a51c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4d8:	4b49      	ldr	r3, [pc, #292]	@ (800a600 <xTaskIncrementTick+0x150>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00b      	beq.n	800a4fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	603b      	str	r3, [r7, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop
 800a4f8:	e7fd      	b.n	800a4f6 <xTaskIncrementTick+0x46>
 800a4fa:	4b41      	ldr	r3, [pc, #260]	@ (800a600 <xTaskIncrementTick+0x150>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	4b40      	ldr	r3, [pc, #256]	@ (800a604 <xTaskIncrementTick+0x154>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a3e      	ldr	r2, [pc, #248]	@ (800a600 <xTaskIncrementTick+0x150>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	4a3e      	ldr	r2, [pc, #248]	@ (800a604 <xTaskIncrementTick+0x154>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	4b3e      	ldr	r3, [pc, #248]	@ (800a608 <xTaskIncrementTick+0x158>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	4a3c      	ldr	r2, [pc, #240]	@ (800a608 <xTaskIncrementTick+0x158>)
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	f000 fab4 	bl	800aa84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a51c:	4b3b      	ldr	r3, [pc, #236]	@ (800a60c <xTaskIncrementTick+0x15c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	429a      	cmp	r2, r3
 800a524:	d348      	bcc.n	800a5b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a526:	4b36      	ldr	r3, [pc, #216]	@ (800a600 <xTaskIncrementTick+0x150>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a530:	4b36      	ldr	r3, [pc, #216]	@ (800a60c <xTaskIncrementTick+0x15c>)
 800a532:	f04f 32ff 	mov.w	r2, #4294967295
 800a536:	601a      	str	r2, [r3, #0]
					break;
 800a538:	e03e      	b.n	800a5b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a53a:	4b31      	ldr	r3, [pc, #196]	@ (800a600 <xTaskIncrementTick+0x150>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d203      	bcs.n	800a55a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a552:	4a2e      	ldr	r2, [pc, #184]	@ (800a60c <xTaskIncrementTick+0x15c>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a558:	e02e      	b.n	800a5b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff f99b 	bl	800989a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d004      	beq.n	800a576 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	3318      	adds	r3, #24
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff f992 	bl	800989a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	2201      	movs	r2, #1
 800a57c:	409a      	lsls	r2, r3
 800a57e:	4b24      	ldr	r3, [pc, #144]	@ (800a610 <xTaskIncrementTick+0x160>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4313      	orrs	r3, r2
 800a584:	4a22      	ldr	r2, [pc, #136]	@ (800a610 <xTaskIncrementTick+0x160>)
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4a1f      	ldr	r2, [pc, #124]	@ (800a614 <xTaskIncrementTick+0x164>)
 800a596:	441a      	add	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7ff f91e 	bl	80097e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a618 <xTaskIncrementTick+0x168>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d3b9      	bcc.n	800a526 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5b6:	e7b6      	b.n	800a526 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5b8:	4b17      	ldr	r3, [pc, #92]	@ (800a618 <xTaskIncrementTick+0x168>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5be:	4915      	ldr	r1, [pc, #84]	@ (800a614 <xTaskIncrementTick+0x164>)
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	440b      	add	r3, r1
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d901      	bls.n	800a5d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5d4:	4b11      	ldr	r3, [pc, #68]	@ (800a61c <xTaskIncrementTick+0x16c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d007      	beq.n	800a5ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e004      	b.n	800a5ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a620 <xTaskIncrementTick+0x170>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a620 <xTaskIncrementTick+0x170>)
 800a5ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5ec:	697b      	ldr	r3, [r7, #20]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000b4c 	.word	0x20000b4c
 800a5fc:	20000b28 	.word	0x20000b28
 800a600:	20000adc 	.word	0x20000adc
 800a604:	20000ae0 	.word	0x20000ae0
 800a608:	20000b3c 	.word	0x20000b3c
 800a60c:	20000b44 	.word	0x20000b44
 800a610:	20000b2c 	.word	0x20000b2c
 800a614:	20000a28 	.word	0x20000a28
 800a618:	20000a24 	.word	0x20000a24
 800a61c:	20000b38 	.word	0x20000b38
 800a620:	20000b34 	.word	0x20000b34

0800a624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a62a:	4b2a      	ldr	r3, [pc, #168]	@ (800a6d4 <vTaskSwitchContext+0xb0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a632:	4b29      	ldr	r3, [pc, #164]	@ (800a6d8 <vTaskSwitchContext+0xb4>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a638:	e045      	b.n	800a6c6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a63a:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <vTaskSwitchContext+0xb4>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a640:	4b26      	ldr	r3, [pc, #152]	@ (800a6dc <vTaskSwitchContext+0xb8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	fab3 f383 	clz	r3, r3
 800a64c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	f1c3 031f 	rsb	r3, r3, #31
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	4922      	ldr	r1, [pc, #136]	@ (800a6e0 <vTaskSwitchContext+0xbc>)
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	607b      	str	r3, [r7, #4]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <vTaskSwitchContext+0x5a>
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a14      	ldr	r2, [pc, #80]	@ (800a6e0 <vTaskSwitchContext+0xbc>)
 800a68e:	4413      	add	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	605a      	str	r2, [r3, #4]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d104      	bne.n	800a6b2 <vTaskSwitchContext+0x8e>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e4 <vTaskSwitchContext+0xc0>)
 800a6ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6bc:	4b09      	ldr	r3, [pc, #36]	@ (800a6e4 <vTaskSwitchContext+0xc0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	334c      	adds	r3, #76	@ 0x4c
 800a6c2:	4a09      	ldr	r2, [pc, #36]	@ (800a6e8 <vTaskSwitchContext+0xc4>)
 800a6c4:	6013      	str	r3, [r2, #0]
}
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	20000b4c 	.word	0x20000b4c
 800a6d8:	20000b38 	.word	0x20000b38
 800a6dc:	20000b2c 	.word	0x20000b2c
 800a6e0:	20000a28 	.word	0x20000a28
 800a6e4:	20000a24 	.word	0x20000a24
 800a6e8:	20000050 	.word	0x20000050

0800a6ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10b      	bne.n	800a714 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	60fb      	str	r3, [r7, #12]
}
 800a70e:	bf00      	nop
 800a710:	bf00      	nop
 800a712:	e7fd      	b.n	800a710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a714:	4b07      	ldr	r3, [pc, #28]	@ (800a734 <vTaskPlaceOnEventList+0x48>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3318      	adds	r3, #24
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff f883 	bl	8009828 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a722:	2101      	movs	r1, #1
 800a724:	6838      	ldr	r0, [r7, #0]
 800a726:	f000 fb05 	bl	800ad34 <prvAddCurrentTaskToDelayedList>
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000a24 	.word	0x20000a24

0800a738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60fb      	str	r3, [r7, #12]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3318      	adds	r3, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff f895 	bl	800989a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a770:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <xTaskRemoveFromEventList+0xb0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d11c      	bne.n	800a7b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff f88c 	bl	800989a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	2201      	movs	r2, #1
 800a788:	409a      	lsls	r2, r3
 800a78a:	4b18      	ldr	r3, [pc, #96]	@ (800a7ec <xTaskRemoveFromEventList+0xb4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4313      	orrs	r3, r2
 800a790:	4a16      	ldr	r2, [pc, #88]	@ (800a7ec <xTaskRemoveFromEventList+0xb4>)
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4a13      	ldr	r2, [pc, #76]	@ (800a7f0 <xTaskRemoveFromEventList+0xb8>)
 800a7a2:	441a      	add	r2, r3
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7ff f818 	bl	80097e0 <vListInsertEnd>
 800a7b0:	e005      	b.n	800a7be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	3318      	adds	r3, #24
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	480e      	ldr	r0, [pc, #56]	@ (800a7f4 <xTaskRemoveFromEventList+0xbc>)
 800a7ba:	f7ff f811 	bl	80097e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <xTaskRemoveFromEventList+0xc0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d905      	bls.n	800a7d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <xTaskRemoveFromEventList+0xc4>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	e001      	b.n	800a7dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7dc:	697b      	ldr	r3, [r7, #20]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000b4c 	.word	0x20000b4c
 800a7ec:	20000b2c 	.word	0x20000b2c
 800a7f0:	20000a28 	.word	0x20000a28
 800a7f4:	20000ae4 	.word	0x20000ae4
 800a7f8:	20000a24 	.word	0x20000a24
 800a7fc:	20000b38 	.word	0x20000b38

0800a800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a808:	4b06      	ldr	r3, [pc, #24]	@ (800a824 <vTaskInternalSetTimeOutState+0x24>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a810:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <vTaskInternalSetTimeOutState+0x28>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	605a      	str	r2, [r3, #4]
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	20000b3c 	.word	0x20000b3c
 800a828:	20000b28 	.word	0x20000b28

0800a82c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	613b      	str	r3, [r7, #16]
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	60fb      	str	r3, [r7, #12]
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	e7fd      	b.n	800a86e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a872:	f000 fbf9 	bl	800b068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a876:	4b1d      	ldr	r3, [pc, #116]	@ (800a8ec <xTaskCheckForTimeOut+0xc0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d102      	bne.n	800a896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a890:	2300      	movs	r3, #0
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	e023      	b.n	800a8de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b15      	ldr	r3, [pc, #84]	@ (800a8f0 <xTaskCheckForTimeOut+0xc4>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d007      	beq.n	800a8b2 <xTaskCheckForTimeOut+0x86>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d302      	bcc.n	800a8b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	e015      	b.n	800a8de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d20b      	bcs.n	800a8d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff ff99 	bl	800a800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e004      	b.n	800a8de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8de:	f000 fbf5 	bl	800b0cc <vPortExitCritical>

	return xReturn;
 800a8e2:	69fb      	ldr	r3, [r7, #28]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3720      	adds	r7, #32
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000b28 	.word	0x20000b28
 800a8f0:	20000b3c 	.word	0x20000b3c

0800a8f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8f8:	4b03      	ldr	r3, [pc, #12]	@ (800a908 <vTaskMissedYield+0x14>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20000b38 	.word	0x20000b38

0800a90c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a914:	f000 f852 	bl	800a9bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a918:	4b06      	ldr	r3, [pc, #24]	@ (800a934 <prvIdleTask+0x28>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d9f9      	bls.n	800a914 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a920:	4b05      	ldr	r3, [pc, #20]	@ (800a938 <prvIdleTask+0x2c>)
 800a922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a930:	e7f0      	b.n	800a914 <prvIdleTask+0x8>
 800a932:	bf00      	nop
 800a934:	20000a28 	.word	0x20000a28
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a942:	2300      	movs	r3, #0
 800a944:	607b      	str	r3, [r7, #4]
 800a946:	e00c      	b.n	800a962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4a12      	ldr	r2, [pc, #72]	@ (800a99c <prvInitialiseTaskLists+0x60>)
 800a954:	4413      	add	r3, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f7fe ff15 	bl	8009786 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3301      	adds	r3, #1
 800a960:	607b      	str	r3, [r7, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b06      	cmp	r3, #6
 800a966:	d9ef      	bls.n	800a948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a968:	480d      	ldr	r0, [pc, #52]	@ (800a9a0 <prvInitialiseTaskLists+0x64>)
 800a96a:	f7fe ff0c 	bl	8009786 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a96e:	480d      	ldr	r0, [pc, #52]	@ (800a9a4 <prvInitialiseTaskLists+0x68>)
 800a970:	f7fe ff09 	bl	8009786 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a974:	480c      	ldr	r0, [pc, #48]	@ (800a9a8 <prvInitialiseTaskLists+0x6c>)
 800a976:	f7fe ff06 	bl	8009786 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a97a:	480c      	ldr	r0, [pc, #48]	@ (800a9ac <prvInitialiseTaskLists+0x70>)
 800a97c:	f7fe ff03 	bl	8009786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a980:	480b      	ldr	r0, [pc, #44]	@ (800a9b0 <prvInitialiseTaskLists+0x74>)
 800a982:	f7fe ff00 	bl	8009786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a986:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b4 <prvInitialiseTaskLists+0x78>)
 800a988:	4a05      	ldr	r2, [pc, #20]	@ (800a9a0 <prvInitialiseTaskLists+0x64>)
 800a98a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a98c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <prvInitialiseTaskLists+0x7c>)
 800a98e:	4a05      	ldr	r2, [pc, #20]	@ (800a9a4 <prvInitialiseTaskLists+0x68>)
 800a990:	601a      	str	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000a28 	.word	0x20000a28
 800a9a0:	20000ab4 	.word	0x20000ab4
 800a9a4:	20000ac8 	.word	0x20000ac8
 800a9a8:	20000ae4 	.word	0x20000ae4
 800a9ac:	20000af8 	.word	0x20000af8
 800a9b0:	20000b10 	.word	0x20000b10
 800a9b4:	20000adc 	.word	0x20000adc
 800a9b8:	20000ae0 	.word	0x20000ae0

0800a9bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9c2:	e019      	b.n	800a9f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9c4:	f000 fb50 	bl	800b068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c8:	4b10      	ldr	r3, [pc, #64]	@ (800aa0c <prvCheckTasksWaitingTermination+0x50>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe ff60 	bl	800989a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9da:	4b0d      	ldr	r3, [pc, #52]	@ (800aa10 <prvCheckTasksWaitingTermination+0x54>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	4a0b      	ldr	r2, [pc, #44]	@ (800aa10 <prvCheckTasksWaitingTermination+0x54>)
 800a9e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa14 <prvCheckTasksWaitingTermination+0x58>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	4a0a      	ldr	r2, [pc, #40]	@ (800aa14 <prvCheckTasksWaitingTermination+0x58>)
 800a9ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9ee:	f000 fb6d 	bl	800b0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f810 	bl	800aa18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9f8:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <prvCheckTasksWaitingTermination+0x58>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e1      	bne.n	800a9c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000af8 	.word	0x20000af8
 800aa10:	20000b24 	.word	0x20000b24
 800aa14:	20000b0c 	.word	0x20000b0c

0800aa18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	334c      	adds	r3, #76	@ 0x4c
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 f873 	bl	800bb10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d108      	bne.n	800aa46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fd05 	bl	800b448 <vPortFree>
				vPortFree( pxTCB );
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fd02 	bl	800b448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa44:	e019      	b.n	800aa7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d103      	bne.n	800aa58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fcf9 	bl	800b448 <vPortFree>
	}
 800aa56:	e010      	b.n	800aa7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d00b      	beq.n	800aa7a <prvDeleteTCB+0x62>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60fb      	str	r3, [r7, #12]
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	e7fd      	b.n	800aa76 <prvDeleteTCB+0x5e>
	}
 800aa7a:	bf00      	nop
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	@ (800aabc <prvResetNextTaskUnblockTime+0x38>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa94:	4b0a      	ldr	r3, [pc, #40]	@ (800aac0 <prvResetNextTaskUnblockTime+0x3c>)
 800aa96:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa9c:	e008      	b.n	800aab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9e:	4b07      	ldr	r3, [pc, #28]	@ (800aabc <prvResetNextTaskUnblockTime+0x38>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4a04      	ldr	r2, [pc, #16]	@ (800aac0 <prvResetNextTaskUnblockTime+0x3c>)
 800aaae:	6013      	str	r3, [r2, #0]
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	20000adc 	.word	0x20000adc
 800aac0:	20000b44 	.word	0x20000b44

0800aac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaca:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf8 <xTaskGetSchedulerState+0x34>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aad2:	2301      	movs	r3, #1
 800aad4:	607b      	str	r3, [r7, #4]
 800aad6:	e008      	b.n	800aaea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad8:	4b08      	ldr	r3, [pc, #32]	@ (800aafc <xTaskGetSchedulerState+0x38>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aae0:	2302      	movs	r3, #2
 800aae2:	607b      	str	r3, [r7, #4]
 800aae4:	e001      	b.n	800aaea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aae6:	2300      	movs	r3, #0
 800aae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaea:	687b      	ldr	r3, [r7, #4]
	}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000b30 	.word	0x20000b30
 800aafc:	20000b4c 	.word	0x20000b4c

0800ab00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d05e      	beq.n	800abd4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab1a:	4b31      	ldr	r3, [pc, #196]	@ (800abe0 <xTaskPriorityInherit+0xe0>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d24e      	bcs.n	800abc2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	db06      	blt.n	800ab3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab2c:	4b2c      	ldr	r3, [pc, #176]	@ (800abe0 <xTaskPriorityInherit+0xe0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab32:	f1c3 0207 	rsb	r2, r3, #7
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6959      	ldr	r1, [r3, #20]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4a26      	ldr	r2, [pc, #152]	@ (800abe4 <xTaskPriorityInherit+0xe4>)
 800ab4c:	4413      	add	r3, r2
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	d12f      	bne.n	800abb2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fe9f 	bl	800989a <uxListRemove>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab66:	2201      	movs	r2, #1
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	43da      	mvns	r2, r3
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	@ (800abe8 <xTaskPriorityInherit+0xe8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4013      	ands	r3, r2
 800ab74:	4a1c      	ldr	r2, [pc, #112]	@ (800abe8 <xTaskPriorityInherit+0xe8>)
 800ab76:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab78:	4b19      	ldr	r3, [pc, #100]	@ (800abe0 <xTaskPriorityInherit+0xe0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab86:	2201      	movs	r2, #1
 800ab88:	409a      	lsls	r2, r3
 800ab8a:	4b17      	ldr	r3, [pc, #92]	@ (800abe8 <xTaskPriorityInherit+0xe8>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	4a15      	ldr	r2, [pc, #84]	@ (800abe8 <xTaskPriorityInherit+0xe8>)
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab98:	4613      	mov	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4a10      	ldr	r2, [pc, #64]	@ (800abe4 <xTaskPriorityInherit+0xe4>)
 800aba2:	441a      	add	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4619      	mov	r1, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	f7fe fe18 	bl	80097e0 <vListInsertEnd>
 800abb0:	e004      	b.n	800abbc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abb2:	4b0b      	ldr	r3, [pc, #44]	@ (800abe0 <xTaskPriorityInherit+0xe0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abbc:	2301      	movs	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e008      	b.n	800abd4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abc6:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <xTaskPriorityInherit+0xe0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abcc:	429a      	cmp	r2, r3
 800abce:	d201      	bcs.n	800abd4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abd0:	2301      	movs	r3, #1
 800abd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abd4:	68fb      	ldr	r3, [r7, #12]
	}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000a24 	.word	0x20000a24
 800abe4:	20000a28 	.word	0x20000a28
 800abe8:	20000b2c 	.word	0x20000b2c

0800abec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b088      	sub	sp, #32
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800abfa:	2301      	movs	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d079      	beq.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10b      	bne.n	800ac24 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	60fb      	str	r3, [r7, #12]
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	e7fd      	b.n	800ac20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d902      	bls.n	800ac34 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e002      	b.n	800ac3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d059      	beq.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d154      	bne.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ac4e:	4b2c      	ldr	r3, [pc, #176]	@ (800ad00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d10b      	bne.n	800ac70 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	60bb      	str	r3, [r7, #8]
}
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	e7fd      	b.n	800ac6c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	db04      	blt.n	800ac8e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	f1c3 0207 	rsb	r2, r3, #7
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	6959      	ldr	r1, [r3, #20]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a19      	ldr	r2, [pc, #100]	@ (800ad04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ac9e:	4413      	add	r3, r2
 800aca0:	4299      	cmp	r1, r3
 800aca2:	d129      	bne.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fdf6 	bl	800989a <uxListRemove>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb8:	2201      	movs	r2, #1
 800acba:	fa02 f303 	lsl.w	r3, r2, r3
 800acbe:	43da      	mvns	r2, r3
 800acc0:	4b11      	ldr	r3, [pc, #68]	@ (800ad08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4013      	ands	r3, r2
 800acc6:	4a10      	ldr	r2, [pc, #64]	@ (800ad08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800acc8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	2201      	movs	r2, #1
 800acd0:	409a      	lsls	r2, r3
 800acd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	4a0b      	ldr	r2, [pc, #44]	@ (800ad08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4a06      	ldr	r2, [pc, #24]	@ (800ad04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800acea:	441a      	add	r2, r3
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	3304      	adds	r3, #4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fe fd74 	bl	80097e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acf8:	bf00      	nop
 800acfa:	3720      	adds	r7, #32
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	20000a24 	.word	0x20000a24
 800ad04:	20000a28 	.word	0x20000a28
 800ad08:	20000b2c 	.word	0x20000b2c

0800ad0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad10:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad18:	4b05      	ldr	r3, [pc, #20]	@ (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad1e:	3201      	adds	r2, #1
 800ad20:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ad22:	4b03      	ldr	r3, [pc, #12]	@ (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad24:	681b      	ldr	r3, [r3, #0]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20000a24 	.word	0x20000a24

0800ad34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad3e:	4b29      	ldr	r3, [pc, #164]	@ (800ade4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad44:	4b28      	ldr	r3, [pc, #160]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe fda5 	bl	800989a <uxListRemove>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10b      	bne.n	800ad6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad56:	4b24      	ldr	r3, [pc, #144]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad62:	43da      	mvns	r2, r3
 800ad64:	4b21      	ldr	r3, [pc, #132]	@ (800adec <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	4a20      	ldr	r2, [pc, #128]	@ (800adec <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad74:	d10a      	bne.n	800ad8c <prvAddCurrentTaskToDelayedList+0x58>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d007      	beq.n	800ad8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3304      	adds	r3, #4
 800ad82:	4619      	mov	r1, r3
 800ad84:	481a      	ldr	r0, [pc, #104]	@ (800adf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad86:	f7fe fd2b 	bl	80097e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad8a:	e026      	b.n	800adda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad94:	4b14      	ldr	r3, [pc, #80]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d209      	bcs.n	800adb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada4:	4b13      	ldr	r3, [pc, #76]	@ (800adf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	4b0f      	ldr	r3, [pc, #60]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3304      	adds	r3, #4
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f7fe fd39 	bl	8009828 <vListInsert>
}
 800adb6:	e010      	b.n	800adda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb8:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fe fd2f 	bl	8009828 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adca:	4b0c      	ldr	r3, [pc, #48]	@ (800adfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	429a      	cmp	r2, r3
 800add2:	d202      	bcs.n	800adda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800add4:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6013      	str	r3, [r2, #0]
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20000b28 	.word	0x20000b28
 800ade8:	20000a24 	.word	0x20000a24
 800adec:	20000b2c 	.word	0x20000b2c
 800adf0:	20000b10 	.word	0x20000b10
 800adf4:	20000ae0 	.word	0x20000ae0
 800adf8:	20000adc 	.word	0x20000adc
 800adfc:	20000b44 	.word	0x20000b44

0800ae00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae30:	4a0c      	ldr	r2, [pc, #48]	@ (800ae64 <pxPortInitialiseStack+0x64>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b14      	subs	r3, #20
 800ae3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3b04      	subs	r3, #4
 800ae46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f06f 0202 	mvn.w	r2, #2
 800ae4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3b20      	subs	r3, #32
 800ae54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	0800ae69 	.word	0x0800ae69

0800ae68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae72:	4b13      	ldr	r3, [pc, #76]	@ (800aec0 <prvTaskExitError+0x58>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d00b      	beq.n	800ae94 <prvTaskExitError+0x2c>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60fb      	str	r3, [r7, #12]
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <prvTaskExitError+0x28>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60bb      	str	r3, [r7, #8]
}
 800aea6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aea8:	bf00      	nop
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0fc      	beq.n	800aeaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20000040 	.word	0x20000040
	...

0800aed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aed0:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <pxCurrentTCBConst2>)
 800aed2:	6819      	ldr	r1, [r3, #0]
 800aed4:	6808      	ldr	r0, [r1, #0]
 800aed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	f380 8809 	msr	PSP, r0
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8811 	msr	BASEPRI, r0
 800aeea:	4770      	bx	lr
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst2>:
 800aef0:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aef8:	4808      	ldr	r0, [pc, #32]	@ (800af1c <prvPortStartFirstTask+0x24>)
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	f380 8808 	msr	MSP, r0
 800af02:	f04f 0000 	mov.w	r0, #0
 800af06:	f380 8814 	msr	CONTROL, r0
 800af0a:	b662      	cpsie	i
 800af0c:	b661      	cpsie	f
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	df00      	svc	0
 800af18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af1a:	bf00      	nop
 800af1c:	e000ed08 	.word	0xe000ed08

0800af20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af26:	4b47      	ldr	r3, [pc, #284]	@ (800b044 <xPortStartScheduler+0x124>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a47      	ldr	r2, [pc, #284]	@ (800b048 <xPortStartScheduler+0x128>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d10b      	bne.n	800af48 <xPortStartScheduler+0x28>
	__asm volatile
 800af30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	613b      	str	r3, [r7, #16]
}
 800af42:	bf00      	nop
 800af44:	bf00      	nop
 800af46:	e7fd      	b.n	800af44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af48:	4b3e      	ldr	r3, [pc, #248]	@ (800b044 <xPortStartScheduler+0x124>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a3f      	ldr	r2, [pc, #252]	@ (800b04c <xPortStartScheduler+0x12c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d10b      	bne.n	800af6a <xPortStartScheduler+0x4a>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	60fb      	str	r3, [r7, #12]
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	e7fd      	b.n	800af66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af6a:	4b39      	ldr	r3, [pc, #228]	@ (800b050 <xPortStartScheduler+0x130>)
 800af6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	22ff      	movs	r2, #255	@ 0xff
 800af7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	b2db      	uxtb	r3, r3
 800af88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	4b31      	ldr	r3, [pc, #196]	@ (800b054 <xPortStartScheduler+0x134>)
 800af90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af92:	4b31      	ldr	r3, [pc, #196]	@ (800b058 <xPortStartScheduler+0x138>)
 800af94:	2207      	movs	r2, #7
 800af96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af98:	e009      	b.n	800afae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800af9a:	4b2f      	ldr	r3, [pc, #188]	@ (800b058 <xPortStartScheduler+0x138>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	4a2d      	ldr	r2, [pc, #180]	@ (800b058 <xPortStartScheduler+0x138>)
 800afa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb6:	2b80      	cmp	r3, #128	@ 0x80
 800afb8:	d0ef      	beq.n	800af9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afba:	4b27      	ldr	r3, [pc, #156]	@ (800b058 <xPortStartScheduler+0x138>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f1c3 0307 	rsb	r3, r3, #7
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d00b      	beq.n	800afde <xPortStartScheduler+0xbe>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60bb      	str	r3, [r7, #8]
}
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
 800afdc:	e7fd      	b.n	800afda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afde:	4b1e      	ldr	r3, [pc, #120]	@ (800b058 <xPortStartScheduler+0x138>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	4a1c      	ldr	r2, [pc, #112]	@ (800b058 <xPortStartScheduler+0x138>)
 800afe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afe8:	4b1b      	ldr	r3, [pc, #108]	@ (800b058 <xPortStartScheduler+0x138>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aff0:	4a19      	ldr	r2, [pc, #100]	@ (800b058 <xPortStartScheduler+0x138>)
 800aff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800affc:	4b17      	ldr	r3, [pc, #92]	@ (800b05c <xPortStartScheduler+0x13c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a16      	ldr	r2, [pc, #88]	@ (800b05c <xPortStartScheduler+0x13c>)
 800b002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b008:	4b14      	ldr	r3, [pc, #80]	@ (800b05c <xPortStartScheduler+0x13c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a13      	ldr	r2, [pc, #76]	@ (800b05c <xPortStartScheduler+0x13c>)
 800b00e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b014:	f000 f8da 	bl	800b1cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b018:	4b11      	ldr	r3, [pc, #68]	@ (800b060 <xPortStartScheduler+0x140>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b01e:	f000 f8f9 	bl	800b214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b022:	4b10      	ldr	r3, [pc, #64]	@ (800b064 <xPortStartScheduler+0x144>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a0f      	ldr	r2, [pc, #60]	@ (800b064 <xPortStartScheduler+0x144>)
 800b028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b02c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b02e:	f7ff ff63 	bl	800aef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b032:	f7ff faf7 	bl	800a624 <vTaskSwitchContext>
	prvTaskExitError();
 800b036:	f7ff ff17 	bl	800ae68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	e000ed00 	.word	0xe000ed00
 800b048:	410fc271 	.word	0x410fc271
 800b04c:	410fc270 	.word	0x410fc270
 800b050:	e000e400 	.word	0xe000e400
 800b054:	20000b50 	.word	0x20000b50
 800b058:	20000b54 	.word	0x20000b54
 800b05c:	e000ed20 	.word	0xe000ed20
 800b060:	20000040 	.word	0x20000040
 800b064:	e000ef34 	.word	0xe000ef34

0800b068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	607b      	str	r3, [r7, #4]
}
 800b080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <vPortEnterCritical+0x5c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3301      	adds	r3, #1
 800b088:	4a0e      	ldr	r2, [pc, #56]	@ (800b0c4 <vPortEnterCritical+0x5c>)
 800b08a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b08c:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c4 <vPortEnterCritical+0x5c>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d110      	bne.n	800b0b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b094:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c8 <vPortEnterCritical+0x60>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	603b      	str	r3, [r7, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	e7fd      	b.n	800b0b2 <vPortEnterCritical+0x4a>
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20000040 	.word	0x20000040
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0d2:	4b12      	ldr	r3, [pc, #72]	@ (800b11c <vPortExitCritical+0x50>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10b      	bne.n	800b0f2 <vPortExitCritical+0x26>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	607b      	str	r3, [r7, #4]
}
 800b0ec:	bf00      	nop
 800b0ee:	bf00      	nop
 800b0f0:	e7fd      	b.n	800b0ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b11c <vPortExitCritical+0x50>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	4a08      	ldr	r2, [pc, #32]	@ (800b11c <vPortExitCritical+0x50>)
 800b0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0fc:	4b07      	ldr	r3, [pc, #28]	@ (800b11c <vPortExitCritical+0x50>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d105      	bne.n	800b110 <vPortExitCritical+0x44>
 800b104:	2300      	movs	r3, #0
 800b106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f383 8811 	msr	BASEPRI, r3
}
 800b10e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	20000040 	.word	0x20000040

0800b120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b120:	f3ef 8009 	mrs	r0, PSP
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	4b15      	ldr	r3, [pc, #84]	@ (800b180 <pxCurrentTCBConst>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	f01e 0f10 	tst.w	lr, #16
 800b130:	bf08      	it	eq
 800b132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13a:	6010      	str	r0, [r2, #0]
 800b13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b144:	f380 8811 	msr	BASEPRI, r0
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f7ff fa68 	bl	800a624 <vTaskSwitchContext>
 800b154:	f04f 0000 	mov.w	r0, #0
 800b158:	f380 8811 	msr	BASEPRI, r0
 800b15c:	bc09      	pop	{r0, r3}
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	6808      	ldr	r0, [r1, #0]
 800b162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b166:	f01e 0f10 	tst.w	lr, #16
 800b16a:	bf08      	it	eq
 800b16c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b170:	f380 8809 	msr	PSP, r0
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	f3af 8000 	nop.w

0800b180 <pxCurrentTCBConst>:
 800b180:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop

0800b188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	607b      	str	r3, [r7, #4]
}
 800b1a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1a2:	f7ff f985 	bl	800a4b0 <xTaskIncrementTick>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1ac:	4b06      	ldr	r3, [pc, #24]	@ (800b1c8 <SysTick_Handler+0x40>)
 800b1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	f383 8811 	msr	BASEPRI, r3
}
 800b1be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b200 <vPortSetupTimerInterrupt+0x34>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b204 <vPortSetupTimerInterrupt+0x38>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b208 <vPortSetupTimerInterrupt+0x3c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b20c <vPortSetupTimerInterrupt+0x40>)
 800b1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e6:	099b      	lsrs	r3, r3, #6
 800b1e8:	4a09      	ldr	r2, [pc, #36]	@ (800b210 <vPortSetupTimerInterrupt+0x44>)
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1ee:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <vPortSetupTimerInterrupt+0x34>)
 800b1f0:	2207      	movs	r2, #7
 800b1f2:	601a      	str	r2, [r3, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	e000e010 	.word	0xe000e010
 800b204:	e000e018 	.word	0xe000e018
 800b208:	20000034 	.word	0x20000034
 800b20c:	10624dd3 	.word	0x10624dd3
 800b210:	e000e014 	.word	0xe000e014

0800b214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b224 <vPortEnableVFP+0x10>
 800b218:	6801      	ldr	r1, [r0, #0]
 800b21a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b21e:	6001      	str	r1, [r0, #0]
 800b220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b222:	bf00      	nop
 800b224:	e000ed88 	.word	0xe000ed88

0800b228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b22e:	f3ef 8305 	mrs	r3, IPSR
 800b232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b0f      	cmp	r3, #15
 800b238:	d915      	bls.n	800b266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b23a:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <vPortValidateInterruptPriority+0x74>)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b244:	4b16      	ldr	r3, [pc, #88]	@ (800b2a0 <vPortValidateInterruptPriority+0x78>)
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	7afa      	ldrb	r2, [r7, #11]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d20b      	bcs.n	800b266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	e7fd      	b.n	800b262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b266:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a4 <vPortValidateInterruptPriority+0x7c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b26e:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a8 <vPortValidateInterruptPriority+0x80>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	429a      	cmp	r2, r3
 800b274:	d90b      	bls.n	800b28e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	603b      	str	r3, [r7, #0]
}
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
 800b28c:	e7fd      	b.n	800b28a <vPortValidateInterruptPriority+0x62>
	}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	e000e3f0 	.word	0xe000e3f0
 800b2a0:	20000b50 	.word	0x20000b50
 800b2a4:	e000ed0c 	.word	0xe000ed0c
 800b2a8:	20000b54 	.word	0x20000b54

0800b2ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	@ 0x28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2b8:	f7ff f84e 	bl	800a358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b430 <pvPortMalloc+0x184>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2c4:	f000 f924 	bl	800b510 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2c8:	4b5a      	ldr	r3, [pc, #360]	@ (800b434 <pvPortMalloc+0x188>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f040 8095 	bne.w	800b400 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01e      	beq.n	800b31a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b2dc:	2208      	movs	r2, #8
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d015      	beq.n	800b31a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f023 0307 	bic.w	r3, r3, #7
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00b      	beq.n	800b31a <pvPortMalloc+0x6e>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	617b      	str	r3, [r7, #20]
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop
 800b318:	e7fd      	b.n	800b316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d06f      	beq.n	800b400 <pvPortMalloc+0x154>
 800b320:	4b45      	ldr	r3, [pc, #276]	@ (800b438 <pvPortMalloc+0x18c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	429a      	cmp	r2, r3
 800b328:	d86a      	bhi.n	800b400 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b32a:	4b44      	ldr	r3, [pc, #272]	@ (800b43c <pvPortMalloc+0x190>)
 800b32c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b32e:	4b43      	ldr	r3, [pc, #268]	@ (800b43c <pvPortMalloc+0x190>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b334:	e004      	b.n	800b340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	429a      	cmp	r2, r3
 800b348:	d903      	bls.n	800b352 <pvPortMalloc+0xa6>
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1f1      	bne.n	800b336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b352:	4b37      	ldr	r3, [pc, #220]	@ (800b430 <pvPortMalloc+0x184>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b358:	429a      	cmp	r2, r3
 800b35a:	d051      	beq.n	800b400 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2208      	movs	r2, #8
 800b362:	4413      	add	r3, r2
 800b364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	1ad2      	subs	r2, r2, r3
 800b376:	2308      	movs	r3, #8
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d920      	bls.n	800b3c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4413      	add	r3, r2
 800b384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <pvPortMalloc+0xfc>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	613b      	str	r3, [r7, #16]
}
 800b3a2:	bf00      	nop
 800b3a4:	bf00      	nop
 800b3a6:	e7fd      	b.n	800b3a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3ba:	69b8      	ldr	r0, [r7, #24]
 800b3bc:	f000 f90a 	bl	800b5d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b438 <pvPortMalloc+0x18c>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	4a1b      	ldr	r2, [pc, #108]	@ (800b438 <pvPortMalloc+0x18c>)
 800b3cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b438 <pvPortMalloc+0x18c>)
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b440 <pvPortMalloc+0x194>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d203      	bcs.n	800b3e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3da:	4b17      	ldr	r3, [pc, #92]	@ (800b438 <pvPortMalloc+0x18c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a18      	ldr	r2, [pc, #96]	@ (800b440 <pvPortMalloc+0x194>)
 800b3e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	4b13      	ldr	r3, [pc, #76]	@ (800b434 <pvPortMalloc+0x188>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3f6:	4b13      	ldr	r3, [pc, #76]	@ (800b444 <pvPortMalloc+0x198>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	4a11      	ldr	r2, [pc, #68]	@ (800b444 <pvPortMalloc+0x198>)
 800b3fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b400:	f7fe ffb8 	bl	800a374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00b      	beq.n	800b426 <pvPortMalloc+0x17a>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60fb      	str	r3, [r7, #12]
}
 800b420:	bf00      	nop
 800b422:	bf00      	nop
 800b424:	e7fd      	b.n	800b422 <pvPortMalloc+0x176>
	return pvReturn;
 800b426:	69fb      	ldr	r3, [r7, #28]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3728      	adds	r7, #40	@ 0x28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20001718 	.word	0x20001718
 800b434:	2000172c 	.word	0x2000172c
 800b438:	2000171c 	.word	0x2000171c
 800b43c:	20001710 	.word	0x20001710
 800b440:	20001720 	.word	0x20001720
 800b444:	20001724 	.word	0x20001724

0800b448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d04f      	beq.n	800b4fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b45a:	2308      	movs	r3, #8
 800b45c:	425b      	negs	r3, r3
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4413      	add	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	4b25      	ldr	r3, [pc, #148]	@ (800b504 <vPortFree+0xbc>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4013      	ands	r3, r2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <vPortFree+0x46>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	60fb      	str	r3, [r7, #12]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <vPortFree+0x66>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60bb      	str	r3, [r7, #8]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	4b14      	ldr	r3, [pc, #80]	@ (800b504 <vPortFree+0xbc>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01e      	beq.n	800b4fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d11a      	bne.n	800b4fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b504 <vPortFree+0xbc>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	43db      	mvns	r3, r3
 800b4ce:	401a      	ands	r2, r3
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4d4:	f7fe ff40 	bl	800a358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b508 <vPortFree+0xc0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4a09      	ldr	r2, [pc, #36]	@ (800b508 <vPortFree+0xc0>)
 800b4e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4e6:	6938      	ldr	r0, [r7, #16]
 800b4e8:	f000 f874 	bl	800b5d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4ec:	4b07      	ldr	r3, [pc, #28]	@ (800b50c <vPortFree+0xc4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	4a06      	ldr	r2, [pc, #24]	@ (800b50c <vPortFree+0xc4>)
 800b4f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4f6:	f7fe ff3d 	bl	800a374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4fa:	bf00      	nop
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	2000172c 	.word	0x2000172c
 800b508:	2000171c 	.word	0x2000171c
 800b50c:	20001728 	.word	0x20001728

0800b510 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b51a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b51c:	4b27      	ldr	r3, [pc, #156]	@ (800b5bc <prvHeapInit+0xac>)
 800b51e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f003 0307 	and.w	r3, r3, #7
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00c      	beq.n	800b544 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3307      	adds	r3, #7
 800b52e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 0307 	bic.w	r3, r3, #7
 800b536:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	4a1f      	ldr	r2, [pc, #124]	@ (800b5bc <prvHeapInit+0xac>)
 800b540:	4413      	add	r3, r2
 800b542:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b548:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c0 <prvHeapInit+0xb0>)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b54e:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c0 <prvHeapInit+0xb0>)
 800b550:	2200      	movs	r2, #0
 800b552:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	4413      	add	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b55c:	2208      	movs	r2, #8
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 0307 	bic.w	r3, r3, #7
 800b56a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4a15      	ldr	r2, [pc, #84]	@ (800b5c4 <prvHeapInit+0xb4>)
 800b570:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b572:	4b14      	ldr	r3, [pc, #80]	@ (800b5c4 <prvHeapInit+0xb4>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2200      	movs	r2, #0
 800b578:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b57a:	4b12      	ldr	r3, [pc, #72]	@ (800b5c4 <prvHeapInit+0xb4>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	1ad2      	subs	r2, r2, r3
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b590:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c4 <prvHeapInit+0xb4>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	4a0a      	ldr	r2, [pc, #40]	@ (800b5c8 <prvHeapInit+0xb8>)
 800b59e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	4a09      	ldr	r2, [pc, #36]	@ (800b5cc <prvHeapInit+0xbc>)
 800b5a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5a8:	4b09      	ldr	r3, [pc, #36]	@ (800b5d0 <prvHeapInit+0xc0>)
 800b5aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b5ae:	601a      	str	r2, [r3, #0]
}
 800b5b0:	bf00      	nop
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20000b58 	.word	0x20000b58
 800b5c0:	20001710 	.word	0x20001710
 800b5c4:	20001718 	.word	0x20001718
 800b5c8:	20001720 	.word	0x20001720
 800b5cc:	2000171c 	.word	0x2000171c
 800b5d0:	2000172c 	.word	0x2000172c

0800b5d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5dc:	4b28      	ldr	r3, [pc, #160]	@ (800b680 <prvInsertBlockIntoFreeList+0xac>)
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e002      	b.n	800b5e8 <prvInsertBlockIntoFreeList+0x14>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d8f7      	bhi.n	800b5e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d108      	bne.n	800b616 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	441a      	add	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d118      	bne.n	800b65c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4b15      	ldr	r3, [pc, #84]	@ (800b684 <prvInsertBlockIntoFreeList+0xb0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d00d      	beq.n	800b652 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	441a      	add	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e008      	b.n	800b664 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b652:	4b0c      	ldr	r3, [pc, #48]	@ (800b684 <prvInsertBlockIntoFreeList+0xb0>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e003      	b.n	800b664 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d002      	beq.n	800b672 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	20001710 	.word	0x20001710
 800b684:	20001718 	.word	0x20001718

0800b688 <std>:
 800b688:	2300      	movs	r3, #0
 800b68a:	b510      	push	{r4, lr}
 800b68c:	4604      	mov	r4, r0
 800b68e:	e9c0 3300 	strd	r3, r3, [r0]
 800b692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b696:	6083      	str	r3, [r0, #8]
 800b698:	8181      	strh	r1, [r0, #12]
 800b69a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b69c:	81c2      	strh	r2, [r0, #14]
 800b69e:	6183      	str	r3, [r0, #24]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	305c      	adds	r0, #92	@ 0x5c
 800b6a6:	f000 fa1b 	bl	800bae0 <memset>
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e0 <std+0x58>)
 800b6ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <std+0x5c>)
 800b6b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e8 <std+0x60>)
 800b6b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ec <std+0x64>)
 800b6b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <std+0x68>)
 800b6bc:	6224      	str	r4, [r4, #32]
 800b6be:	429c      	cmp	r4, r3
 800b6c0:	d006      	beq.n	800b6d0 <std+0x48>
 800b6c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6c6:	4294      	cmp	r4, r2
 800b6c8:	d002      	beq.n	800b6d0 <std+0x48>
 800b6ca:	33d0      	adds	r3, #208	@ 0xd0
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d105      	bne.n	800b6dc <std+0x54>
 800b6d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d8:	f000 bad0 	b.w	800bc7c <__retarget_lock_init_recursive>
 800b6dc:	bd10      	pop	{r4, pc}
 800b6de:	bf00      	nop
 800b6e0:	0800b931 	.word	0x0800b931
 800b6e4:	0800b953 	.word	0x0800b953
 800b6e8:	0800b98b 	.word	0x0800b98b
 800b6ec:	0800b9af 	.word	0x0800b9af
 800b6f0:	20001730 	.word	0x20001730

0800b6f4 <stdio_exit_handler>:
 800b6f4:	4a02      	ldr	r2, [pc, #8]	@ (800b700 <stdio_exit_handler+0xc>)
 800b6f6:	4903      	ldr	r1, [pc, #12]	@ (800b704 <stdio_exit_handler+0x10>)
 800b6f8:	4803      	ldr	r0, [pc, #12]	@ (800b708 <stdio_exit_handler+0x14>)
 800b6fa:	f000 b869 	b.w	800b7d0 <_fwalk_sglue>
 800b6fe:	bf00      	nop
 800b700:	20000044 	.word	0x20000044
 800b704:	0800c565 	.word	0x0800c565
 800b708:	20000054 	.word	0x20000054

0800b70c <cleanup_stdio>:
 800b70c:	6841      	ldr	r1, [r0, #4]
 800b70e:	4b0c      	ldr	r3, [pc, #48]	@ (800b740 <cleanup_stdio+0x34>)
 800b710:	4299      	cmp	r1, r3
 800b712:	b510      	push	{r4, lr}
 800b714:	4604      	mov	r4, r0
 800b716:	d001      	beq.n	800b71c <cleanup_stdio+0x10>
 800b718:	f000 ff24 	bl	800c564 <_fflush_r>
 800b71c:	68a1      	ldr	r1, [r4, #8]
 800b71e:	4b09      	ldr	r3, [pc, #36]	@ (800b744 <cleanup_stdio+0x38>)
 800b720:	4299      	cmp	r1, r3
 800b722:	d002      	beq.n	800b72a <cleanup_stdio+0x1e>
 800b724:	4620      	mov	r0, r4
 800b726:	f000 ff1d 	bl	800c564 <_fflush_r>
 800b72a:	68e1      	ldr	r1, [r4, #12]
 800b72c:	4b06      	ldr	r3, [pc, #24]	@ (800b748 <cleanup_stdio+0x3c>)
 800b72e:	4299      	cmp	r1, r3
 800b730:	d004      	beq.n	800b73c <cleanup_stdio+0x30>
 800b732:	4620      	mov	r0, r4
 800b734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b738:	f000 bf14 	b.w	800c564 <_fflush_r>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	20001730 	.word	0x20001730
 800b744:	20001798 	.word	0x20001798
 800b748:	20001800 	.word	0x20001800

0800b74c <global_stdio_init.part.0>:
 800b74c:	b510      	push	{r4, lr}
 800b74e:	4b0b      	ldr	r3, [pc, #44]	@ (800b77c <global_stdio_init.part.0+0x30>)
 800b750:	4c0b      	ldr	r4, [pc, #44]	@ (800b780 <global_stdio_init.part.0+0x34>)
 800b752:	4a0c      	ldr	r2, [pc, #48]	@ (800b784 <global_stdio_init.part.0+0x38>)
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	4620      	mov	r0, r4
 800b758:	2200      	movs	r2, #0
 800b75a:	2104      	movs	r1, #4
 800b75c:	f7ff ff94 	bl	800b688 <std>
 800b760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b764:	2201      	movs	r2, #1
 800b766:	2109      	movs	r1, #9
 800b768:	f7ff ff8e 	bl	800b688 <std>
 800b76c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b770:	2202      	movs	r2, #2
 800b772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b776:	2112      	movs	r1, #18
 800b778:	f7ff bf86 	b.w	800b688 <std>
 800b77c:	20001868 	.word	0x20001868
 800b780:	20001730 	.word	0x20001730
 800b784:	0800b6f5 	.word	0x0800b6f5

0800b788 <__sfp_lock_acquire>:
 800b788:	4801      	ldr	r0, [pc, #4]	@ (800b790 <__sfp_lock_acquire+0x8>)
 800b78a:	f000 ba78 	b.w	800bc7e <__retarget_lock_acquire_recursive>
 800b78e:	bf00      	nop
 800b790:	20001871 	.word	0x20001871

0800b794 <__sfp_lock_release>:
 800b794:	4801      	ldr	r0, [pc, #4]	@ (800b79c <__sfp_lock_release+0x8>)
 800b796:	f000 ba73 	b.w	800bc80 <__retarget_lock_release_recursive>
 800b79a:	bf00      	nop
 800b79c:	20001871 	.word	0x20001871

0800b7a0 <__sinit>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	f7ff fff0 	bl	800b788 <__sfp_lock_acquire>
 800b7a8:	6a23      	ldr	r3, [r4, #32]
 800b7aa:	b11b      	cbz	r3, 800b7b4 <__sinit+0x14>
 800b7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b0:	f7ff bff0 	b.w	800b794 <__sfp_lock_release>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	@ (800b7c8 <__sinit+0x28>)
 800b7b6:	6223      	str	r3, [r4, #32]
 800b7b8:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <__sinit+0x2c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f5      	bne.n	800b7ac <__sinit+0xc>
 800b7c0:	f7ff ffc4 	bl	800b74c <global_stdio_init.part.0>
 800b7c4:	e7f2      	b.n	800b7ac <__sinit+0xc>
 800b7c6:	bf00      	nop
 800b7c8:	0800b70d 	.word	0x0800b70d
 800b7cc:	20001868 	.word	0x20001868

0800b7d0 <_fwalk_sglue>:
 800b7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	4688      	mov	r8, r1
 800b7d8:	4614      	mov	r4, r2
 800b7da:	2600      	movs	r6, #0
 800b7dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b7e4:	d505      	bpl.n	800b7f2 <_fwalk_sglue+0x22>
 800b7e6:	6824      	ldr	r4, [r4, #0]
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	d1f7      	bne.n	800b7dc <_fwalk_sglue+0xc>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f2:	89ab      	ldrh	r3, [r5, #12]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d907      	bls.n	800b808 <_fwalk_sglue+0x38>
 800b7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	d003      	beq.n	800b808 <_fwalk_sglue+0x38>
 800b800:	4629      	mov	r1, r5
 800b802:	4638      	mov	r0, r7
 800b804:	47c0      	blx	r8
 800b806:	4306      	orrs	r6, r0
 800b808:	3568      	adds	r5, #104	@ 0x68
 800b80a:	e7e9      	b.n	800b7e0 <_fwalk_sglue+0x10>

0800b80c <_puts_r>:
 800b80c:	6a03      	ldr	r3, [r0, #32]
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	6884      	ldr	r4, [r0, #8]
 800b812:	4605      	mov	r5, r0
 800b814:	460e      	mov	r6, r1
 800b816:	b90b      	cbnz	r3, 800b81c <_puts_r+0x10>
 800b818:	f7ff ffc2 	bl	800b7a0 <__sinit>
 800b81c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d405      	bmi.n	800b82e <_puts_r+0x22>
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d402      	bmi.n	800b82e <_puts_r+0x22>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f000 fa28 	bl	800bc7e <__retarget_lock_acquire_recursive>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	0719      	lsls	r1, r3, #28
 800b832:	d502      	bpl.n	800b83a <_puts_r+0x2e>
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d135      	bne.n	800b8a6 <_puts_r+0x9a>
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 f8f9 	bl	800ba34 <__swsetup_r>
 800b842:	b380      	cbz	r0, 800b8a6 <_puts_r+0x9a>
 800b844:	f04f 35ff 	mov.w	r5, #4294967295
 800b848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b84a:	07da      	lsls	r2, r3, #31
 800b84c:	d405      	bmi.n	800b85a <_puts_r+0x4e>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	059b      	lsls	r3, r3, #22
 800b852:	d402      	bmi.n	800b85a <_puts_r+0x4e>
 800b854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b856:	f000 fa13 	bl	800bc80 <__retarget_lock_release_recursive>
 800b85a:	4628      	mov	r0, r5
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	2b00      	cmp	r3, #0
 800b860:	da04      	bge.n	800b86c <_puts_r+0x60>
 800b862:	69a2      	ldr	r2, [r4, #24]
 800b864:	429a      	cmp	r2, r3
 800b866:	dc17      	bgt.n	800b898 <_puts_r+0x8c>
 800b868:	290a      	cmp	r1, #10
 800b86a:	d015      	beq.n	800b898 <_puts_r+0x8c>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	6022      	str	r2, [r4, #0]
 800b872:	7019      	strb	r1, [r3, #0]
 800b874:	68a3      	ldr	r3, [r4, #8]
 800b876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b87a:	3b01      	subs	r3, #1
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	2900      	cmp	r1, #0
 800b880:	d1ed      	bne.n	800b85e <_puts_r+0x52>
 800b882:	2b00      	cmp	r3, #0
 800b884:	da11      	bge.n	800b8aa <_puts_r+0x9e>
 800b886:	4622      	mov	r2, r4
 800b888:	210a      	movs	r1, #10
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f893 	bl	800b9b6 <__swbuf_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d0d7      	beq.n	800b844 <_puts_r+0x38>
 800b894:	250a      	movs	r5, #10
 800b896:	e7d7      	b.n	800b848 <_puts_r+0x3c>
 800b898:	4622      	mov	r2, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 f88b 	bl	800b9b6 <__swbuf_r>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d1e7      	bne.n	800b874 <_puts_r+0x68>
 800b8a4:	e7ce      	b.n	800b844 <_puts_r+0x38>
 800b8a6:	3e01      	subs	r6, #1
 800b8a8:	e7e4      	b.n	800b874 <_puts_r+0x68>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e7ee      	b.n	800b894 <_puts_r+0x88>
	...

0800b8b8 <puts>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	@ (800b8c4 <puts+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7ff bfa5 	b.w	800b80c <_puts_r>
 800b8c2:	bf00      	nop
 800b8c4:	20000050 	.word	0x20000050

0800b8c8 <sniprintf>:
 800b8c8:	b40c      	push	{r2, r3}
 800b8ca:	b530      	push	{r4, r5, lr}
 800b8cc:	4b17      	ldr	r3, [pc, #92]	@ (800b92c <sniprintf+0x64>)
 800b8ce:	1e0c      	subs	r4, r1, #0
 800b8d0:	681d      	ldr	r5, [r3, #0]
 800b8d2:	b09d      	sub	sp, #116	@ 0x74
 800b8d4:	da08      	bge.n	800b8e8 <sniprintf+0x20>
 800b8d6:	238b      	movs	r3, #139	@ 0x8b
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	b01d      	add	sp, #116	@ 0x74
 800b8e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8e4:	b002      	add	sp, #8
 800b8e6:	4770      	bx	lr
 800b8e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b8f0:	bf14      	ite	ne
 800b8f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b8f6:	4623      	moveq	r3, r4
 800b8f8:	9304      	str	r3, [sp, #16]
 800b8fa:	9307      	str	r3, [sp, #28]
 800b8fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b900:	9002      	str	r0, [sp, #8]
 800b902:	9006      	str	r0, [sp, #24]
 800b904:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b908:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b90a:	ab21      	add	r3, sp, #132	@ 0x84
 800b90c:	a902      	add	r1, sp, #8
 800b90e:	4628      	mov	r0, r5
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	f000 fb19 	bl	800bf48 <_svfiprintf_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	bfbc      	itt	lt
 800b91a:	238b      	movlt	r3, #139	@ 0x8b
 800b91c:	602b      	strlt	r3, [r5, #0]
 800b91e:	2c00      	cmp	r4, #0
 800b920:	d0dd      	beq.n	800b8de <sniprintf+0x16>
 800b922:	9b02      	ldr	r3, [sp, #8]
 800b924:	2200      	movs	r2, #0
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	e7d9      	b.n	800b8de <sniprintf+0x16>
 800b92a:	bf00      	nop
 800b92c:	20000050 	.word	0x20000050

0800b930 <__sread>:
 800b930:	b510      	push	{r4, lr}
 800b932:	460c      	mov	r4, r1
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	f000 f952 	bl	800bbe0 <_read_r>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	bfab      	itete	ge
 800b940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b942:	89a3      	ldrhlt	r3, [r4, #12]
 800b944:	181b      	addge	r3, r3, r0
 800b946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b94a:	bfac      	ite	ge
 800b94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b94e:	81a3      	strhlt	r3, [r4, #12]
 800b950:	bd10      	pop	{r4, pc}

0800b952 <__swrite>:
 800b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	461f      	mov	r7, r3
 800b958:	898b      	ldrh	r3, [r1, #12]
 800b95a:	05db      	lsls	r3, r3, #23
 800b95c:	4605      	mov	r5, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	4616      	mov	r6, r2
 800b962:	d505      	bpl.n	800b970 <__swrite+0x1e>
 800b964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b968:	2302      	movs	r3, #2
 800b96a:	2200      	movs	r2, #0
 800b96c:	f000 f926 	bl	800bbbc <_lseek_r>
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	4628      	mov	r0, r5
 800b982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b986:	f000 b93d 	b.w	800bc04 <_write_r>

0800b98a <__sseek>:
 800b98a:	b510      	push	{r4, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b992:	f000 f913 	bl	800bbbc <_lseek_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	bf15      	itete	ne
 800b99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9a6:	81a3      	strheq	r3, [r4, #12]
 800b9a8:	bf18      	it	ne
 800b9aa:	81a3      	strhne	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__sclose>:
 800b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b2:	f000 b89d 	b.w	800baf0 <_close_r>

0800b9b6 <__swbuf_r>:
 800b9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b8:	460e      	mov	r6, r1
 800b9ba:	4614      	mov	r4, r2
 800b9bc:	4605      	mov	r5, r0
 800b9be:	b118      	cbz	r0, 800b9c8 <__swbuf_r+0x12>
 800b9c0:	6a03      	ldr	r3, [r0, #32]
 800b9c2:	b90b      	cbnz	r3, 800b9c8 <__swbuf_r+0x12>
 800b9c4:	f7ff feec 	bl	800b7a0 <__sinit>
 800b9c8:	69a3      	ldr	r3, [r4, #24]
 800b9ca:	60a3      	str	r3, [r4, #8]
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	071a      	lsls	r2, r3, #28
 800b9d0:	d501      	bpl.n	800b9d6 <__swbuf_r+0x20>
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	b943      	cbnz	r3, 800b9e8 <__swbuf_r+0x32>
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f000 f82b 	bl	800ba34 <__swsetup_r>
 800b9de:	b118      	cbz	r0, 800b9e8 <__swbuf_r+0x32>
 800b9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	6922      	ldr	r2, [r4, #16]
 800b9ec:	1a98      	subs	r0, r3, r2
 800b9ee:	6963      	ldr	r3, [r4, #20]
 800b9f0:	b2f6      	uxtb	r6, r6
 800b9f2:	4283      	cmp	r3, r0
 800b9f4:	4637      	mov	r7, r6
 800b9f6:	dc05      	bgt.n	800ba04 <__swbuf_r+0x4e>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 fdb2 	bl	800c564 <_fflush_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1ed      	bne.n	800b9e0 <__swbuf_r+0x2a>
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	6022      	str	r2, [r4, #0]
 800ba10:	701e      	strb	r6, [r3, #0]
 800ba12:	6962      	ldr	r2, [r4, #20]
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d004      	beq.n	800ba24 <__swbuf_r+0x6e>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	07db      	lsls	r3, r3, #31
 800ba1e:	d5e1      	bpl.n	800b9e4 <__swbuf_r+0x2e>
 800ba20:	2e0a      	cmp	r6, #10
 800ba22:	d1df      	bne.n	800b9e4 <__swbuf_r+0x2e>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 fd9c 	bl	800c564 <_fflush_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d0d9      	beq.n	800b9e4 <__swbuf_r+0x2e>
 800ba30:	e7d6      	b.n	800b9e0 <__swbuf_r+0x2a>
	...

0800ba34 <__swsetup_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4b29      	ldr	r3, [pc, #164]	@ (800badc <__swsetup_r+0xa8>)
 800ba38:	4605      	mov	r5, r0
 800ba3a:	6818      	ldr	r0, [r3, #0]
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	b118      	cbz	r0, 800ba48 <__swsetup_r+0x14>
 800ba40:	6a03      	ldr	r3, [r0, #32]
 800ba42:	b90b      	cbnz	r3, 800ba48 <__swsetup_r+0x14>
 800ba44:	f7ff feac 	bl	800b7a0 <__sinit>
 800ba48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4c:	0719      	lsls	r1, r3, #28
 800ba4e:	d422      	bmi.n	800ba96 <__swsetup_r+0x62>
 800ba50:	06da      	lsls	r2, r3, #27
 800ba52:	d407      	bmi.n	800ba64 <__swsetup_r+0x30>
 800ba54:	2209      	movs	r2, #9
 800ba56:	602a      	str	r2, [r5, #0]
 800ba58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba62:	e033      	b.n	800bacc <__swsetup_r+0x98>
 800ba64:	0758      	lsls	r0, r3, #29
 800ba66:	d512      	bpl.n	800ba8e <__swsetup_r+0x5a>
 800ba68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba6a:	b141      	cbz	r1, 800ba7e <__swsetup_r+0x4a>
 800ba6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba70:	4299      	cmp	r1, r3
 800ba72:	d002      	beq.n	800ba7a <__swsetup_r+0x46>
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 f913 	bl	800bca0 <_free_r>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	2300      	movs	r3, #0
 800ba88:	6063      	str	r3, [r4, #4]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f043 0308 	orr.w	r3, r3, #8
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	b94b      	cbnz	r3, 800baae <__swsetup_r+0x7a>
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800baa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baa4:	d003      	beq.n	800baae <__swsetup_r+0x7a>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4628      	mov	r0, r5
 800baaa:	f000 fda9 	bl	800c600 <__smakebuf_r>
 800baae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab2:	f013 0201 	ands.w	r2, r3, #1
 800bab6:	d00a      	beq.n	800bace <__swsetup_r+0x9a>
 800bab8:	2200      	movs	r2, #0
 800baba:	60a2      	str	r2, [r4, #8]
 800babc:	6962      	ldr	r2, [r4, #20]
 800babe:	4252      	negs	r2, r2
 800bac0:	61a2      	str	r2, [r4, #24]
 800bac2:	6922      	ldr	r2, [r4, #16]
 800bac4:	b942      	cbnz	r2, 800bad8 <__swsetup_r+0xa4>
 800bac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baca:	d1c5      	bne.n	800ba58 <__swsetup_r+0x24>
 800bacc:	bd38      	pop	{r3, r4, r5, pc}
 800bace:	0799      	lsls	r1, r3, #30
 800bad0:	bf58      	it	pl
 800bad2:	6962      	ldrpl	r2, [r4, #20]
 800bad4:	60a2      	str	r2, [r4, #8]
 800bad6:	e7f4      	b.n	800bac2 <__swsetup_r+0x8e>
 800bad8:	2000      	movs	r0, #0
 800bada:	e7f7      	b.n	800bacc <__swsetup_r+0x98>
 800badc:	20000050 	.word	0x20000050

0800bae0 <memset>:
 800bae0:	4402      	add	r2, r0
 800bae2:	4603      	mov	r3, r0
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d100      	bne.n	800baea <memset+0xa>
 800bae8:	4770      	bx	lr
 800baea:	f803 1b01 	strb.w	r1, [r3], #1
 800baee:	e7f9      	b.n	800bae4 <memset+0x4>

0800baf0 <_close_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	@ (800bb0c <_close_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f6 fb4f 	bl	800219e <_close>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_close_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_close_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	2000186c 	.word	0x2000186c

0800bb10 <_reclaim_reent>:
 800bb10:	4b29      	ldr	r3, [pc, #164]	@ (800bbb8 <_reclaim_reent+0xa8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4283      	cmp	r3, r0
 800bb16:	b570      	push	{r4, r5, r6, lr}
 800bb18:	4604      	mov	r4, r0
 800bb1a:	d04b      	beq.n	800bbb4 <_reclaim_reent+0xa4>
 800bb1c:	69c3      	ldr	r3, [r0, #28]
 800bb1e:	b1ab      	cbz	r3, 800bb4c <_reclaim_reent+0x3c>
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	b16b      	cbz	r3, 800bb40 <_reclaim_reent+0x30>
 800bb24:	2500      	movs	r5, #0
 800bb26:	69e3      	ldr	r3, [r4, #28]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	5959      	ldr	r1, [r3, r5]
 800bb2c:	2900      	cmp	r1, #0
 800bb2e:	d13b      	bne.n	800bba8 <_reclaim_reent+0x98>
 800bb30:	3504      	adds	r5, #4
 800bb32:	2d80      	cmp	r5, #128	@ 0x80
 800bb34:	d1f7      	bne.n	800bb26 <_reclaim_reent+0x16>
 800bb36:	69e3      	ldr	r3, [r4, #28]
 800bb38:	4620      	mov	r0, r4
 800bb3a:	68d9      	ldr	r1, [r3, #12]
 800bb3c:	f000 f8b0 	bl	800bca0 <_free_r>
 800bb40:	69e3      	ldr	r3, [r4, #28]
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	b111      	cbz	r1, 800bb4c <_reclaim_reent+0x3c>
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 f8aa 	bl	800bca0 <_free_r>
 800bb4c:	6961      	ldr	r1, [r4, #20]
 800bb4e:	b111      	cbz	r1, 800bb56 <_reclaim_reent+0x46>
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 f8a5 	bl	800bca0 <_free_r>
 800bb56:	69e1      	ldr	r1, [r4, #28]
 800bb58:	b111      	cbz	r1, 800bb60 <_reclaim_reent+0x50>
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f000 f8a0 	bl	800bca0 <_free_r>
 800bb60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bb62:	b111      	cbz	r1, 800bb6a <_reclaim_reent+0x5a>
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 f89b 	bl	800bca0 <_free_r>
 800bb6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb6c:	b111      	cbz	r1, 800bb74 <_reclaim_reent+0x64>
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f896 	bl	800bca0 <_free_r>
 800bb74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bb76:	b111      	cbz	r1, 800bb7e <_reclaim_reent+0x6e>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f891 	bl	800bca0 <_free_r>
 800bb7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb80:	b111      	cbz	r1, 800bb88 <_reclaim_reent+0x78>
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 f88c 	bl	800bca0 <_free_r>
 800bb88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bb8a:	b111      	cbz	r1, 800bb92 <_reclaim_reent+0x82>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 f887 	bl	800bca0 <_free_r>
 800bb92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bb94:	b111      	cbz	r1, 800bb9c <_reclaim_reent+0x8c>
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f882 	bl	800bca0 <_free_r>
 800bb9c:	6a23      	ldr	r3, [r4, #32]
 800bb9e:	b14b      	cbz	r3, 800bbb4 <_reclaim_reent+0xa4>
 800bba0:	4620      	mov	r0, r4
 800bba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bba6:	4718      	bx	r3
 800bba8:	680e      	ldr	r6, [r1, #0]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f878 	bl	800bca0 <_free_r>
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	e7bb      	b.n	800bb2c <_reclaim_reent+0x1c>
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000050 	.word	0x20000050

0800bbbc <_lseek_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d07      	ldr	r5, [pc, #28]	@ (800bbdc <_lseek_r+0x20>)
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f6 fb0e 	bl	80021ec <_lseek>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_lseek_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_lseek_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	2000186c 	.word	0x2000186c

0800bbe0 <_read_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d07      	ldr	r5, [pc, #28]	@ (800bc00 <_read_r+0x20>)
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	4611      	mov	r1, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	602a      	str	r2, [r5, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f7f6 fa9c 	bl	800212c <_read>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_read_r+0x1e>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_read_r+0x1e>
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	2000186c 	.word	0x2000186c

0800bc04 <_write_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4d07      	ldr	r5, [pc, #28]	@ (800bc24 <_write_r+0x20>)
 800bc08:	4604      	mov	r4, r0
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	602a      	str	r2, [r5, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	f7f6 faa7 	bl	8002166 <_write>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_write_r+0x1e>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_write_r+0x1e>
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	2000186c 	.word	0x2000186c

0800bc28 <__errno>:
 800bc28:	4b01      	ldr	r3, [pc, #4]	@ (800bc30 <__errno+0x8>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000050 	.word	0x20000050

0800bc34 <__libc_init_array>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	4d0d      	ldr	r5, [pc, #52]	@ (800bc6c <__libc_init_array+0x38>)
 800bc38:	4c0d      	ldr	r4, [pc, #52]	@ (800bc70 <__libc_init_array+0x3c>)
 800bc3a:	1b64      	subs	r4, r4, r5
 800bc3c:	10a4      	asrs	r4, r4, #2
 800bc3e:	2600      	movs	r6, #0
 800bc40:	42a6      	cmp	r6, r4
 800bc42:	d109      	bne.n	800bc58 <__libc_init_array+0x24>
 800bc44:	4d0b      	ldr	r5, [pc, #44]	@ (800bc74 <__libc_init_array+0x40>)
 800bc46:	4c0c      	ldr	r4, [pc, #48]	@ (800bc78 <__libc_init_array+0x44>)
 800bc48:	f000 fd98 	bl	800c77c <_init>
 800bc4c:	1b64      	subs	r4, r4, r5
 800bc4e:	10a4      	asrs	r4, r4, #2
 800bc50:	2600      	movs	r6, #0
 800bc52:	42a6      	cmp	r6, r4
 800bc54:	d105      	bne.n	800bc62 <__libc_init_array+0x2e>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5c:	4798      	blx	r3
 800bc5e:	3601      	adds	r6, #1
 800bc60:	e7ee      	b.n	800bc40 <__libc_init_array+0xc>
 800bc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc66:	4798      	blx	r3
 800bc68:	3601      	adds	r6, #1
 800bc6a:	e7f2      	b.n	800bc52 <__libc_init_array+0x1e>
 800bc6c:	0800c9c8 	.word	0x0800c9c8
 800bc70:	0800c9c8 	.word	0x0800c9c8
 800bc74:	0800c9c8 	.word	0x0800c9c8
 800bc78:	0800c9cc 	.word	0x0800c9cc

0800bc7c <__retarget_lock_init_recursive>:
 800bc7c:	4770      	bx	lr

0800bc7e <__retarget_lock_acquire_recursive>:
 800bc7e:	4770      	bx	lr

0800bc80 <__retarget_lock_release_recursive>:
 800bc80:	4770      	bx	lr

0800bc82 <memcpy>:
 800bc82:	440a      	add	r2, r1
 800bc84:	4291      	cmp	r1, r2
 800bc86:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc8a:	d100      	bne.n	800bc8e <memcpy+0xc>
 800bc8c:	4770      	bx	lr
 800bc8e:	b510      	push	{r4, lr}
 800bc90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc98:	4291      	cmp	r1, r2
 800bc9a:	d1f9      	bne.n	800bc90 <memcpy+0xe>
 800bc9c:	bd10      	pop	{r4, pc}
	...

0800bca0 <_free_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4605      	mov	r5, r0
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d041      	beq.n	800bd2c <_free_r+0x8c>
 800bca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcac:	1f0c      	subs	r4, r1, #4
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bfb8      	it	lt
 800bcb2:	18e4      	addlt	r4, r4, r3
 800bcb4:	f000 f8e0 	bl	800be78 <__malloc_lock>
 800bcb8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd30 <_free_r+0x90>)
 800bcba:	6813      	ldr	r3, [r2, #0]
 800bcbc:	b933      	cbnz	r3, 800bccc <_free_r+0x2c>
 800bcbe:	6063      	str	r3, [r4, #4]
 800bcc0:	6014      	str	r4, [r2, #0]
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcc8:	f000 b8dc 	b.w	800be84 <__malloc_unlock>
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	d908      	bls.n	800bce2 <_free_r+0x42>
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	1821      	adds	r1, r4, r0
 800bcd4:	428b      	cmp	r3, r1
 800bcd6:	bf01      	itttt	eq
 800bcd8:	6819      	ldreq	r1, [r3, #0]
 800bcda:	685b      	ldreq	r3, [r3, #4]
 800bcdc:	1809      	addeq	r1, r1, r0
 800bcde:	6021      	streq	r1, [r4, #0]
 800bce0:	e7ed      	b.n	800bcbe <_free_r+0x1e>
 800bce2:	461a      	mov	r2, r3
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	b10b      	cbz	r3, 800bcec <_free_r+0x4c>
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d9fa      	bls.n	800bce2 <_free_r+0x42>
 800bcec:	6811      	ldr	r1, [r2, #0]
 800bcee:	1850      	adds	r0, r2, r1
 800bcf0:	42a0      	cmp	r0, r4
 800bcf2:	d10b      	bne.n	800bd0c <_free_r+0x6c>
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	4401      	add	r1, r0
 800bcf8:	1850      	adds	r0, r2, r1
 800bcfa:	4283      	cmp	r3, r0
 800bcfc:	6011      	str	r1, [r2, #0]
 800bcfe:	d1e0      	bne.n	800bcc2 <_free_r+0x22>
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	6053      	str	r3, [r2, #4]
 800bd06:	4408      	add	r0, r1
 800bd08:	6010      	str	r0, [r2, #0]
 800bd0a:	e7da      	b.n	800bcc2 <_free_r+0x22>
 800bd0c:	d902      	bls.n	800bd14 <_free_r+0x74>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	602b      	str	r3, [r5, #0]
 800bd12:	e7d6      	b.n	800bcc2 <_free_r+0x22>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	1821      	adds	r1, r4, r0
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	bf04      	itt	eq
 800bd1c:	6819      	ldreq	r1, [r3, #0]
 800bd1e:	685b      	ldreq	r3, [r3, #4]
 800bd20:	6063      	str	r3, [r4, #4]
 800bd22:	bf04      	itt	eq
 800bd24:	1809      	addeq	r1, r1, r0
 800bd26:	6021      	streq	r1, [r4, #0]
 800bd28:	6054      	str	r4, [r2, #4]
 800bd2a:	e7ca      	b.n	800bcc2 <_free_r+0x22>
 800bd2c:	bd38      	pop	{r3, r4, r5, pc}
 800bd2e:	bf00      	nop
 800bd30:	20001878 	.word	0x20001878

0800bd34 <sbrk_aligned>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	4e0f      	ldr	r6, [pc, #60]	@ (800bd74 <sbrk_aligned+0x40>)
 800bd38:	460c      	mov	r4, r1
 800bd3a:	6831      	ldr	r1, [r6, #0]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	b911      	cbnz	r1, 800bd46 <sbrk_aligned+0x12>
 800bd40:	f000 fcd6 	bl	800c6f0 <_sbrk_r>
 800bd44:	6030      	str	r0, [r6, #0]
 800bd46:	4621      	mov	r1, r4
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 fcd1 	bl	800c6f0 <_sbrk_r>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d103      	bne.n	800bd5a <sbrk_aligned+0x26>
 800bd52:	f04f 34ff 	mov.w	r4, #4294967295
 800bd56:	4620      	mov	r0, r4
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
 800bd5a:	1cc4      	adds	r4, r0, #3
 800bd5c:	f024 0403 	bic.w	r4, r4, #3
 800bd60:	42a0      	cmp	r0, r4
 800bd62:	d0f8      	beq.n	800bd56 <sbrk_aligned+0x22>
 800bd64:	1a21      	subs	r1, r4, r0
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 fcc2 	bl	800c6f0 <_sbrk_r>
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d1f2      	bne.n	800bd56 <sbrk_aligned+0x22>
 800bd70:	e7ef      	b.n	800bd52 <sbrk_aligned+0x1e>
 800bd72:	bf00      	nop
 800bd74:	20001874 	.word	0x20001874

0800bd78 <_malloc_r>:
 800bd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd7c:	1ccd      	adds	r5, r1, #3
 800bd7e:	f025 0503 	bic.w	r5, r5, #3
 800bd82:	3508      	adds	r5, #8
 800bd84:	2d0c      	cmp	r5, #12
 800bd86:	bf38      	it	cc
 800bd88:	250c      	movcc	r5, #12
 800bd8a:	2d00      	cmp	r5, #0
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	db01      	blt.n	800bd94 <_malloc_r+0x1c>
 800bd90:	42a9      	cmp	r1, r5
 800bd92:	d904      	bls.n	800bd9e <_malloc_r+0x26>
 800bd94:	230c      	movs	r3, #12
 800bd96:	6033      	str	r3, [r6, #0]
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be74 <_malloc_r+0xfc>
 800bda2:	f000 f869 	bl	800be78 <__malloc_lock>
 800bda6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdaa:	461c      	mov	r4, r3
 800bdac:	bb44      	cbnz	r4, 800be00 <_malloc_r+0x88>
 800bdae:	4629      	mov	r1, r5
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7ff ffbf 	bl	800bd34 <sbrk_aligned>
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	4604      	mov	r4, r0
 800bdba:	d158      	bne.n	800be6e <_malloc_r+0xf6>
 800bdbc:	f8d8 4000 	ldr.w	r4, [r8]
 800bdc0:	4627      	mov	r7, r4
 800bdc2:	2f00      	cmp	r7, #0
 800bdc4:	d143      	bne.n	800be4e <_malloc_r+0xd6>
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	d04b      	beq.n	800be62 <_malloc_r+0xea>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4630      	mov	r0, r6
 800bdd0:	eb04 0903 	add.w	r9, r4, r3
 800bdd4:	f000 fc8c 	bl	800c6f0 <_sbrk_r>
 800bdd8:	4581      	cmp	r9, r0
 800bdda:	d142      	bne.n	800be62 <_malloc_r+0xea>
 800bddc:	6821      	ldr	r1, [r4, #0]
 800bdde:	1a6d      	subs	r5, r5, r1
 800bde0:	4629      	mov	r1, r5
 800bde2:	4630      	mov	r0, r6
 800bde4:	f7ff ffa6 	bl	800bd34 <sbrk_aligned>
 800bde8:	3001      	adds	r0, #1
 800bdea:	d03a      	beq.n	800be62 <_malloc_r+0xea>
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	442b      	add	r3, r5
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	bb62      	cbnz	r2, 800be54 <_malloc_r+0xdc>
 800bdfa:	f8c8 7000 	str.w	r7, [r8]
 800bdfe:	e00f      	b.n	800be20 <_malloc_r+0xa8>
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	1b52      	subs	r2, r2, r5
 800be04:	d420      	bmi.n	800be48 <_malloc_r+0xd0>
 800be06:	2a0b      	cmp	r2, #11
 800be08:	d917      	bls.n	800be3a <_malloc_r+0xc2>
 800be0a:	1961      	adds	r1, r4, r5
 800be0c:	42a3      	cmp	r3, r4
 800be0e:	6025      	str	r5, [r4, #0]
 800be10:	bf18      	it	ne
 800be12:	6059      	strne	r1, [r3, #4]
 800be14:	6863      	ldr	r3, [r4, #4]
 800be16:	bf08      	it	eq
 800be18:	f8c8 1000 	streq.w	r1, [r8]
 800be1c:	5162      	str	r2, [r4, r5]
 800be1e:	604b      	str	r3, [r1, #4]
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f82f 	bl	800be84 <__malloc_unlock>
 800be26:	f104 000b 	add.w	r0, r4, #11
 800be2a:	1d23      	adds	r3, r4, #4
 800be2c:	f020 0007 	bic.w	r0, r0, #7
 800be30:	1ac2      	subs	r2, r0, r3
 800be32:	bf1c      	itt	ne
 800be34:	1a1b      	subne	r3, r3, r0
 800be36:	50a3      	strne	r3, [r4, r2]
 800be38:	e7af      	b.n	800bd9a <_malloc_r+0x22>
 800be3a:	6862      	ldr	r2, [r4, #4]
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	bf0c      	ite	eq
 800be40:	f8c8 2000 	streq.w	r2, [r8]
 800be44:	605a      	strne	r2, [r3, #4]
 800be46:	e7eb      	b.n	800be20 <_malloc_r+0xa8>
 800be48:	4623      	mov	r3, r4
 800be4a:	6864      	ldr	r4, [r4, #4]
 800be4c:	e7ae      	b.n	800bdac <_malloc_r+0x34>
 800be4e:	463c      	mov	r4, r7
 800be50:	687f      	ldr	r7, [r7, #4]
 800be52:	e7b6      	b.n	800bdc2 <_malloc_r+0x4a>
 800be54:	461a      	mov	r2, r3
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d1fb      	bne.n	800be54 <_malloc_r+0xdc>
 800be5c:	2300      	movs	r3, #0
 800be5e:	6053      	str	r3, [r2, #4]
 800be60:	e7de      	b.n	800be20 <_malloc_r+0xa8>
 800be62:	230c      	movs	r3, #12
 800be64:	6033      	str	r3, [r6, #0]
 800be66:	4630      	mov	r0, r6
 800be68:	f000 f80c 	bl	800be84 <__malloc_unlock>
 800be6c:	e794      	b.n	800bd98 <_malloc_r+0x20>
 800be6e:	6005      	str	r5, [r0, #0]
 800be70:	e7d6      	b.n	800be20 <_malloc_r+0xa8>
 800be72:	bf00      	nop
 800be74:	20001878 	.word	0x20001878

0800be78 <__malloc_lock>:
 800be78:	4801      	ldr	r0, [pc, #4]	@ (800be80 <__malloc_lock+0x8>)
 800be7a:	f7ff bf00 	b.w	800bc7e <__retarget_lock_acquire_recursive>
 800be7e:	bf00      	nop
 800be80:	20001870 	.word	0x20001870

0800be84 <__malloc_unlock>:
 800be84:	4801      	ldr	r0, [pc, #4]	@ (800be8c <__malloc_unlock+0x8>)
 800be86:	f7ff befb 	b.w	800bc80 <__retarget_lock_release_recursive>
 800be8a:	bf00      	nop
 800be8c:	20001870 	.word	0x20001870

0800be90 <__ssputs_r>:
 800be90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	688e      	ldr	r6, [r1, #8]
 800be96:	461f      	mov	r7, r3
 800be98:	42be      	cmp	r6, r7
 800be9a:	680b      	ldr	r3, [r1, #0]
 800be9c:	4682      	mov	sl, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	4690      	mov	r8, r2
 800bea2:	d82d      	bhi.n	800bf00 <__ssputs_r+0x70>
 800bea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bea8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800beac:	d026      	beq.n	800befc <__ssputs_r+0x6c>
 800beae:	6965      	ldr	r5, [r4, #20]
 800beb0:	6909      	ldr	r1, [r1, #16]
 800beb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800beb6:	eba3 0901 	sub.w	r9, r3, r1
 800beba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bebe:	1c7b      	adds	r3, r7, #1
 800bec0:	444b      	add	r3, r9
 800bec2:	106d      	asrs	r5, r5, #1
 800bec4:	429d      	cmp	r5, r3
 800bec6:	bf38      	it	cc
 800bec8:	461d      	movcc	r5, r3
 800beca:	0553      	lsls	r3, r2, #21
 800becc:	d527      	bpl.n	800bf1e <__ssputs_r+0x8e>
 800bece:	4629      	mov	r1, r5
 800bed0:	f7ff ff52 	bl	800bd78 <_malloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	b360      	cbz	r0, 800bf32 <__ssputs_r+0xa2>
 800bed8:	6921      	ldr	r1, [r4, #16]
 800beda:	464a      	mov	r2, r9
 800bedc:	f7ff fed1 	bl	800bc82 <memcpy>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	6126      	str	r6, [r4, #16]
 800beee:	6165      	str	r5, [r4, #20]
 800bef0:	444e      	add	r6, r9
 800bef2:	eba5 0509 	sub.w	r5, r5, r9
 800bef6:	6026      	str	r6, [r4, #0]
 800bef8:	60a5      	str	r5, [r4, #8]
 800befa:	463e      	mov	r6, r7
 800befc:	42be      	cmp	r6, r7
 800befe:	d900      	bls.n	800bf02 <__ssputs_r+0x72>
 800bf00:	463e      	mov	r6, r7
 800bf02:	6820      	ldr	r0, [r4, #0]
 800bf04:	4632      	mov	r2, r6
 800bf06:	4641      	mov	r1, r8
 800bf08:	f000 fbb6 	bl	800c678 <memmove>
 800bf0c:	68a3      	ldr	r3, [r4, #8]
 800bf0e:	1b9b      	subs	r3, r3, r6
 800bf10:	60a3      	str	r3, [r4, #8]
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	4433      	add	r3, r6
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1e:	462a      	mov	r2, r5
 800bf20:	f000 fbf6 	bl	800c710 <_realloc_r>
 800bf24:	4606      	mov	r6, r0
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d1e0      	bne.n	800beec <__ssputs_r+0x5c>
 800bf2a:	6921      	ldr	r1, [r4, #16]
 800bf2c:	4650      	mov	r0, sl
 800bf2e:	f7ff feb7 	bl	800bca0 <_free_r>
 800bf32:	230c      	movs	r3, #12
 800bf34:	f8ca 3000 	str.w	r3, [sl]
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	e7e9      	b.n	800bf1a <__ssputs_r+0x8a>
	...

0800bf48 <_svfiprintf_r>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	4698      	mov	r8, r3
 800bf4e:	898b      	ldrh	r3, [r1, #12]
 800bf50:	061b      	lsls	r3, r3, #24
 800bf52:	b09d      	sub	sp, #116	@ 0x74
 800bf54:	4607      	mov	r7, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	4614      	mov	r4, r2
 800bf5a:	d510      	bpl.n	800bf7e <_svfiprintf_r+0x36>
 800bf5c:	690b      	ldr	r3, [r1, #16]
 800bf5e:	b973      	cbnz	r3, 800bf7e <_svfiprintf_r+0x36>
 800bf60:	2140      	movs	r1, #64	@ 0x40
 800bf62:	f7ff ff09 	bl	800bd78 <_malloc_r>
 800bf66:	6028      	str	r0, [r5, #0]
 800bf68:	6128      	str	r0, [r5, #16]
 800bf6a:	b930      	cbnz	r0, 800bf7a <_svfiprintf_r+0x32>
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	f04f 30ff 	mov.w	r0, #4294967295
 800bf74:	b01d      	add	sp, #116	@ 0x74
 800bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7a:	2340      	movs	r3, #64	@ 0x40
 800bf7c:	616b      	str	r3, [r5, #20]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf82:	2320      	movs	r3, #32
 800bf84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf88:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf8c:	2330      	movs	r3, #48	@ 0x30
 800bf8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c12c <_svfiprintf_r+0x1e4>
 800bf92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf96:	f04f 0901 	mov.w	r9, #1
 800bf9a:	4623      	mov	r3, r4
 800bf9c:	469a      	mov	sl, r3
 800bf9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa2:	b10a      	cbz	r2, 800bfa8 <_svfiprintf_r+0x60>
 800bfa4:	2a25      	cmp	r2, #37	@ 0x25
 800bfa6:	d1f9      	bne.n	800bf9c <_svfiprintf_r+0x54>
 800bfa8:	ebba 0b04 	subs.w	fp, sl, r4
 800bfac:	d00b      	beq.n	800bfc6 <_svfiprintf_r+0x7e>
 800bfae:	465b      	mov	r3, fp
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ff6b 	bl	800be90 <__ssputs_r>
 800bfba:	3001      	adds	r0, #1
 800bfbc:	f000 80a7 	beq.w	800c10e <_svfiprintf_r+0x1c6>
 800bfc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfc2:	445a      	add	r2, fp
 800bfc4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 809f 	beq.w	800c10e <_svfiprintf_r+0x1c6>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfda:	f10a 0a01 	add.w	sl, sl, #1
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfe6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfe8:	4654      	mov	r4, sl
 800bfea:	2205      	movs	r2, #5
 800bfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff0:	484e      	ldr	r0, [pc, #312]	@ (800c12c <_svfiprintf_r+0x1e4>)
 800bff2:	f7f4 f8ed 	bl	80001d0 <memchr>
 800bff6:	9a04      	ldr	r2, [sp, #16]
 800bff8:	b9d8      	cbnz	r0, 800c032 <_svfiprintf_r+0xea>
 800bffa:	06d0      	lsls	r0, r2, #27
 800bffc:	bf44      	itt	mi
 800bffe:	2320      	movmi	r3, #32
 800c000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c004:	0711      	lsls	r1, r2, #28
 800c006:	bf44      	itt	mi
 800c008:	232b      	movmi	r3, #43	@ 0x2b
 800c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c00e:	f89a 3000 	ldrb.w	r3, [sl]
 800c012:	2b2a      	cmp	r3, #42	@ 0x2a
 800c014:	d015      	beq.n	800c042 <_svfiprintf_r+0xfa>
 800c016:	9a07      	ldr	r2, [sp, #28]
 800c018:	4654      	mov	r4, sl
 800c01a:	2000      	movs	r0, #0
 800c01c:	f04f 0c0a 	mov.w	ip, #10
 800c020:	4621      	mov	r1, r4
 800c022:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c026:	3b30      	subs	r3, #48	@ 0x30
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d94b      	bls.n	800c0c4 <_svfiprintf_r+0x17c>
 800c02c:	b1b0      	cbz	r0, 800c05c <_svfiprintf_r+0x114>
 800c02e:	9207      	str	r2, [sp, #28]
 800c030:	e014      	b.n	800c05c <_svfiprintf_r+0x114>
 800c032:	eba0 0308 	sub.w	r3, r0, r8
 800c036:	fa09 f303 	lsl.w	r3, r9, r3
 800c03a:	4313      	orrs	r3, r2
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	46a2      	mov	sl, r4
 800c040:	e7d2      	b.n	800bfe8 <_svfiprintf_r+0xa0>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	1d19      	adds	r1, r3, #4
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	9103      	str	r1, [sp, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bfbb      	ittet	lt
 800c04e:	425b      	neglt	r3, r3
 800c050:	f042 0202 	orrlt.w	r2, r2, #2
 800c054:	9307      	strge	r3, [sp, #28]
 800c056:	9307      	strlt	r3, [sp, #28]
 800c058:	bfb8      	it	lt
 800c05a:	9204      	strlt	r2, [sp, #16]
 800c05c:	7823      	ldrb	r3, [r4, #0]
 800c05e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c060:	d10a      	bne.n	800c078 <_svfiprintf_r+0x130>
 800c062:	7863      	ldrb	r3, [r4, #1]
 800c064:	2b2a      	cmp	r3, #42	@ 0x2a
 800c066:	d132      	bne.n	800c0ce <_svfiprintf_r+0x186>
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	1d1a      	adds	r2, r3, #4
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	9203      	str	r2, [sp, #12]
 800c070:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c074:	3402      	adds	r4, #2
 800c076:	9305      	str	r3, [sp, #20]
 800c078:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c13c <_svfiprintf_r+0x1f4>
 800c07c:	7821      	ldrb	r1, [r4, #0]
 800c07e:	2203      	movs	r2, #3
 800c080:	4650      	mov	r0, sl
 800c082:	f7f4 f8a5 	bl	80001d0 <memchr>
 800c086:	b138      	cbz	r0, 800c098 <_svfiprintf_r+0x150>
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	eba0 000a 	sub.w	r0, r0, sl
 800c08e:	2240      	movs	r2, #64	@ 0x40
 800c090:	4082      	lsls	r2, r0
 800c092:	4313      	orrs	r3, r2
 800c094:	3401      	adds	r4, #1
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c09c:	4824      	ldr	r0, [pc, #144]	@ (800c130 <_svfiprintf_r+0x1e8>)
 800c09e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0a2:	2206      	movs	r2, #6
 800c0a4:	f7f4 f894 	bl	80001d0 <memchr>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d036      	beq.n	800c11a <_svfiprintf_r+0x1d2>
 800c0ac:	4b21      	ldr	r3, [pc, #132]	@ (800c134 <_svfiprintf_r+0x1ec>)
 800c0ae:	bb1b      	cbnz	r3, 800c0f8 <_svfiprintf_r+0x1b0>
 800c0b0:	9b03      	ldr	r3, [sp, #12]
 800c0b2:	3307      	adds	r3, #7
 800c0b4:	f023 0307 	bic.w	r3, r3, #7
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	9303      	str	r3, [sp, #12]
 800c0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0be:	4433      	add	r3, r6
 800c0c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c2:	e76a      	b.n	800bf9a <_svfiprintf_r+0x52>
 800c0c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	e7a8      	b.n	800c020 <_svfiprintf_r+0xd8>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	3401      	adds	r4, #1
 800c0d2:	9305      	str	r3, [sp, #20]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f04f 0c0a 	mov.w	ip, #10
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e0:	3a30      	subs	r2, #48	@ 0x30
 800c0e2:	2a09      	cmp	r2, #9
 800c0e4:	d903      	bls.n	800c0ee <_svfiprintf_r+0x1a6>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0c6      	beq.n	800c078 <_svfiprintf_r+0x130>
 800c0ea:	9105      	str	r1, [sp, #20]
 800c0ec:	e7c4      	b.n	800c078 <_svfiprintf_r+0x130>
 800c0ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e7f0      	b.n	800c0da <_svfiprintf_r+0x192>
 800c0f8:	ab03      	add	r3, sp, #12
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <_svfiprintf_r+0x1f0>)
 800c100:	a904      	add	r1, sp, #16
 800c102:	4638      	mov	r0, r7
 800c104:	f3af 8000 	nop.w
 800c108:	1c42      	adds	r2, r0, #1
 800c10a:	4606      	mov	r6, r0
 800c10c:	d1d6      	bne.n	800c0bc <_svfiprintf_r+0x174>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	065b      	lsls	r3, r3, #25
 800c112:	f53f af2d 	bmi.w	800bf70 <_svfiprintf_r+0x28>
 800c116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c118:	e72c      	b.n	800bf74 <_svfiprintf_r+0x2c>
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	462a      	mov	r2, r5
 800c120:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <_svfiprintf_r+0x1f0>)
 800c122:	a904      	add	r1, sp, #16
 800c124:	4638      	mov	r0, r7
 800c126:	f000 f879 	bl	800c21c <_printf_i>
 800c12a:	e7ed      	b.n	800c108 <_svfiprintf_r+0x1c0>
 800c12c:	0800c98c 	.word	0x0800c98c
 800c130:	0800c996 	.word	0x0800c996
 800c134:	00000000 	.word	0x00000000
 800c138:	0800be91 	.word	0x0800be91
 800c13c:	0800c992 	.word	0x0800c992

0800c140 <_printf_common>:
 800c140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c144:	4616      	mov	r6, r2
 800c146:	4698      	mov	r8, r3
 800c148:	688a      	ldr	r2, [r1, #8]
 800c14a:	690b      	ldr	r3, [r1, #16]
 800c14c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c150:	4293      	cmp	r3, r2
 800c152:	bfb8      	it	lt
 800c154:	4613      	movlt	r3, r2
 800c156:	6033      	str	r3, [r6, #0]
 800c158:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c15c:	4607      	mov	r7, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	b10a      	cbz	r2, 800c166 <_printf_common+0x26>
 800c162:	3301      	adds	r3, #1
 800c164:	6033      	str	r3, [r6, #0]
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	0699      	lsls	r1, r3, #26
 800c16a:	bf42      	ittt	mi
 800c16c:	6833      	ldrmi	r3, [r6, #0]
 800c16e:	3302      	addmi	r3, #2
 800c170:	6033      	strmi	r3, [r6, #0]
 800c172:	6825      	ldr	r5, [r4, #0]
 800c174:	f015 0506 	ands.w	r5, r5, #6
 800c178:	d106      	bne.n	800c188 <_printf_common+0x48>
 800c17a:	f104 0a19 	add.w	sl, r4, #25
 800c17e:	68e3      	ldr	r3, [r4, #12]
 800c180:	6832      	ldr	r2, [r6, #0]
 800c182:	1a9b      	subs	r3, r3, r2
 800c184:	42ab      	cmp	r3, r5
 800c186:	dc26      	bgt.n	800c1d6 <_printf_common+0x96>
 800c188:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	3b00      	subs	r3, #0
 800c190:	bf18      	it	ne
 800c192:	2301      	movne	r3, #1
 800c194:	0692      	lsls	r2, r2, #26
 800c196:	d42b      	bmi.n	800c1f0 <_printf_common+0xb0>
 800c198:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c19c:	4641      	mov	r1, r8
 800c19e:	4638      	mov	r0, r7
 800c1a0:	47c8      	blx	r9
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d01e      	beq.n	800c1e4 <_printf_common+0xa4>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	f003 0306 	and.w	r3, r3, #6
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	bf02      	ittt	eq
 800c1b2:	68e5      	ldreq	r5, [r4, #12]
 800c1b4:	6833      	ldreq	r3, [r6, #0]
 800c1b6:	1aed      	subeq	r5, r5, r3
 800c1b8:	68a3      	ldr	r3, [r4, #8]
 800c1ba:	bf0c      	ite	eq
 800c1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1c0:	2500      	movne	r5, #0
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	bfc4      	itt	gt
 800c1c6:	1a9b      	subgt	r3, r3, r2
 800c1c8:	18ed      	addgt	r5, r5, r3
 800c1ca:	2600      	movs	r6, #0
 800c1cc:	341a      	adds	r4, #26
 800c1ce:	42b5      	cmp	r5, r6
 800c1d0:	d11a      	bne.n	800c208 <_printf_common+0xc8>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e008      	b.n	800c1e8 <_printf_common+0xa8>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4652      	mov	r2, sl
 800c1da:	4641      	mov	r1, r8
 800c1dc:	4638      	mov	r0, r7
 800c1de:	47c8      	blx	r9
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d103      	bne.n	800c1ec <_printf_common+0xac>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ec:	3501      	adds	r5, #1
 800c1ee:	e7c6      	b.n	800c17e <_printf_common+0x3e>
 800c1f0:	18e1      	adds	r1, r4, r3
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	2030      	movs	r0, #48	@ 0x30
 800c1f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1fa:	4422      	add	r2, r4
 800c1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c204:	3302      	adds	r3, #2
 800c206:	e7c7      	b.n	800c198 <_printf_common+0x58>
 800c208:	2301      	movs	r3, #1
 800c20a:	4622      	mov	r2, r4
 800c20c:	4641      	mov	r1, r8
 800c20e:	4638      	mov	r0, r7
 800c210:	47c8      	blx	r9
 800c212:	3001      	adds	r0, #1
 800c214:	d0e6      	beq.n	800c1e4 <_printf_common+0xa4>
 800c216:	3601      	adds	r6, #1
 800c218:	e7d9      	b.n	800c1ce <_printf_common+0x8e>
	...

0800c21c <_printf_i>:
 800c21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c220:	7e0f      	ldrb	r7, [r1, #24]
 800c222:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c224:	2f78      	cmp	r7, #120	@ 0x78
 800c226:	4691      	mov	r9, r2
 800c228:	4680      	mov	r8, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	469a      	mov	sl, r3
 800c22e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c232:	d807      	bhi.n	800c244 <_printf_i+0x28>
 800c234:	2f62      	cmp	r7, #98	@ 0x62
 800c236:	d80a      	bhi.n	800c24e <_printf_i+0x32>
 800c238:	2f00      	cmp	r7, #0
 800c23a:	f000 80d2 	beq.w	800c3e2 <_printf_i+0x1c6>
 800c23e:	2f58      	cmp	r7, #88	@ 0x58
 800c240:	f000 80b9 	beq.w	800c3b6 <_printf_i+0x19a>
 800c244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c248:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c24c:	e03a      	b.n	800c2c4 <_printf_i+0xa8>
 800c24e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c252:	2b15      	cmp	r3, #21
 800c254:	d8f6      	bhi.n	800c244 <_printf_i+0x28>
 800c256:	a101      	add	r1, pc, #4	@ (adr r1, 800c25c <_printf_i+0x40>)
 800c258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c25c:	0800c2b5 	.word	0x0800c2b5
 800c260:	0800c2c9 	.word	0x0800c2c9
 800c264:	0800c245 	.word	0x0800c245
 800c268:	0800c245 	.word	0x0800c245
 800c26c:	0800c245 	.word	0x0800c245
 800c270:	0800c245 	.word	0x0800c245
 800c274:	0800c2c9 	.word	0x0800c2c9
 800c278:	0800c245 	.word	0x0800c245
 800c27c:	0800c245 	.word	0x0800c245
 800c280:	0800c245 	.word	0x0800c245
 800c284:	0800c245 	.word	0x0800c245
 800c288:	0800c3c9 	.word	0x0800c3c9
 800c28c:	0800c2f3 	.word	0x0800c2f3
 800c290:	0800c383 	.word	0x0800c383
 800c294:	0800c245 	.word	0x0800c245
 800c298:	0800c245 	.word	0x0800c245
 800c29c:	0800c3eb 	.word	0x0800c3eb
 800c2a0:	0800c245 	.word	0x0800c245
 800c2a4:	0800c2f3 	.word	0x0800c2f3
 800c2a8:	0800c245 	.word	0x0800c245
 800c2ac:	0800c245 	.word	0x0800c245
 800c2b0:	0800c38b 	.word	0x0800c38b
 800c2b4:	6833      	ldr	r3, [r6, #0]
 800c2b6:	1d1a      	adds	r2, r3, #4
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	6032      	str	r2, [r6, #0]
 800c2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e09d      	b.n	800c404 <_printf_i+0x1e8>
 800c2c8:	6833      	ldr	r3, [r6, #0]
 800c2ca:	6820      	ldr	r0, [r4, #0]
 800c2cc:	1d19      	adds	r1, r3, #4
 800c2ce:	6031      	str	r1, [r6, #0]
 800c2d0:	0606      	lsls	r6, r0, #24
 800c2d2:	d501      	bpl.n	800c2d8 <_printf_i+0xbc>
 800c2d4:	681d      	ldr	r5, [r3, #0]
 800c2d6:	e003      	b.n	800c2e0 <_printf_i+0xc4>
 800c2d8:	0645      	lsls	r5, r0, #25
 800c2da:	d5fb      	bpl.n	800c2d4 <_printf_i+0xb8>
 800c2dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	da03      	bge.n	800c2ec <_printf_i+0xd0>
 800c2e4:	232d      	movs	r3, #45	@ 0x2d
 800c2e6:	426d      	negs	r5, r5
 800c2e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2ec:	4859      	ldr	r0, [pc, #356]	@ (800c454 <_printf_i+0x238>)
 800c2ee:	230a      	movs	r3, #10
 800c2f0:	e011      	b.n	800c316 <_printf_i+0xfa>
 800c2f2:	6821      	ldr	r1, [r4, #0]
 800c2f4:	6833      	ldr	r3, [r6, #0]
 800c2f6:	0608      	lsls	r0, r1, #24
 800c2f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2fc:	d402      	bmi.n	800c304 <_printf_i+0xe8>
 800c2fe:	0649      	lsls	r1, r1, #25
 800c300:	bf48      	it	mi
 800c302:	b2ad      	uxthmi	r5, r5
 800c304:	2f6f      	cmp	r7, #111	@ 0x6f
 800c306:	4853      	ldr	r0, [pc, #332]	@ (800c454 <_printf_i+0x238>)
 800c308:	6033      	str	r3, [r6, #0]
 800c30a:	bf14      	ite	ne
 800c30c:	230a      	movne	r3, #10
 800c30e:	2308      	moveq	r3, #8
 800c310:	2100      	movs	r1, #0
 800c312:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c316:	6866      	ldr	r6, [r4, #4]
 800c318:	60a6      	str	r6, [r4, #8]
 800c31a:	2e00      	cmp	r6, #0
 800c31c:	bfa2      	ittt	ge
 800c31e:	6821      	ldrge	r1, [r4, #0]
 800c320:	f021 0104 	bicge.w	r1, r1, #4
 800c324:	6021      	strge	r1, [r4, #0]
 800c326:	b90d      	cbnz	r5, 800c32c <_printf_i+0x110>
 800c328:	2e00      	cmp	r6, #0
 800c32a:	d04b      	beq.n	800c3c4 <_printf_i+0x1a8>
 800c32c:	4616      	mov	r6, r2
 800c32e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c332:	fb03 5711 	mls	r7, r3, r1, r5
 800c336:	5dc7      	ldrb	r7, [r0, r7]
 800c338:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c33c:	462f      	mov	r7, r5
 800c33e:	42bb      	cmp	r3, r7
 800c340:	460d      	mov	r5, r1
 800c342:	d9f4      	bls.n	800c32e <_printf_i+0x112>
 800c344:	2b08      	cmp	r3, #8
 800c346:	d10b      	bne.n	800c360 <_printf_i+0x144>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	07df      	lsls	r7, r3, #31
 800c34c:	d508      	bpl.n	800c360 <_printf_i+0x144>
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	6861      	ldr	r1, [r4, #4]
 800c352:	4299      	cmp	r1, r3
 800c354:	bfde      	ittt	le
 800c356:	2330      	movle	r3, #48	@ 0x30
 800c358:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c35c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c360:	1b92      	subs	r2, r2, r6
 800c362:	6122      	str	r2, [r4, #16]
 800c364:	f8cd a000 	str.w	sl, [sp]
 800c368:	464b      	mov	r3, r9
 800c36a:	aa03      	add	r2, sp, #12
 800c36c:	4621      	mov	r1, r4
 800c36e:	4640      	mov	r0, r8
 800c370:	f7ff fee6 	bl	800c140 <_printf_common>
 800c374:	3001      	adds	r0, #1
 800c376:	d14a      	bne.n	800c40e <_printf_i+0x1f2>
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	b004      	add	sp, #16
 800c37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	f043 0320 	orr.w	r3, r3, #32
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	4833      	ldr	r0, [pc, #204]	@ (800c458 <_printf_i+0x23c>)
 800c38c:	2778      	movs	r7, #120	@ 0x78
 800c38e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	6831      	ldr	r1, [r6, #0]
 800c396:	061f      	lsls	r7, r3, #24
 800c398:	f851 5b04 	ldr.w	r5, [r1], #4
 800c39c:	d402      	bmi.n	800c3a4 <_printf_i+0x188>
 800c39e:	065f      	lsls	r7, r3, #25
 800c3a0:	bf48      	it	mi
 800c3a2:	b2ad      	uxthmi	r5, r5
 800c3a4:	6031      	str	r1, [r6, #0]
 800c3a6:	07d9      	lsls	r1, r3, #31
 800c3a8:	bf44      	itt	mi
 800c3aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c3ae:	6023      	strmi	r3, [r4, #0]
 800c3b0:	b11d      	cbz	r5, 800c3ba <_printf_i+0x19e>
 800c3b2:	2310      	movs	r3, #16
 800c3b4:	e7ac      	b.n	800c310 <_printf_i+0xf4>
 800c3b6:	4827      	ldr	r0, [pc, #156]	@ (800c454 <_printf_i+0x238>)
 800c3b8:	e7e9      	b.n	800c38e <_printf_i+0x172>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	f023 0320 	bic.w	r3, r3, #32
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	e7f6      	b.n	800c3b2 <_printf_i+0x196>
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	e7bd      	b.n	800c344 <_printf_i+0x128>
 800c3c8:	6833      	ldr	r3, [r6, #0]
 800c3ca:	6825      	ldr	r5, [r4, #0]
 800c3cc:	6961      	ldr	r1, [r4, #20]
 800c3ce:	1d18      	adds	r0, r3, #4
 800c3d0:	6030      	str	r0, [r6, #0]
 800c3d2:	062e      	lsls	r6, r5, #24
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	d501      	bpl.n	800c3dc <_printf_i+0x1c0>
 800c3d8:	6019      	str	r1, [r3, #0]
 800c3da:	e002      	b.n	800c3e2 <_printf_i+0x1c6>
 800c3dc:	0668      	lsls	r0, r5, #25
 800c3de:	d5fb      	bpl.n	800c3d8 <_printf_i+0x1bc>
 800c3e0:	8019      	strh	r1, [r3, #0]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	6123      	str	r3, [r4, #16]
 800c3e6:	4616      	mov	r6, r2
 800c3e8:	e7bc      	b.n	800c364 <_printf_i+0x148>
 800c3ea:	6833      	ldr	r3, [r6, #0]
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	6032      	str	r2, [r6, #0]
 800c3f0:	681e      	ldr	r6, [r3, #0]
 800c3f2:	6862      	ldr	r2, [r4, #4]
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f7f3 feea 	bl	80001d0 <memchr>
 800c3fc:	b108      	cbz	r0, 800c402 <_printf_i+0x1e6>
 800c3fe:	1b80      	subs	r0, r0, r6
 800c400:	6060      	str	r0, [r4, #4]
 800c402:	6863      	ldr	r3, [r4, #4]
 800c404:	6123      	str	r3, [r4, #16]
 800c406:	2300      	movs	r3, #0
 800c408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c40c:	e7aa      	b.n	800c364 <_printf_i+0x148>
 800c40e:	6923      	ldr	r3, [r4, #16]
 800c410:	4632      	mov	r2, r6
 800c412:	4649      	mov	r1, r9
 800c414:	4640      	mov	r0, r8
 800c416:	47d0      	blx	sl
 800c418:	3001      	adds	r0, #1
 800c41a:	d0ad      	beq.n	800c378 <_printf_i+0x15c>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	079b      	lsls	r3, r3, #30
 800c420:	d413      	bmi.n	800c44a <_printf_i+0x22e>
 800c422:	68e0      	ldr	r0, [r4, #12]
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	4298      	cmp	r0, r3
 800c428:	bfb8      	it	lt
 800c42a:	4618      	movlt	r0, r3
 800c42c:	e7a6      	b.n	800c37c <_printf_i+0x160>
 800c42e:	2301      	movs	r3, #1
 800c430:	4632      	mov	r2, r6
 800c432:	4649      	mov	r1, r9
 800c434:	4640      	mov	r0, r8
 800c436:	47d0      	blx	sl
 800c438:	3001      	adds	r0, #1
 800c43a:	d09d      	beq.n	800c378 <_printf_i+0x15c>
 800c43c:	3501      	adds	r5, #1
 800c43e:	68e3      	ldr	r3, [r4, #12]
 800c440:	9903      	ldr	r1, [sp, #12]
 800c442:	1a5b      	subs	r3, r3, r1
 800c444:	42ab      	cmp	r3, r5
 800c446:	dcf2      	bgt.n	800c42e <_printf_i+0x212>
 800c448:	e7eb      	b.n	800c422 <_printf_i+0x206>
 800c44a:	2500      	movs	r5, #0
 800c44c:	f104 0619 	add.w	r6, r4, #25
 800c450:	e7f5      	b.n	800c43e <_printf_i+0x222>
 800c452:	bf00      	nop
 800c454:	0800c99d 	.word	0x0800c99d
 800c458:	0800c9ae 	.word	0x0800c9ae

0800c45c <__sflush_r>:
 800c45c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	0716      	lsls	r6, r2, #28
 800c466:	4605      	mov	r5, r0
 800c468:	460c      	mov	r4, r1
 800c46a:	d454      	bmi.n	800c516 <__sflush_r+0xba>
 800c46c:	684b      	ldr	r3, [r1, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	dc02      	bgt.n	800c478 <__sflush_r+0x1c>
 800c472:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c474:	2b00      	cmp	r3, #0
 800c476:	dd48      	ble.n	800c50a <__sflush_r+0xae>
 800c478:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	d045      	beq.n	800c50a <__sflush_r+0xae>
 800c47e:	2300      	movs	r3, #0
 800c480:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c484:	682f      	ldr	r7, [r5, #0]
 800c486:	6a21      	ldr	r1, [r4, #32]
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	d030      	beq.n	800c4ee <__sflush_r+0x92>
 800c48c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c48e:	89a3      	ldrh	r3, [r4, #12]
 800c490:	0759      	lsls	r1, r3, #29
 800c492:	d505      	bpl.n	800c4a0 <__sflush_r+0x44>
 800c494:	6863      	ldr	r3, [r4, #4]
 800c496:	1ad2      	subs	r2, r2, r3
 800c498:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c49a:	b10b      	cbz	r3, 800c4a0 <__sflush_r+0x44>
 800c49c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4a4:	6a21      	ldr	r1, [r4, #32]
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	47b0      	blx	r6
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	d106      	bne.n	800c4be <__sflush_r+0x62>
 800c4b0:	6829      	ldr	r1, [r5, #0]
 800c4b2:	291d      	cmp	r1, #29
 800c4b4:	d82b      	bhi.n	800c50e <__sflush_r+0xb2>
 800c4b6:	4a2a      	ldr	r2, [pc, #168]	@ (800c560 <__sflush_r+0x104>)
 800c4b8:	410a      	asrs	r2, r1
 800c4ba:	07d6      	lsls	r6, r2, #31
 800c4bc:	d427      	bmi.n	800c50e <__sflush_r+0xb2>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	6062      	str	r2, [r4, #4]
 800c4c2:	04d9      	lsls	r1, r3, #19
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	d504      	bpl.n	800c4d4 <__sflush_r+0x78>
 800c4ca:	1c42      	adds	r2, r0, #1
 800c4cc:	d101      	bne.n	800c4d2 <__sflush_r+0x76>
 800c4ce:	682b      	ldr	r3, [r5, #0]
 800c4d0:	b903      	cbnz	r3, 800c4d4 <__sflush_r+0x78>
 800c4d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4d6:	602f      	str	r7, [r5, #0]
 800c4d8:	b1b9      	cbz	r1, 800c50a <__sflush_r+0xae>
 800c4da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d002      	beq.n	800c4e8 <__sflush_r+0x8c>
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7ff fbdc 	bl	800bca0 <_free_r>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4ec:	e00d      	b.n	800c50a <__sflush_r+0xae>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	1c50      	adds	r0, r2, #1
 800c4f8:	d1c9      	bne.n	800c48e <__sflush_r+0x32>
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0c6      	beq.n	800c48e <__sflush_r+0x32>
 800c500:	2b1d      	cmp	r3, #29
 800c502:	d001      	beq.n	800c508 <__sflush_r+0xac>
 800c504:	2b16      	cmp	r3, #22
 800c506:	d11e      	bne.n	800c546 <__sflush_r+0xea>
 800c508:	602f      	str	r7, [r5, #0]
 800c50a:	2000      	movs	r0, #0
 800c50c:	e022      	b.n	800c554 <__sflush_r+0xf8>
 800c50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c512:	b21b      	sxth	r3, r3
 800c514:	e01b      	b.n	800c54e <__sflush_r+0xf2>
 800c516:	690f      	ldr	r7, [r1, #16]
 800c518:	2f00      	cmp	r7, #0
 800c51a:	d0f6      	beq.n	800c50a <__sflush_r+0xae>
 800c51c:	0793      	lsls	r3, r2, #30
 800c51e:	680e      	ldr	r6, [r1, #0]
 800c520:	bf08      	it	eq
 800c522:	694b      	ldreq	r3, [r1, #20]
 800c524:	600f      	str	r7, [r1, #0]
 800c526:	bf18      	it	ne
 800c528:	2300      	movne	r3, #0
 800c52a:	eba6 0807 	sub.w	r8, r6, r7
 800c52e:	608b      	str	r3, [r1, #8]
 800c530:	f1b8 0f00 	cmp.w	r8, #0
 800c534:	dde9      	ble.n	800c50a <__sflush_r+0xae>
 800c536:	6a21      	ldr	r1, [r4, #32]
 800c538:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c53a:	4643      	mov	r3, r8
 800c53c:	463a      	mov	r2, r7
 800c53e:	4628      	mov	r0, r5
 800c540:	47b0      	blx	r6
 800c542:	2800      	cmp	r0, #0
 800c544:	dc08      	bgt.n	800c558 <__sflush_r+0xfc>
 800c546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c54e:	81a3      	strh	r3, [r4, #12]
 800c550:	f04f 30ff 	mov.w	r0, #4294967295
 800c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c558:	4407      	add	r7, r0
 800c55a:	eba8 0800 	sub.w	r8, r8, r0
 800c55e:	e7e7      	b.n	800c530 <__sflush_r+0xd4>
 800c560:	dfbffffe 	.word	0xdfbffffe

0800c564 <_fflush_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	690b      	ldr	r3, [r1, #16]
 800c568:	4605      	mov	r5, r0
 800c56a:	460c      	mov	r4, r1
 800c56c:	b913      	cbnz	r3, 800c574 <_fflush_r+0x10>
 800c56e:	2500      	movs	r5, #0
 800c570:	4628      	mov	r0, r5
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	b118      	cbz	r0, 800c57e <_fflush_r+0x1a>
 800c576:	6a03      	ldr	r3, [r0, #32]
 800c578:	b90b      	cbnz	r3, 800c57e <_fflush_r+0x1a>
 800c57a:	f7ff f911 	bl	800b7a0 <__sinit>
 800c57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0f3      	beq.n	800c56e <_fflush_r+0xa>
 800c586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c588:	07d0      	lsls	r0, r2, #31
 800c58a:	d404      	bmi.n	800c596 <_fflush_r+0x32>
 800c58c:	0599      	lsls	r1, r3, #22
 800c58e:	d402      	bmi.n	800c596 <_fflush_r+0x32>
 800c590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c592:	f7ff fb74 	bl	800bc7e <__retarget_lock_acquire_recursive>
 800c596:	4628      	mov	r0, r5
 800c598:	4621      	mov	r1, r4
 800c59a:	f7ff ff5f 	bl	800c45c <__sflush_r>
 800c59e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5a0:	07da      	lsls	r2, r3, #31
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	d4e4      	bmi.n	800c570 <_fflush_r+0xc>
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	059b      	lsls	r3, r3, #22
 800c5aa:	d4e1      	bmi.n	800c570 <_fflush_r+0xc>
 800c5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ae:	f7ff fb67 	bl	800bc80 <__retarget_lock_release_recursive>
 800c5b2:	e7dd      	b.n	800c570 <_fflush_r+0xc>

0800c5b4 <__swhatbuf_r>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	b096      	sub	sp, #88	@ 0x58
 800c5c0:	4615      	mov	r5, r2
 800c5c2:	461e      	mov	r6, r3
 800c5c4:	da0d      	bge.n	800c5e2 <__swhatbuf_r+0x2e>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5cc:	f04f 0100 	mov.w	r1, #0
 800c5d0:	bf14      	ite	ne
 800c5d2:	2340      	movne	r3, #64	@ 0x40
 800c5d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5d8:	2000      	movs	r0, #0
 800c5da:	6031      	str	r1, [r6, #0]
 800c5dc:	602b      	str	r3, [r5, #0]
 800c5de:	b016      	add	sp, #88	@ 0x58
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	466a      	mov	r2, sp
 800c5e4:	f000 f862 	bl	800c6ac <_fstat_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	dbec      	blt.n	800c5c6 <__swhatbuf_r+0x12>
 800c5ec:	9901      	ldr	r1, [sp, #4]
 800c5ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5f6:	4259      	negs	r1, r3
 800c5f8:	4159      	adcs	r1, r3
 800c5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5fe:	e7eb      	b.n	800c5d8 <__swhatbuf_r+0x24>

0800c600 <__smakebuf_r>:
 800c600:	898b      	ldrh	r3, [r1, #12]
 800c602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c604:	079d      	lsls	r5, r3, #30
 800c606:	4606      	mov	r6, r0
 800c608:	460c      	mov	r4, r1
 800c60a:	d507      	bpl.n	800c61c <__smakebuf_r+0x1c>
 800c60c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	2301      	movs	r3, #1
 800c616:	6163      	str	r3, [r4, #20]
 800c618:	b003      	add	sp, #12
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61c:	ab01      	add	r3, sp, #4
 800c61e:	466a      	mov	r2, sp
 800c620:	f7ff ffc8 	bl	800c5b4 <__swhatbuf_r>
 800c624:	9f00      	ldr	r7, [sp, #0]
 800c626:	4605      	mov	r5, r0
 800c628:	4639      	mov	r1, r7
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff fba4 	bl	800bd78 <_malloc_r>
 800c630:	b948      	cbnz	r0, 800c646 <__smakebuf_r+0x46>
 800c632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c636:	059a      	lsls	r2, r3, #22
 800c638:	d4ee      	bmi.n	800c618 <__smakebuf_r+0x18>
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	f043 0302 	orr.w	r3, r3, #2
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	e7e2      	b.n	800c60c <__smakebuf_r+0xc>
 800c646:	89a3      	ldrh	r3, [r4, #12]
 800c648:	6020      	str	r0, [r4, #0]
 800c64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c64e:	81a3      	strh	r3, [r4, #12]
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c656:	b15b      	cbz	r3, 800c670 <__smakebuf_r+0x70>
 800c658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c65c:	4630      	mov	r0, r6
 800c65e:	f000 f837 	bl	800c6d0 <_isatty_r>
 800c662:	b128      	cbz	r0, 800c670 <__smakebuf_r+0x70>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f023 0303 	bic.w	r3, r3, #3
 800c66a:	f043 0301 	orr.w	r3, r3, #1
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	431d      	orrs	r5, r3
 800c674:	81a5      	strh	r5, [r4, #12]
 800c676:	e7cf      	b.n	800c618 <__smakebuf_r+0x18>

0800c678 <memmove>:
 800c678:	4288      	cmp	r0, r1
 800c67a:	b510      	push	{r4, lr}
 800c67c:	eb01 0402 	add.w	r4, r1, r2
 800c680:	d902      	bls.n	800c688 <memmove+0x10>
 800c682:	4284      	cmp	r4, r0
 800c684:	4623      	mov	r3, r4
 800c686:	d807      	bhi.n	800c698 <memmove+0x20>
 800c688:	1e43      	subs	r3, r0, #1
 800c68a:	42a1      	cmp	r1, r4
 800c68c:	d008      	beq.n	800c6a0 <memmove+0x28>
 800c68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c696:	e7f8      	b.n	800c68a <memmove+0x12>
 800c698:	4402      	add	r2, r0
 800c69a:	4601      	mov	r1, r0
 800c69c:	428a      	cmp	r2, r1
 800c69e:	d100      	bne.n	800c6a2 <memmove+0x2a>
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6aa:	e7f7      	b.n	800c69c <memmove+0x24>

0800c6ac <_fstat_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4d07      	ldr	r5, [pc, #28]	@ (800c6cc <_fstat_r+0x20>)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	f7f5 fd7c 	bl	80021b6 <_fstat>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d102      	bne.n	800c6c8 <_fstat_r+0x1c>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	b103      	cbz	r3, 800c6c8 <_fstat_r+0x1c>
 800c6c6:	6023      	str	r3, [r4, #0]
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	2000186c 	.word	0x2000186c

0800c6d0 <_isatty_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d06      	ldr	r5, [pc, #24]	@ (800c6ec <_isatty_r+0x1c>)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	602b      	str	r3, [r5, #0]
 800c6dc:	f7f5 fd7b 	bl	80021d6 <_isatty>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d102      	bne.n	800c6ea <_isatty_r+0x1a>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	b103      	cbz	r3, 800c6ea <_isatty_r+0x1a>
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	bd38      	pop	{r3, r4, r5, pc}
 800c6ec:	2000186c 	.word	0x2000186c

0800c6f0 <_sbrk_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4d06      	ldr	r5, [pc, #24]	@ (800c70c <_sbrk_r+0x1c>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	602b      	str	r3, [r5, #0]
 800c6fc:	f7f5 fd84 	bl	8002208 <_sbrk>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_sbrk_r+0x1a>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_sbrk_r+0x1a>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	2000186c 	.word	0x2000186c

0800c710 <_realloc_r>:
 800c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c714:	4680      	mov	r8, r0
 800c716:	4615      	mov	r5, r2
 800c718:	460c      	mov	r4, r1
 800c71a:	b921      	cbnz	r1, 800c726 <_realloc_r+0x16>
 800c71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c720:	4611      	mov	r1, r2
 800c722:	f7ff bb29 	b.w	800bd78 <_malloc_r>
 800c726:	b92a      	cbnz	r2, 800c734 <_realloc_r+0x24>
 800c728:	f7ff faba 	bl	800bca0 <_free_r>
 800c72c:	2400      	movs	r4, #0
 800c72e:	4620      	mov	r0, r4
 800c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c734:	f000 f81a 	bl	800c76c <_malloc_usable_size_r>
 800c738:	4285      	cmp	r5, r0
 800c73a:	4606      	mov	r6, r0
 800c73c:	d802      	bhi.n	800c744 <_realloc_r+0x34>
 800c73e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c742:	d8f4      	bhi.n	800c72e <_realloc_r+0x1e>
 800c744:	4629      	mov	r1, r5
 800c746:	4640      	mov	r0, r8
 800c748:	f7ff fb16 	bl	800bd78 <_malloc_r>
 800c74c:	4607      	mov	r7, r0
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0ec      	beq.n	800c72c <_realloc_r+0x1c>
 800c752:	42b5      	cmp	r5, r6
 800c754:	462a      	mov	r2, r5
 800c756:	4621      	mov	r1, r4
 800c758:	bf28      	it	cs
 800c75a:	4632      	movcs	r2, r6
 800c75c:	f7ff fa91 	bl	800bc82 <memcpy>
 800c760:	4621      	mov	r1, r4
 800c762:	4640      	mov	r0, r8
 800c764:	f7ff fa9c 	bl	800bca0 <_free_r>
 800c768:	463c      	mov	r4, r7
 800c76a:	e7e0      	b.n	800c72e <_realloc_r+0x1e>

0800c76c <_malloc_usable_size_r>:
 800c76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c770:	1f18      	subs	r0, r3, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	bfbc      	itt	lt
 800c776:	580b      	ldrlt	r3, [r1, r0]
 800c778:	18c0      	addlt	r0, r0, r3
 800c77a:	4770      	bx	lr

0800c77c <_init>:
 800c77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77e:	bf00      	nop
 800c780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c782:	bc08      	pop	{r3}
 800c784:	469e      	mov	lr, r3
 800c786:	4770      	bx	lr

0800c788 <_fini>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	bf00      	nop
 800c78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78e:	bc08      	pop	{r3}
 800c790:	469e      	mov	lr, r3
 800c792:	4770      	bx	lr
